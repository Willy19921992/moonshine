/* automatically generated by rust-bindgen 0.64.0 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _reed_solomon {
	pub data_shards: ::std::os::raw::c_int,
	pub parity_shards: ::std::os::raw::c_int,
	pub shards: ::std::os::raw::c_int,
	pub m: *mut ::std::os::raw::c_uchar,
	pub parity: *mut ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout__reed_solomon() {
	const UNINIT: ::std::mem::MaybeUninit<_reed_solomon> = ::std::mem::MaybeUninit::uninit();
	let ptr = UNINIT.as_ptr();
	assert_eq!(
		::std::mem::size_of::<_reed_solomon>(),
		32usize,
		concat!("Size of: ", stringify!(_reed_solomon))
	);
	assert_eq!(
		::std::mem::align_of::<_reed_solomon>(),
		8usize,
		concat!("Alignment of ", stringify!(_reed_solomon))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).data_shards) as usize - ptr as usize },
		0usize,
		concat!(
			"Offset of field: ",
			stringify!(_reed_solomon),
			"::",
			stringify!(data_shards)
		)
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).parity_shards) as usize - ptr as usize },
		4usize,
		concat!(
			"Offset of field: ",
			stringify!(_reed_solomon),
			"::",
			stringify!(parity_shards)
		)
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).shards) as usize - ptr as usize },
		8usize,
		concat!("Offset of field: ", stringify!(_reed_solomon), "::", stringify!(shards))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).m) as usize - ptr as usize },
		16usize,
		concat!("Offset of field: ", stringify!(_reed_solomon), "::", stringify!(m))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).parity) as usize - ptr as usize },
		24usize,
		concat!("Offset of field: ", stringify!(_reed_solomon), "::", stringify!(parity))
	);
}
pub type reed_solomon = _reed_solomon;
extern "C" {
	#[doc = " MUST initial one time"]
	pub fn reed_solomon_init();
}
extern "C" {
	pub fn reed_solomon_new(
		data_shards: ::std::os::raw::c_int,
		parity_shards: ::std::os::raw::c_int,
	) -> *mut reed_solomon;
}
extern "C" {
	pub fn reed_solomon_release(rs: *mut reed_solomon);
}
extern "C" {
	#[doc = " encode a big size of buffer\n input:\n rs\n nr_shards: assert(0 == nr_shards % rs->data_shards)\n shards[nr_shards][block_size]"]
	pub fn reed_solomon_encode(
		rs: *mut reed_solomon,
		shards: *mut *mut ::std::os::raw::c_uchar,
		nr_shards: ::std::os::raw::c_int,
		block_size: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	#[doc = " reconstruct a big size of buffer\n input:\n rs\n nr_shards: assert(0 == nr_shards % rs->data_shards)\n shards[nr_shards][block_size]\n marks[nr_shards] marks as errors"]
	pub fn reed_solomon_reconstruct(
		rs: *mut reed_solomon,
		shards: *mut *mut ::std::os::raw::c_uchar,
		marks: *mut ::std::os::raw::c_uchar,
		nr_shards: ::std::os::raw::c_int,
		block_size: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
