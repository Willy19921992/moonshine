/* automatically generated by rust-bindgen 0.60.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
	storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
	#[inline]
	pub const fn new(storage: Storage) -> Self {
		Self { storage }
	}
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
	Storage: AsRef<[u8]> + AsMut<[u8]>,
{
	#[inline]
	pub fn get_bit(&self, index: usize) -> bool {
		debug_assert!(index / 8 < self.storage.as_ref().len());
		let byte_index = index / 8;
		let byte = self.storage.as_ref()[byte_index];
		let bit_index = if cfg!(target_endian = "big") {
			7 - (index % 8)
		} else {
			index % 8
		};
		let mask = 1 << bit_index;
		byte & mask == mask
	}

	#[inline]
	pub fn set_bit(&mut self, index: usize, val: bool) {
		debug_assert!(index / 8 < self.storage.as_ref().len());
		let byte_index = index / 8;
		let byte = &mut self.storage.as_mut()[byte_index];
		let bit_index = if cfg!(target_endian = "big") {
			7 - (index % 8)
		} else {
			index % 8
		};
		let mask = 1 << bit_index;
		if val {
			*byte |= mask;
		} else {
			*byte &= !mask;
		}
	}

	#[inline]
	pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
		debug_assert!(bit_width <= 64);
		debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
		debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
		let mut val = 0;
		for i in 0..(bit_width as usize) {
			if self.get_bit(i + bit_offset) {
				let index = if cfg!(target_endian = "big") {
					bit_width as usize - 1 - i
				} else {
					i
				};
				val |= 1 << index;
			}
		}
		val
	}

	#[inline]
	pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
		debug_assert!(bit_width <= 64);
		debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
		debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
		for i in 0..(bit_width as usize) {
			let mask = 1 << i;
			let val_bit_is_set = val & mask == mask;
			let index = if cfg!(target_endian = "big") {
				bit_width as usize - 1 - i
			} else {
				i
			};
			self.set_bit(index + bit_offset, val_bit_is_set);
		}
	}
}
pub const AV_TIME_BASE: u32 = 1000000;
pub const EAGAIN: u32 = 11;
pub const AV_HAVE_BIGENDIAN: u32 = 0;
pub const AV_HAVE_FAST_UNALIGNED: u32 = 1;
pub const AVERROR_EXPERIMENTAL: i32 = -733130664;
pub const AVERROR_INPUT_CHANGED: i32 = -1668179713;
pub const AVERROR_OUTPUT_CHANGED: i32 = -1668179714;
pub const AV_ERROR_MAX_STRING_SIZE: u32 = 64;
pub const AV_LOG_QUIET: i32 = -8;
pub const AV_LOG_PANIC: u32 = 0;
pub const AV_LOG_FATAL: u32 = 8;
pub const AV_LOG_ERROR: u32 = 16;
pub const AV_LOG_WARNING: u32 = 24;
pub const AV_LOG_INFO: u32 = 32;
pub const AV_LOG_VERBOSE: u32 = 40;
pub const AV_LOG_DEBUG: u32 = 48;
pub const AV_LOG_TRACE: u32 = 56;
pub const AV_LOG_MAX_OFFSET: u32 = 64;
pub const AV_LOG_SKIP_REPEATED: u32 = 1;
pub const AV_LOG_PRINT_LEVEL: u32 = 2;
pub const AVPALETTE_SIZE: u32 = 1024;
pub const AVPALETTE_COUNT: u32 = 256;
pub const AV_FOURCC_MAX_STRING_SIZE: u32 = 32;
pub const AV_BUFFER_FLAG_READONLY: u32 = 1;
pub const AV_DICT_MATCH_CASE: u32 = 1;
pub const AV_DICT_IGNORE_SUFFIX: u32 = 2;
pub const AV_DICT_DONT_STRDUP_KEY: u32 = 4;
pub const AV_DICT_DONT_STRDUP_VAL: u32 = 8;
pub const AV_DICT_DONT_OVERWRITE: u32 = 16;
pub const AV_DICT_APPEND: u32 = 32;
pub const AV_DICT_MULTIKEY: u32 = 64;
pub const AV_CH_LAYOUT_NATIVE: i64 = -9223372036854775808;
pub const AV_NUM_DATA_POINTERS: u32 = 8;
pub const AV_FRAME_FLAG_CORRUPT: u32 = 1;
pub const AV_FRAME_FLAG_DISCARD: u32 = 4;
pub const AV_CODEC_CAP_DRAW_HORIZ_BAND: u32 = 1;
pub const AV_CODEC_CAP_DR1: u32 = 2;
pub const AV_CODEC_CAP_TRUNCATED: u32 = 8;
pub const AV_CODEC_CAP_DELAY: u32 = 32;
pub const AV_CODEC_CAP_SMALL_LAST_FRAME: u32 = 64;
pub const AV_CODEC_CAP_SUBFRAMES: u32 = 256;
pub const AV_CODEC_CAP_EXPERIMENTAL: u32 = 512;
pub const AV_CODEC_CAP_CHANNEL_CONF: u32 = 1024;
pub const AV_CODEC_CAP_FRAME_THREADS: u32 = 4096;
pub const AV_CODEC_CAP_SLICE_THREADS: u32 = 8192;
pub const AV_CODEC_CAP_PARAM_CHANGE: u32 = 16384;
pub const AV_CODEC_CAP_OTHER_THREADS: u32 = 32768;
pub const AV_CODEC_CAP_AUTO_THREADS: u32 = 32768;
pub const AV_CODEC_CAP_VARIABLE_FRAME_SIZE: u32 = 65536;
pub const AV_CODEC_CAP_AVOID_PROBING: u32 = 131072;
pub const AV_CODEC_CAP_INTRA_ONLY: u32 = 1073741824;
pub const AV_CODEC_CAP_LOSSLESS: u32 = 2147483648;
pub const AV_CODEC_CAP_HARDWARE: u32 = 262144;
pub const AV_CODEC_CAP_HYBRID: u32 = 524288;
pub const AV_CODEC_CAP_ENCODER_REORDERED_OPAQUE: u32 = 1048576;
pub const AV_CODEC_CAP_ENCODER_FLUSH: u32 = 2097152;
pub const AV_CODEC_PROP_INTRA_ONLY: u32 = 1;
pub const AV_CODEC_PROP_LOSSY: u32 = 2;
pub const AV_CODEC_PROP_LOSSLESS: u32 = 4;
pub const AV_CODEC_PROP_REORDER: u32 = 8;
pub const AV_CODEC_PROP_BITMAP_SUB: u32 = 65536;
pub const AV_CODEC_PROP_TEXT_SUB: u32 = 131072;
pub const AV_INPUT_BUFFER_PADDING_SIZE: u32 = 64;
pub const AV_PKT_FLAG_KEY: u32 = 1;
pub const AV_PKT_FLAG_CORRUPT: u32 = 2;
pub const AV_PKT_FLAG_DISCARD: u32 = 4;
pub const AV_PKT_FLAG_TRUSTED: u32 = 8;
pub const AV_PKT_FLAG_DISPOSABLE: u32 = 16;
pub const AV_INPUT_BUFFER_MIN_SIZE: u32 = 16384;
pub const AV_CODEC_FLAG_UNALIGNED: u32 = 1;
pub const AV_CODEC_FLAG_QSCALE: u32 = 2;
pub const AV_CODEC_FLAG_4MV: u32 = 4;
pub const AV_CODEC_FLAG_OUTPUT_CORRUPT: u32 = 8;
pub const AV_CODEC_FLAG_QPEL: u32 = 16;
pub const AV_CODEC_FLAG_DROPCHANGED: u32 = 32;
pub const AV_CODEC_FLAG_PASS1: u32 = 512;
pub const AV_CODEC_FLAG_PASS2: u32 = 1024;
pub const AV_CODEC_FLAG_LOOP_FILTER: u32 = 2048;
pub const AV_CODEC_FLAG_GRAY: u32 = 8192;
pub const AV_CODEC_FLAG_PSNR: u32 = 32768;
pub const AV_CODEC_FLAG_TRUNCATED: u32 = 65536;
pub const AV_CODEC_FLAG_INTERLACED_DCT: u32 = 262144;
pub const AV_CODEC_FLAG_LOW_DELAY: u32 = 524288;
pub const AV_CODEC_FLAG_GLOBAL_HEADER: u32 = 4194304;
pub const AV_CODEC_FLAG_BITEXACT: u32 = 8388608;
pub const AV_CODEC_FLAG_AC_PRED: u32 = 16777216;
pub const AV_CODEC_FLAG_INTERLACED_ME: u32 = 536870912;
pub const AV_CODEC_FLAG_CLOSED_GOP: u32 = 2147483648;
pub const AV_CODEC_FLAG2_FAST: u32 = 1;
pub const AV_CODEC_FLAG2_NO_OUTPUT: u32 = 4;
pub const AV_CODEC_FLAG2_LOCAL_HEADER: u32 = 8;
pub const AV_CODEC_FLAG2_DROP_FRAME_TIMECODE: u32 = 8192;
pub const AV_CODEC_FLAG2_CHUNKS: u32 = 32768;
pub const AV_CODEC_FLAG2_IGNORE_CROP: u32 = 65536;
pub const AV_CODEC_FLAG2_SHOW_ALL: u32 = 4194304;
pub const AV_CODEC_FLAG2_EXPORT_MVS: u32 = 268435456;
pub const AV_CODEC_FLAG2_SKIP_MANUAL: u32 = 536870912;
pub const AV_CODEC_FLAG2_RO_FLUSH_NOOP: u32 = 1073741824;
pub const AV_CODEC_EXPORT_DATA_MVS: u32 = 1;
pub const AV_CODEC_EXPORT_DATA_PRFT: u32 = 2;
pub const AV_CODEC_EXPORT_DATA_VIDEO_ENC_PARAMS: u32 = 4;
pub const AV_CODEC_EXPORT_DATA_FILM_GRAIN: u32 = 8;
pub const AV_GET_BUFFER_FLAG_REF: u32 = 1;
pub const AV_GET_ENCODE_BUFFER_FLAG_REF: u32 = 1;
pub const AV_EF_CRCCHECK: u32 = 1;
pub const AV_EF_BITSTREAM: u32 = 2;
pub const AV_EF_BUFFER: u32 = 4;
pub const AV_EF_EXPLODE: u32 = 8;
pub const AV_EF_IGNORE_ERR: u32 = 32768;
pub const AV_EF_CAREFUL: u32 = 65536;
pub const AV_EF_COMPLIANT: u32 = 131072;
pub const AV_EF_AGGRESSIVE: u32 = 262144;
pub const AV_HWACCEL_CODEC_CAP_EXPERIMENTAL: u32 = 512;
pub const AV_HWACCEL_FLAG_IGNORE_LEVEL: u32 = 1;
pub const AV_HWACCEL_FLAG_ALLOW_HIGH_DEPTH: u32 = 2;
pub const AV_HWACCEL_FLAG_ALLOW_PROFILE_MISMATCH: u32 = 4;
pub const AV_SUBTITLE_FLAG_FORCED: u32 = 1;
pub const AV_PARSER_PTS_NB: u32 = 4;
pub const AVIO_SEEKABLE_NORMAL: u32 = 1;
pub const AVIO_SEEKABLE_TIME: u32 = 2;
pub const AVSEEK_SIZE: u32 = 65536;
pub const AVSEEK_FORCE: u32 = 131072;
pub const AVIO_FLAG_READ: u32 = 1;
pub const AVIO_FLAG_WRITE: u32 = 2;
pub const AVIO_FLAG_READ_WRITE: u32 = 3;
pub const AVIO_FLAG_NONBLOCK: u32 = 8;
pub const AVIO_FLAG_DIRECT: u32 = 32768;
pub const AVPROBE_SCORE_EXTENSION: u32 = 50;
pub const AVPROBE_SCORE_MIME: u32 = 75;
pub const AVPROBE_SCORE_MAX: u32 = 100;
pub const AVPROBE_PADDING_SIZE: u32 = 32;
pub const AVFMT_NOFILE: u32 = 1;
pub const AVFMT_NEEDNUMBER: u32 = 2;
pub const AVFMT_EXPERIMENTAL: u32 = 4;
pub const AVFMT_SHOW_IDS: u32 = 8;
pub const AVFMT_GLOBALHEADER: u32 = 64;
pub const AVFMT_NOTIMESTAMPS: u32 = 128;
pub const AVFMT_GENERIC_INDEX: u32 = 256;
pub const AVFMT_TS_DISCONT: u32 = 512;
pub const AVFMT_VARIABLE_FPS: u32 = 1024;
pub const AVFMT_NODIMENSIONS: u32 = 2048;
pub const AVFMT_NOSTREAMS: u32 = 4096;
pub const AVFMT_NOBINSEARCH: u32 = 8192;
pub const AVFMT_NOGENSEARCH: u32 = 16384;
pub const AVFMT_NO_BYTE_SEEK: u32 = 32768;
pub const AVFMT_ALLOW_FLUSH: u32 = 65536;
pub const AVFMT_TS_NONSTRICT: u32 = 131072;
pub const AVFMT_TS_NEGATIVE: u32 = 262144;
pub const AVFMT_SEEK_TO_PTS: u32 = 67108864;
pub const AVINDEX_KEYFRAME: u32 = 1;
pub const AVINDEX_DISCARD_FRAME: u32 = 2;
pub const AV_DISPOSITION_DEFAULT: u32 = 1;
pub const AV_DISPOSITION_DUB: u32 = 2;
pub const AV_DISPOSITION_ORIGINAL: u32 = 4;
pub const AV_DISPOSITION_COMMENT: u32 = 8;
pub const AV_DISPOSITION_LYRICS: u32 = 16;
pub const AV_DISPOSITION_KARAOKE: u32 = 32;
pub const AV_DISPOSITION_FORCED: u32 = 64;
pub const AV_DISPOSITION_HEARING_IMPAIRED: u32 = 128;
pub const AV_DISPOSITION_VISUAL_IMPAIRED: u32 = 256;
pub const AV_DISPOSITION_CLEAN_EFFECTS: u32 = 512;
pub const AV_DISPOSITION_ATTACHED_PIC: u32 = 1024;
pub const AV_DISPOSITION_TIMED_THUMBNAILS: u32 = 2048;
pub const AV_DISPOSITION_NON_DIEGETIC: u32 = 4096;
pub const AV_DISPOSITION_CAPTIONS: u32 = 65536;
pub const AV_DISPOSITION_DESCRIPTIONS: u32 = 131072;
pub const AV_DISPOSITION_METADATA: u32 = 262144;
pub const AV_DISPOSITION_DEPENDENT: u32 = 524288;
pub const AV_DISPOSITION_STILL_IMAGE: u32 = 1048576;
pub const AV_PTS_WRAP_IGNORE: u32 = 0;
pub const AV_PTS_WRAP_ADD_OFFSET: u32 = 1;
pub const AV_PTS_WRAP_SUB_OFFSET: i32 = -1;
pub const AVSTREAM_EVENT_FLAG_METADATA_UPDATED: u32 = 1;
pub const AVSTREAM_EVENT_FLAG_NEW_PACKETS: u32 = 2;
pub const AV_PROGRAM_RUNNING: u32 = 1;
pub const AVFMTCTX_NOHEADER: u32 = 1;
pub const AVFMTCTX_UNSEEKABLE: u32 = 2;
pub const AVFMT_FLAG_GENPTS: u32 = 1;
pub const AVFMT_FLAG_IGNIDX: u32 = 2;
pub const AVFMT_FLAG_NONBLOCK: u32 = 4;
pub const AVFMT_FLAG_IGNDTS: u32 = 8;
pub const AVFMT_FLAG_NOFILLIN: u32 = 16;
pub const AVFMT_FLAG_NOPARSE: u32 = 32;
pub const AVFMT_FLAG_NOBUFFER: u32 = 64;
pub const AVFMT_FLAG_CUSTOM_IO: u32 = 128;
pub const AVFMT_FLAG_DISCARD_CORRUPT: u32 = 256;
pub const AVFMT_FLAG_FLUSH_PACKETS: u32 = 512;
pub const AVFMT_FLAG_BITEXACT: u32 = 1024;
pub const AVFMT_FLAG_SORT_DTS: u32 = 65536;
pub const AVFMT_FLAG_PRIV_OPT: u32 = 131072;
pub const AVFMT_FLAG_FAST_SEEK: u32 = 524288;
pub const AVFMT_FLAG_SHORTEST: u32 = 1048576;
pub const AVFMT_FLAG_AUTO_BSF: u32 = 2097152;
pub const AVFMT_EVENT_FLAG_METADATA_UPDATED: u32 = 1;
pub const AVFMT_AVOID_NEG_TS_AUTO: i32 = -1;
pub const AVFMT_AVOID_NEG_TS_DISABLED: u32 = 0;
pub const AVFMT_AVOID_NEG_TS_MAKE_NON_NEGATIVE: u32 = 1;
pub const AVFMT_AVOID_NEG_TS_MAKE_ZERO: u32 = 2;
pub const AVSEEK_FLAG_BACKWARD: u32 = 1;
pub const AVSEEK_FLAG_BYTE: u32 = 2;
pub const AVSEEK_FLAG_ANY: u32 = 4;
pub const AVSEEK_FLAG_FRAME: u32 = 8;
pub const AVSTREAM_INIT_IN_WRITE_HEADER: u32 = 0;
pub const AVSTREAM_INIT_IN_INIT_OUTPUT: u32 = 1;
pub const AV_FRAME_FILENAME_FLAGS_MULTIPLE: u32 = 1;
pub const AV_CUDA_USE_PRIMARY_CONTEXT: u32 = 1;
pub const AV_OPT_FLAG_ENCODING_PARAM: u32 = 1;
pub const AV_OPT_FLAG_DECODING_PARAM: u32 = 2;
pub const AV_OPT_FLAG_AUDIO_PARAM: u32 = 8;
pub const AV_OPT_FLAG_VIDEO_PARAM: u32 = 16;
pub const AV_OPT_FLAG_SUBTITLE_PARAM: u32 = 32;
pub const AV_OPT_FLAG_EXPORT: u32 = 64;
pub const AV_OPT_FLAG_READONLY: u32 = 128;
pub const AV_OPT_FLAG_BSF_PARAM: u32 = 256;
pub const AV_OPT_FLAG_RUNTIME_PARAM: u32 = 32768;
pub const AV_OPT_FLAG_FILTERING_PARAM: u32 = 65536;
pub const AV_OPT_FLAG_DEPRECATED: u32 = 131072;
pub const AV_OPT_FLAG_CHILD_CONSTS: u32 = 262144;
pub const AV_OPT_SEARCH_CHILDREN: u32 = 1;
pub const AV_OPT_SEARCH_FAKE_OBJ: u32 = 2;
pub const AV_OPT_ALLOW_NULL: u32 = 4;
pub const AV_OPT_MULTI_COMPONENT_RANGE: u32 = 4096;
pub const AV_OPT_SERIALIZE_SKIP_DEFAULTS: u32 = 1;
pub const AV_OPT_SERIALIZE_OPT_FLAGS_EXACT: u32 = 2;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub const AVSampleFormat_AV_SAMPLE_FMT_NONE: AVSampleFormat = -1;
pub const AVSampleFormat_AV_SAMPLE_FMT_U8: AVSampleFormat = 0;
pub const AVSampleFormat_AV_SAMPLE_FMT_S16: AVSampleFormat = 1;
pub const AVSampleFormat_AV_SAMPLE_FMT_S32: AVSampleFormat = 2;
pub const AVSampleFormat_AV_SAMPLE_FMT_FLT: AVSampleFormat = 3;
pub const AVSampleFormat_AV_SAMPLE_FMT_DBL: AVSampleFormat = 4;
pub const AVSampleFormat_AV_SAMPLE_FMT_U8P: AVSampleFormat = 5;
pub const AVSampleFormat_AV_SAMPLE_FMT_S16P: AVSampleFormat = 6;
pub const AVSampleFormat_AV_SAMPLE_FMT_S32P: AVSampleFormat = 7;
pub const AVSampleFormat_AV_SAMPLE_FMT_FLTP: AVSampleFormat = 8;
pub const AVSampleFormat_AV_SAMPLE_FMT_DBLP: AVSampleFormat = 9;
pub const AVSampleFormat_AV_SAMPLE_FMT_S64: AVSampleFormat = 10;
pub const AVSampleFormat_AV_SAMPLE_FMT_S64P: AVSampleFormat = 11;
pub const AVSampleFormat_AV_SAMPLE_FMT_NB: AVSampleFormat = 12;
pub type AVSampleFormat = ::std::os::raw::c_int;
extern "C" {
	pub fn av_get_sample_fmt_name(sample_fmt: AVSampleFormat) -> *const ::std::os::raw::c_char;
}
extern "C" {
	pub fn av_get_sample_fmt(name: *const ::std::os::raw::c_char) -> AVSampleFormat;
}
extern "C" {
	pub fn av_get_alt_sample_fmt(sample_fmt: AVSampleFormat, planar: ::std::os::raw::c_int) -> AVSampleFormat;
}
extern "C" {
	pub fn av_get_packed_sample_fmt(sample_fmt: AVSampleFormat) -> AVSampleFormat;
}
extern "C" {
	pub fn av_get_planar_sample_fmt(sample_fmt: AVSampleFormat) -> AVSampleFormat;
}
extern "C" {
	pub fn av_get_sample_fmt_string(
		buf: *mut ::std::os::raw::c_char,
		buf_size: ::std::os::raw::c_int,
		sample_fmt: AVSampleFormat,
	) -> *mut ::std::os::raw::c_char;
}
extern "C" {
	pub fn av_get_bytes_per_sample(sample_fmt: AVSampleFormat) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_sample_fmt_is_planar(sample_fmt: AVSampleFormat) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_samples_get_buffer_size(
		linesize: *mut ::std::os::raw::c_int,
		nb_channels: ::std::os::raw::c_int,
		nb_samples: ::std::os::raw::c_int,
		sample_fmt: AVSampleFormat,
		align: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_samples_fill_arrays(
		audio_data: *mut *mut u8,
		linesize: *mut ::std::os::raw::c_int,
		buf: *const u8,
		nb_channels: ::std::os::raw::c_int,
		nb_samples: ::std::os::raw::c_int,
		sample_fmt: AVSampleFormat,
		align: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_samples_alloc(
		audio_data: *mut *mut u8,
		linesize: *mut ::std::os::raw::c_int,
		nb_channels: ::std::os::raw::c_int,
		nb_samples: ::std::os::raw::c_int,
		sample_fmt: AVSampleFormat,
		align: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_samples_alloc_array_and_samples(
		audio_data: *mut *mut *mut u8,
		linesize: *mut ::std::os::raw::c_int,
		nb_channels: ::std::os::raw::c_int,
		nb_samples: ::std::os::raw::c_int,
		sample_fmt: AVSampleFormat,
		align: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_samples_copy(
		dst: *mut *mut u8,
		src: *const *mut u8,
		dst_offset: ::std::os::raw::c_int,
		src_offset: ::std::os::raw::c_int,
		nb_samples: ::std::os::raw::c_int,
		nb_channels: ::std::os::raw::c_int,
		sample_fmt: AVSampleFormat,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_samples_set_silence(
		audio_data: *mut *mut u8,
		offset: ::std::os::raw::c_int,
		nb_samples: ::std::os::raw::c_int,
		nb_channels: ::std::os::raw::c_int,
		sample_fmt: AVSampleFormat,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avutil_version() -> ::std::os::raw::c_uint;
}
extern "C" {
	pub fn av_version_info() -> *const ::std::os::raw::c_char;
}
extern "C" {
	pub fn avutil_configuration() -> *const ::std::os::raw::c_char;
}
extern "C" {
	pub fn avutil_license() -> *const ::std::os::raw::c_char;
}
pub const AVMediaType_AVMEDIA_TYPE_UNKNOWN: AVMediaType = -1;
pub const AVMediaType_AVMEDIA_TYPE_VIDEO: AVMediaType = 0;
pub const AVMediaType_AVMEDIA_TYPE_AUDIO: AVMediaType = 1;
pub const AVMediaType_AVMEDIA_TYPE_DATA: AVMediaType = 2;
pub const AVMediaType_AVMEDIA_TYPE_SUBTITLE: AVMediaType = 3;
pub const AVMediaType_AVMEDIA_TYPE_ATTACHMENT: AVMediaType = 4;
pub const AVMediaType_AVMEDIA_TYPE_NB: AVMediaType = 5;
pub type AVMediaType = ::std::os::raw::c_int;
extern "C" {
	pub fn av_get_media_type_string(media_type: AVMediaType) -> *const ::std::os::raw::c_char;
}
pub const AVPictureType_AV_PICTURE_TYPE_NONE: AVPictureType = 0;
pub const AVPictureType_AV_PICTURE_TYPE_I: AVPictureType = 1;
pub const AVPictureType_AV_PICTURE_TYPE_P: AVPictureType = 2;
pub const AVPictureType_AV_PICTURE_TYPE_B: AVPictureType = 3;
pub const AVPictureType_AV_PICTURE_TYPE_S: AVPictureType = 4;
pub const AVPictureType_AV_PICTURE_TYPE_SI: AVPictureType = 5;
pub const AVPictureType_AV_PICTURE_TYPE_SP: AVPictureType = 6;
pub const AVPictureType_AV_PICTURE_TYPE_BI: AVPictureType = 7;
pub type AVPictureType = ::std::os::raw::c_uint;
extern "C" {
	pub fn av_get_picture_type_char(pict_type: AVPictureType) -> ::std::os::raw::c_char;
}
pub type size_t = ::std::os::raw::c_ulong;
pub type va_list = __builtin_va_list;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
	_unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
	_unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
	_unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
	pub _flags: ::std::os::raw::c_int,
	pub _IO_read_ptr: *mut ::std::os::raw::c_char,
	pub _IO_read_end: *mut ::std::os::raw::c_char,
	pub _IO_read_base: *mut ::std::os::raw::c_char,
	pub _IO_write_base: *mut ::std::os::raw::c_char,
	pub _IO_write_ptr: *mut ::std::os::raw::c_char,
	pub _IO_write_end: *mut ::std::os::raw::c_char,
	pub _IO_buf_base: *mut ::std::os::raw::c_char,
	pub _IO_buf_end: *mut ::std::os::raw::c_char,
	pub _IO_save_base: *mut ::std::os::raw::c_char,
	pub _IO_backup_base: *mut ::std::os::raw::c_char,
	pub _IO_save_end: *mut ::std::os::raw::c_char,
	pub _markers: *mut _IO_marker,
	pub _chain: *mut _IO_FILE,
	pub _fileno: ::std::os::raw::c_int,
	pub _flags2: ::std::os::raw::c_int,
	pub _old_offset: __off_t,
	pub _cur_column: ::std::os::raw::c_ushort,
	pub _vtable_offset: ::std::os::raw::c_schar,
	pub _shortbuf: [::std::os::raw::c_char; 1usize],
	pub _lock: *mut _IO_lock_t,
	pub _offset: __off64_t,
	pub _codecvt: *mut _IO_codecvt,
	pub _wide_data: *mut _IO_wide_data,
	pub _freeres_list: *mut _IO_FILE,
	pub _freeres_buf: *mut ::std::os::raw::c_void,
	pub __pad5: size_t,
	pub _mode: ::std::os::raw::c_int,
	pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
	assert_eq!(
		::std::mem::size_of::<_IO_FILE>(),
		216usize,
		concat!("Size of: ", stringify!(_IO_FILE))
	);
	assert_eq!(
		::std::mem::align_of::<_IO_FILE>(),
		8usize,
		concat!("Alignment of ", stringify!(_IO_FILE))
	);
	fn test_field__flags() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize
			},
			0usize,
			concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_flags))
		);
	}
	test_field__flags();
	fn test_field__IO_read_ptr() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr)._IO_read_ptr) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(_IO_FILE),
				"::",
				stringify!(_IO_read_ptr)
			)
		);
	}
	test_field__IO_read_ptr();
	fn test_field__IO_read_end() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr)._IO_read_end) as usize - ptr as usize
			},
			16usize,
			concat!(
				"Offset of field: ",
				stringify!(_IO_FILE),
				"::",
				stringify!(_IO_read_end)
			)
		);
	}
	test_field__IO_read_end();
	fn test_field__IO_read_base() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr)._IO_read_base) as usize - ptr as usize
			},
			24usize,
			concat!(
				"Offset of field: ",
				stringify!(_IO_FILE),
				"::",
				stringify!(_IO_read_base)
			)
		);
	}
	test_field__IO_read_base();
	fn test_field__IO_write_base() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr)._IO_write_base) as usize - ptr as usize
			},
			32usize,
			concat!(
				"Offset of field: ",
				stringify!(_IO_FILE),
				"::",
				stringify!(_IO_write_base)
			)
		);
	}
	test_field__IO_write_base();
	fn test_field__IO_write_ptr() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr)._IO_write_ptr) as usize - ptr as usize
			},
			40usize,
			concat!(
				"Offset of field: ",
				stringify!(_IO_FILE),
				"::",
				stringify!(_IO_write_ptr)
			)
		);
	}
	test_field__IO_write_ptr();
	fn test_field__IO_write_end() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr)._IO_write_end) as usize - ptr as usize
			},
			48usize,
			concat!(
				"Offset of field: ",
				stringify!(_IO_FILE),
				"::",
				stringify!(_IO_write_end)
			)
		);
	}
	test_field__IO_write_end();
	fn test_field__IO_buf_base() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr)._IO_buf_base) as usize - ptr as usize
			},
			56usize,
			concat!(
				"Offset of field: ",
				stringify!(_IO_FILE),
				"::",
				stringify!(_IO_buf_base)
			)
		);
	}
	test_field__IO_buf_base();
	fn test_field__IO_buf_end() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr)._IO_buf_end) as usize - ptr as usize
			},
			64usize,
			concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_IO_buf_end))
		);
	}
	test_field__IO_buf_end();
	fn test_field__IO_save_base() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr)._IO_save_base) as usize - ptr as usize
			},
			72usize,
			concat!(
				"Offset of field: ",
				stringify!(_IO_FILE),
				"::",
				stringify!(_IO_save_base)
			)
		);
	}
	test_field__IO_save_base();
	fn test_field__IO_backup_base() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr)._IO_backup_base) as usize - ptr as usize
			},
			80usize,
			concat!(
				"Offset of field: ",
				stringify!(_IO_FILE),
				"::",
				stringify!(_IO_backup_base)
			)
		);
	}
	test_field__IO_backup_base();
	fn test_field__IO_save_end() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr)._IO_save_end) as usize - ptr as usize
			},
			88usize,
			concat!(
				"Offset of field: ",
				stringify!(_IO_FILE),
				"::",
				stringify!(_IO_save_end)
			)
		);
	}
	test_field__IO_save_end();
	fn test_field__markers() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr)._markers) as usize - ptr as usize
			},
			96usize,
			concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_markers))
		);
	}
	test_field__markers();
	fn test_field__chain() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr)._chain) as usize - ptr as usize
			},
			104usize,
			concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_chain))
		);
	}
	test_field__chain();
	fn test_field__fileno() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr)._fileno) as usize - ptr as usize
			},
			112usize,
			concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_fileno))
		);
	}
	test_field__fileno();
	fn test_field__flags2() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr)._flags2) as usize - ptr as usize
			},
			116usize,
			concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_flags2))
		);
	}
	test_field__flags2();
	fn test_field__old_offset() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr)._old_offset) as usize - ptr as usize
			},
			120usize,
			concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_old_offset))
		);
	}
	test_field__old_offset();
	fn test_field__cur_column() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr)._cur_column) as usize - ptr as usize
			},
			128usize,
			concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_cur_column))
		);
	}
	test_field__cur_column();
	fn test_field__vtable_offset() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr)._vtable_offset) as usize - ptr as usize
			},
			130usize,
			concat!(
				"Offset of field: ",
				stringify!(_IO_FILE),
				"::",
				stringify!(_vtable_offset)
			)
		);
	}
	test_field__vtable_offset();
	fn test_field__shortbuf() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr)._shortbuf) as usize - ptr as usize
			},
			131usize,
			concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_shortbuf))
		);
	}
	test_field__shortbuf();
	fn test_field__lock() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr)._lock) as usize - ptr as usize
			},
			136usize,
			concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_lock))
		);
	}
	test_field__lock();
	fn test_field__offset() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr)._offset) as usize - ptr as usize
			},
			144usize,
			concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_offset))
		);
	}
	test_field__offset();
	fn test_field__codecvt() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr)._codecvt) as usize - ptr as usize
			},
			152usize,
			concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_codecvt))
		);
	}
	test_field__codecvt();
	fn test_field__wide_data() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr)._wide_data) as usize - ptr as usize
			},
			160usize,
			concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_wide_data))
		);
	}
	test_field__wide_data();
	fn test_field__freeres_list() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr)._freeres_list) as usize - ptr as usize
			},
			168usize,
			concat!(
				"Offset of field: ",
				stringify!(_IO_FILE),
				"::",
				stringify!(_freeres_list)
			)
		);
	}
	test_field__freeres_list();
	fn test_field__freeres_buf() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr)._freeres_buf) as usize - ptr as usize
			},
			176usize,
			concat!(
				"Offset of field: ",
				stringify!(_IO_FILE),
				"::",
				stringify!(_freeres_buf)
			)
		);
	}
	test_field__freeres_buf();
	fn test_field___pad5() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).__pad5) as usize - ptr as usize
			},
			184usize,
			concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(__pad5))
		);
	}
	test_field___pad5();
	fn test_field__mode() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr)._mode) as usize - ptr as usize
			},
			192usize,
			concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_mode))
		);
	}
	test_field__mode();
	fn test_field__unused2() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr)._unused2) as usize - ptr as usize
			},
			196usize,
			concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_unused2))
		);
	}
	test_field__unused2();
}
extern "C" {
	pub fn av_log2(v: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_log2_16bit(v: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_malloc(size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
	pub fn av_mallocz(size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
	pub fn av_malloc_array(nmemb: size_t, size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
	pub fn av_calloc(nmemb: size_t, size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
	pub fn av_mallocz_array(nmemb: size_t, size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
	pub fn av_realloc(ptr: *mut ::std::os::raw::c_void, size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
	pub fn av_reallocp(ptr: *mut ::std::os::raw::c_void, size: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_realloc_f(ptr: *mut ::std::os::raw::c_void, nelem: size_t, elsize: size_t)
		-> *mut ::std::os::raw::c_void;
}
extern "C" {
	pub fn av_realloc_array(
		ptr: *mut ::std::os::raw::c_void,
		nmemb: size_t,
		size: size_t,
	) -> *mut ::std::os::raw::c_void;
}
extern "C" {
	pub fn av_reallocp_array(ptr: *mut ::std::os::raw::c_void, nmemb: size_t, size: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_fast_realloc(
		ptr: *mut ::std::os::raw::c_void,
		size: *mut ::std::os::raw::c_uint,
		min_size: size_t,
	) -> *mut ::std::os::raw::c_void;
}
extern "C" {
	pub fn av_fast_malloc(ptr: *mut ::std::os::raw::c_void, size: *mut ::std::os::raw::c_uint, min_size: size_t);
}
extern "C" {
	pub fn av_fast_mallocz(ptr: *mut ::std::os::raw::c_void, size: *mut ::std::os::raw::c_uint, min_size: size_t);
}
extern "C" {
	pub fn av_free(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
	pub fn av_freep(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
	pub fn av_strdup(s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
	pub fn av_strndup(s: *const ::std::os::raw::c_char, len: size_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
	pub fn av_memdup(p: *const ::std::os::raw::c_void, size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
	pub fn av_memcpy_backptr(dst: *mut u8, back: ::std::os::raw::c_int, cnt: ::std::os::raw::c_int);
}
extern "C" {
	pub fn av_dynarray_add(
		tab_ptr: *mut ::std::os::raw::c_void,
		nb_ptr: *mut ::std::os::raw::c_int,
		elem: *mut ::std::os::raw::c_void,
	);
}
extern "C" {
	pub fn av_dynarray_add_nofree(
		tab_ptr: *mut ::std::os::raw::c_void,
		nb_ptr: *mut ::std::os::raw::c_int,
		elem: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_dynarray2_add(
		tab_ptr: *mut *mut ::std::os::raw::c_void,
		nb_ptr: *mut ::std::os::raw::c_int,
		elem_size: size_t,
		elem_data: *const u8,
	) -> *mut ::std::os::raw::c_void;
}
extern "C" {
	pub fn av_size_mult(a: size_t, b: size_t, r: *mut size_t) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_max_alloc(max: size_t);
}
extern "C" {
	pub fn av_strerror(
		errnum: ::std::os::raw::c_int,
		errbuf: *mut ::std::os::raw::c_char,
		errbuf_size: size_t,
	) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVRational {
	pub num: ::std::os::raw::c_int,
	pub den: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_AVRational() {
	assert_eq!(
		::std::mem::size_of::<AVRational>(),
		8usize,
		concat!("Size of: ", stringify!(AVRational))
	);
	assert_eq!(
		::std::mem::align_of::<AVRational>(),
		4usize,
		concat!("Alignment of ", stringify!(AVRational))
	);
	fn test_field_num() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVRational>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).num) as usize - ptr as usize
			},
			0usize,
			concat!("Offset of field: ", stringify!(AVRational), "::", stringify!(num))
		);
	}
	test_field_num();
	fn test_field_den() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVRational>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).den) as usize - ptr as usize
			},
			4usize,
			concat!("Offset of field: ", stringify!(AVRational), "::", stringify!(den))
		);
	}
	test_field_den();
}
extern "C" {
	pub fn av_reduce(
		dst_num: *mut ::std::os::raw::c_int,
		dst_den: *mut ::std::os::raw::c_int,
		num: i64,
		den: i64,
		max: i64,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_mul_q(b: AVRational, c: AVRational) -> AVRational;
}
extern "C" {
	pub fn av_div_q(b: AVRational, c: AVRational) -> AVRational;
}
extern "C" {
	pub fn av_add_q(b: AVRational, c: AVRational) -> AVRational;
}
extern "C" {
	pub fn av_sub_q(b: AVRational, c: AVRational) -> AVRational;
}
extern "C" {
	pub fn av_d2q(d: f64, max: ::std::os::raw::c_int) -> AVRational;
}
extern "C" {
	pub fn av_nearer_q(q: AVRational, q1: AVRational, q2: AVRational) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_find_nearest_q_idx(q: AVRational, q_list: *const AVRational) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_q2intfloat(q: AVRational) -> u32;
}
extern "C" {
	pub fn av_gcd_q(a: AVRational, b: AVRational, max_den: ::std::os::raw::c_int, def: AVRational) -> AVRational;
}
pub const AVRounding_AV_ROUND_ZERO: AVRounding = 0;
pub const AVRounding_AV_ROUND_INF: AVRounding = 1;
pub const AVRounding_AV_ROUND_DOWN: AVRounding = 2;
pub const AVRounding_AV_ROUND_UP: AVRounding = 3;
pub const AVRounding_AV_ROUND_NEAR_INF: AVRounding = 5;
pub const AVRounding_AV_ROUND_PASS_MINMAX: AVRounding = 8192;
pub type AVRounding = ::std::os::raw::c_uint;
extern "C" {
	pub fn av_gcd(a: i64, b: i64) -> i64;
}
extern "C" {
	pub fn av_rescale(a: i64, b: i64, c: i64) -> i64;
}
extern "C" {
	pub fn av_rescale_rnd(a: i64, b: i64, c: i64, rnd: AVRounding) -> i64;
}
extern "C" {
	pub fn av_rescale_q(a: i64, bq: AVRational, cq: AVRational) -> i64;
}
extern "C" {
	pub fn av_rescale_q_rnd(a: i64, bq: AVRational, cq: AVRational, rnd: AVRounding) -> i64;
}
extern "C" {
	pub fn av_compare_ts(ts_a: i64, tb_a: AVRational, ts_b: i64, tb_b: AVRational) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_compare_mod(a: u64, b: u64, mod_: u64) -> i64;
}
extern "C" {
	pub fn av_rescale_delta(
		in_tb: AVRational,
		in_ts: i64,
		fs_tb: AVRational,
		duration: ::std::os::raw::c_int,
		last: *mut i64,
		out_tb: AVRational,
	) -> i64;
}
extern "C" {
	pub fn av_add_stable(ts_tb: AVRational, ts: i64, inc_tb: AVRational, inc: i64) -> i64;
}
pub const AVClassCategory_AV_CLASS_CATEGORY_NA: AVClassCategory = 0;
pub const AVClassCategory_AV_CLASS_CATEGORY_INPUT: AVClassCategory = 1;
pub const AVClassCategory_AV_CLASS_CATEGORY_OUTPUT: AVClassCategory = 2;
pub const AVClassCategory_AV_CLASS_CATEGORY_MUXER: AVClassCategory = 3;
pub const AVClassCategory_AV_CLASS_CATEGORY_DEMUXER: AVClassCategory = 4;
pub const AVClassCategory_AV_CLASS_CATEGORY_ENCODER: AVClassCategory = 5;
pub const AVClassCategory_AV_CLASS_CATEGORY_DECODER: AVClassCategory = 6;
pub const AVClassCategory_AV_CLASS_CATEGORY_FILTER: AVClassCategory = 7;
pub const AVClassCategory_AV_CLASS_CATEGORY_BITSTREAM_FILTER: AVClassCategory = 8;
pub const AVClassCategory_AV_CLASS_CATEGORY_SWSCALER: AVClassCategory = 9;
pub const AVClassCategory_AV_CLASS_CATEGORY_SWRESAMPLER: AVClassCategory = 10;
pub const AVClassCategory_AV_CLASS_CATEGORY_DEVICE_VIDEO_OUTPUT: AVClassCategory = 40;
pub const AVClassCategory_AV_CLASS_CATEGORY_DEVICE_VIDEO_INPUT: AVClassCategory = 41;
pub const AVClassCategory_AV_CLASS_CATEGORY_DEVICE_AUDIO_OUTPUT: AVClassCategory = 42;
pub const AVClassCategory_AV_CLASS_CATEGORY_DEVICE_AUDIO_INPUT: AVClassCategory = 43;
pub const AVClassCategory_AV_CLASS_CATEGORY_DEVICE_OUTPUT: AVClassCategory = 44;
pub const AVClassCategory_AV_CLASS_CATEGORY_DEVICE_INPUT: AVClassCategory = 45;
pub const AVClassCategory_AV_CLASS_CATEGORY_NB: AVClassCategory = 46;
pub type AVClassCategory = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVClass {
	pub class_name: *const ::std::os::raw::c_char,
	pub item_name:
		::std::option::Option<unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void) -> *const ::std::os::raw::c_char>,
	pub option: *const AVOption,
	pub version: ::std::os::raw::c_int,
	pub log_level_offset_offset: ::std::os::raw::c_int,
	pub parent_log_context_offset: ::std::os::raw::c_int,
	pub category: AVClassCategory,
	pub get_category: ::std::option::Option<unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void) -> AVClassCategory>,
	pub query_ranges: ::std::option::Option<
		unsafe extern "C" fn(
			arg1: *mut *mut AVOptionRanges,
			obj: *mut ::std::os::raw::c_void,
			key: *const ::std::os::raw::c_char,
			flags: ::std::os::raw::c_int,
		) -> ::std::os::raw::c_int,
	>,
	pub child_next: ::std::option::Option<
		unsafe extern "C" fn(
			obj: *mut ::std::os::raw::c_void,
			prev: *mut ::std::os::raw::c_void,
		) -> *mut ::std::os::raw::c_void,
	>,
	pub child_class_iterate:
		::std::option::Option<unsafe extern "C" fn(iter: *mut *mut ::std::os::raw::c_void) -> *const AVClass>,
}
#[test]
fn bindgen_test_layout_AVClass() {
	assert_eq!(
		::std::mem::size_of::<AVClass>(),
		72usize,
		concat!("Size of: ", stringify!(AVClass))
	);
	assert_eq!(
		::std::mem::align_of::<AVClass>(),
		8usize,
		concat!("Alignment of ", stringify!(AVClass))
	);
	fn test_field_class_name() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVClass>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).class_name) as usize - ptr as usize
			},
			0usize,
			concat!("Offset of field: ", stringify!(AVClass), "::", stringify!(class_name))
		);
	}
	test_field_class_name();
	fn test_field_item_name() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVClass>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).item_name) as usize - ptr as usize
			},
			8usize,
			concat!("Offset of field: ", stringify!(AVClass), "::", stringify!(item_name))
		);
	}
	test_field_item_name();
	fn test_field_option() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVClass>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).option) as usize - ptr as usize
			},
			16usize,
			concat!("Offset of field: ", stringify!(AVClass), "::", stringify!(option))
		);
	}
	test_field_option();
	fn test_field_version() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVClass>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize
			},
			24usize,
			concat!("Offset of field: ", stringify!(AVClass), "::", stringify!(version))
		);
	}
	test_field_version();
	fn test_field_log_level_offset_offset() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVClass>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).log_level_offset_offset) as usize - ptr as usize
			},
			28usize,
			concat!(
				"Offset of field: ",
				stringify!(AVClass),
				"::",
				stringify!(log_level_offset_offset)
			)
		);
	}
	test_field_log_level_offset_offset();
	fn test_field_parent_log_context_offset() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVClass>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).parent_log_context_offset) as usize - ptr as usize
			},
			32usize,
			concat!(
				"Offset of field: ",
				stringify!(AVClass),
				"::",
				stringify!(parent_log_context_offset)
			)
		);
	}
	test_field_parent_log_context_offset();
	fn test_field_category() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVClass>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).category) as usize - ptr as usize
			},
			36usize,
			concat!("Offset of field: ", stringify!(AVClass), "::", stringify!(category))
		);
	}
	test_field_category();
	fn test_field_get_category() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVClass>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).get_category) as usize - ptr as usize
			},
			40usize,
			concat!("Offset of field: ", stringify!(AVClass), "::", stringify!(get_category))
		);
	}
	test_field_get_category();
	fn test_field_query_ranges() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVClass>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).query_ranges) as usize - ptr as usize
			},
			48usize,
			concat!("Offset of field: ", stringify!(AVClass), "::", stringify!(query_ranges))
		);
	}
	test_field_query_ranges();
	fn test_field_child_next() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVClass>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).child_next) as usize - ptr as usize
			},
			56usize,
			concat!("Offset of field: ", stringify!(AVClass), "::", stringify!(child_next))
		);
	}
	test_field_child_next();
	fn test_field_child_class_iterate() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVClass>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).child_class_iterate) as usize - ptr as usize
			},
			64usize,
			concat!(
				"Offset of field: ",
				stringify!(AVClass),
				"::",
				stringify!(child_class_iterate)
			)
		);
	}
	test_field_child_class_iterate();
}
extern "C" {
	pub fn av_log(
		avcl: *mut ::std::os::raw::c_void,
		level: ::std::os::raw::c_int,
		fmt: *const ::std::os::raw::c_char,
		...
	);
}
extern "C" {
	pub fn av_log_once(
		avcl: *mut ::std::os::raw::c_void,
		initial_level: ::std::os::raw::c_int,
		subsequent_level: ::std::os::raw::c_int,
		state: *mut ::std::os::raw::c_int,
		fmt: *const ::std::os::raw::c_char,
		...
	);
}
extern "C" {
	pub fn av_vlog(
		avcl: *mut ::std::os::raw::c_void,
		level: ::std::os::raw::c_int,
		fmt: *const ::std::os::raw::c_char,
		vl: *mut __va_list_tag,
	);
}
extern "C" {
	pub fn av_log_get_level() -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_log_set_level(level: ::std::os::raw::c_int);
}
extern "C" {
	pub fn av_log_set_callback(
		callback: ::std::option::Option<
			unsafe extern "C" fn(
				arg1: *mut ::std::os::raw::c_void,
				arg2: ::std::os::raw::c_int,
				arg3: *const ::std::os::raw::c_char,
				arg4: *mut __va_list_tag,
			),
		>,
	);
}
extern "C" {
	pub fn av_log_default_callback(
		avcl: *mut ::std::os::raw::c_void,
		level: ::std::os::raw::c_int,
		fmt: *const ::std::os::raw::c_char,
		vl: *mut __va_list_tag,
	);
}
extern "C" {
	pub fn av_default_item_name(ctx: *mut ::std::os::raw::c_void) -> *const ::std::os::raw::c_char;
}
extern "C" {
	pub fn av_default_get_category(ptr: *mut ::std::os::raw::c_void) -> AVClassCategory;
}
extern "C" {
	pub fn av_log_format_line(
		ptr: *mut ::std::os::raw::c_void,
		level: ::std::os::raw::c_int,
		fmt: *const ::std::os::raw::c_char,
		vl: *mut __va_list_tag,
		line: *mut ::std::os::raw::c_char,
		line_size: ::std::os::raw::c_int,
		print_prefix: *mut ::std::os::raw::c_int,
	);
}
extern "C" {
	pub fn av_log_format_line2(
		ptr: *mut ::std::os::raw::c_void,
		level: ::std::os::raw::c_int,
		fmt: *const ::std::os::raw::c_char,
		vl: *mut __va_list_tag,
		line: *mut ::std::os::raw::c_char,
		line_size: ::std::os::raw::c_int,
		print_prefix: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_log_set_flags(arg: ::std::os::raw::c_int);
}
extern "C" {
	pub fn av_log_get_flags() -> ::std::os::raw::c_int;
}
pub const AVPixelFormat_AV_PIX_FMT_NONE: AVPixelFormat = -1;
pub const AVPixelFormat_AV_PIX_FMT_YUV420P: AVPixelFormat = 0;
pub const AVPixelFormat_AV_PIX_FMT_YUYV422: AVPixelFormat = 1;
pub const AVPixelFormat_AV_PIX_FMT_RGB24: AVPixelFormat = 2;
pub const AVPixelFormat_AV_PIX_FMT_BGR24: AVPixelFormat = 3;
pub const AVPixelFormat_AV_PIX_FMT_YUV422P: AVPixelFormat = 4;
pub const AVPixelFormat_AV_PIX_FMT_YUV444P: AVPixelFormat = 5;
pub const AVPixelFormat_AV_PIX_FMT_YUV410P: AVPixelFormat = 6;
pub const AVPixelFormat_AV_PIX_FMT_YUV411P: AVPixelFormat = 7;
pub const AVPixelFormat_AV_PIX_FMT_GRAY8: AVPixelFormat = 8;
pub const AVPixelFormat_AV_PIX_FMT_MONOWHITE: AVPixelFormat = 9;
pub const AVPixelFormat_AV_PIX_FMT_MONOBLACK: AVPixelFormat = 10;
pub const AVPixelFormat_AV_PIX_FMT_PAL8: AVPixelFormat = 11;
pub const AVPixelFormat_AV_PIX_FMT_YUVJ420P: AVPixelFormat = 12;
pub const AVPixelFormat_AV_PIX_FMT_YUVJ422P: AVPixelFormat = 13;
pub const AVPixelFormat_AV_PIX_FMT_YUVJ444P: AVPixelFormat = 14;
pub const AVPixelFormat_AV_PIX_FMT_UYVY422: AVPixelFormat = 15;
pub const AVPixelFormat_AV_PIX_FMT_UYYVYY411: AVPixelFormat = 16;
pub const AVPixelFormat_AV_PIX_FMT_BGR8: AVPixelFormat = 17;
pub const AVPixelFormat_AV_PIX_FMT_BGR4: AVPixelFormat = 18;
pub const AVPixelFormat_AV_PIX_FMT_BGR4_BYTE: AVPixelFormat = 19;
pub const AVPixelFormat_AV_PIX_FMT_RGB8: AVPixelFormat = 20;
pub const AVPixelFormat_AV_PIX_FMT_RGB4: AVPixelFormat = 21;
pub const AVPixelFormat_AV_PIX_FMT_RGB4_BYTE: AVPixelFormat = 22;
pub const AVPixelFormat_AV_PIX_FMT_NV12: AVPixelFormat = 23;
pub const AVPixelFormat_AV_PIX_FMT_NV21: AVPixelFormat = 24;
pub const AVPixelFormat_AV_PIX_FMT_ARGB: AVPixelFormat = 25;
pub const AVPixelFormat_AV_PIX_FMT_RGBA: AVPixelFormat = 26;
pub const AVPixelFormat_AV_PIX_FMT_ABGR: AVPixelFormat = 27;
pub const AVPixelFormat_AV_PIX_FMT_BGRA: AVPixelFormat = 28;
pub const AVPixelFormat_AV_PIX_FMT_GRAY16BE: AVPixelFormat = 29;
pub const AVPixelFormat_AV_PIX_FMT_GRAY16LE: AVPixelFormat = 30;
pub const AVPixelFormat_AV_PIX_FMT_YUV440P: AVPixelFormat = 31;
pub const AVPixelFormat_AV_PIX_FMT_YUVJ440P: AVPixelFormat = 32;
pub const AVPixelFormat_AV_PIX_FMT_YUVA420P: AVPixelFormat = 33;
pub const AVPixelFormat_AV_PIX_FMT_RGB48BE: AVPixelFormat = 34;
pub const AVPixelFormat_AV_PIX_FMT_RGB48LE: AVPixelFormat = 35;
pub const AVPixelFormat_AV_PIX_FMT_RGB565BE: AVPixelFormat = 36;
pub const AVPixelFormat_AV_PIX_FMT_RGB565LE: AVPixelFormat = 37;
pub const AVPixelFormat_AV_PIX_FMT_RGB555BE: AVPixelFormat = 38;
pub const AVPixelFormat_AV_PIX_FMT_RGB555LE: AVPixelFormat = 39;
pub const AVPixelFormat_AV_PIX_FMT_BGR565BE: AVPixelFormat = 40;
pub const AVPixelFormat_AV_PIX_FMT_BGR565LE: AVPixelFormat = 41;
pub const AVPixelFormat_AV_PIX_FMT_BGR555BE: AVPixelFormat = 42;
pub const AVPixelFormat_AV_PIX_FMT_BGR555LE: AVPixelFormat = 43;
pub const AVPixelFormat_AV_PIX_FMT_VAAPI: AVPixelFormat = 44;
pub const AVPixelFormat_AV_PIX_FMT_YUV420P16LE: AVPixelFormat = 45;
pub const AVPixelFormat_AV_PIX_FMT_YUV420P16BE: AVPixelFormat = 46;
pub const AVPixelFormat_AV_PIX_FMT_YUV422P16LE: AVPixelFormat = 47;
pub const AVPixelFormat_AV_PIX_FMT_YUV422P16BE: AVPixelFormat = 48;
pub const AVPixelFormat_AV_PIX_FMT_YUV444P16LE: AVPixelFormat = 49;
pub const AVPixelFormat_AV_PIX_FMT_YUV444P16BE: AVPixelFormat = 50;
pub const AVPixelFormat_AV_PIX_FMT_DXVA2_VLD: AVPixelFormat = 51;
pub const AVPixelFormat_AV_PIX_FMT_RGB444LE: AVPixelFormat = 52;
pub const AVPixelFormat_AV_PIX_FMT_RGB444BE: AVPixelFormat = 53;
pub const AVPixelFormat_AV_PIX_FMT_BGR444LE: AVPixelFormat = 54;
pub const AVPixelFormat_AV_PIX_FMT_BGR444BE: AVPixelFormat = 55;
pub const AVPixelFormat_AV_PIX_FMT_YA8: AVPixelFormat = 56;
pub const AVPixelFormat_AV_PIX_FMT_Y400A: AVPixelFormat = 56;
pub const AVPixelFormat_AV_PIX_FMT_GRAY8A: AVPixelFormat = 56;
pub const AVPixelFormat_AV_PIX_FMT_BGR48BE: AVPixelFormat = 57;
pub const AVPixelFormat_AV_PIX_FMT_BGR48LE: AVPixelFormat = 58;
pub const AVPixelFormat_AV_PIX_FMT_YUV420P9BE: AVPixelFormat = 59;
pub const AVPixelFormat_AV_PIX_FMT_YUV420P9LE: AVPixelFormat = 60;
pub const AVPixelFormat_AV_PIX_FMT_YUV420P10BE: AVPixelFormat = 61;
pub const AVPixelFormat_AV_PIX_FMT_YUV420P10LE: AVPixelFormat = 62;
pub const AVPixelFormat_AV_PIX_FMT_YUV422P10BE: AVPixelFormat = 63;
pub const AVPixelFormat_AV_PIX_FMT_YUV422P10LE: AVPixelFormat = 64;
pub const AVPixelFormat_AV_PIX_FMT_YUV444P9BE: AVPixelFormat = 65;
pub const AVPixelFormat_AV_PIX_FMT_YUV444P9LE: AVPixelFormat = 66;
pub const AVPixelFormat_AV_PIX_FMT_YUV444P10BE: AVPixelFormat = 67;
pub const AVPixelFormat_AV_PIX_FMT_YUV444P10LE: AVPixelFormat = 68;
pub const AVPixelFormat_AV_PIX_FMT_YUV422P9BE: AVPixelFormat = 69;
pub const AVPixelFormat_AV_PIX_FMT_YUV422P9LE: AVPixelFormat = 70;
pub const AVPixelFormat_AV_PIX_FMT_GBRP: AVPixelFormat = 71;
pub const AVPixelFormat_AV_PIX_FMT_GBR24P: AVPixelFormat = 71;
pub const AVPixelFormat_AV_PIX_FMT_GBRP9BE: AVPixelFormat = 72;
pub const AVPixelFormat_AV_PIX_FMT_GBRP9LE: AVPixelFormat = 73;
pub const AVPixelFormat_AV_PIX_FMT_GBRP10BE: AVPixelFormat = 74;
pub const AVPixelFormat_AV_PIX_FMT_GBRP10LE: AVPixelFormat = 75;
pub const AVPixelFormat_AV_PIX_FMT_GBRP16BE: AVPixelFormat = 76;
pub const AVPixelFormat_AV_PIX_FMT_GBRP16LE: AVPixelFormat = 77;
pub const AVPixelFormat_AV_PIX_FMT_YUVA422P: AVPixelFormat = 78;
pub const AVPixelFormat_AV_PIX_FMT_YUVA444P: AVPixelFormat = 79;
pub const AVPixelFormat_AV_PIX_FMT_YUVA420P9BE: AVPixelFormat = 80;
pub const AVPixelFormat_AV_PIX_FMT_YUVA420P9LE: AVPixelFormat = 81;
pub const AVPixelFormat_AV_PIX_FMT_YUVA422P9BE: AVPixelFormat = 82;
pub const AVPixelFormat_AV_PIX_FMT_YUVA422P9LE: AVPixelFormat = 83;
pub const AVPixelFormat_AV_PIX_FMT_YUVA444P9BE: AVPixelFormat = 84;
pub const AVPixelFormat_AV_PIX_FMT_YUVA444P9LE: AVPixelFormat = 85;
pub const AVPixelFormat_AV_PIX_FMT_YUVA420P10BE: AVPixelFormat = 86;
pub const AVPixelFormat_AV_PIX_FMT_YUVA420P10LE: AVPixelFormat = 87;
pub const AVPixelFormat_AV_PIX_FMT_YUVA422P10BE: AVPixelFormat = 88;
pub const AVPixelFormat_AV_PIX_FMT_YUVA422P10LE: AVPixelFormat = 89;
pub const AVPixelFormat_AV_PIX_FMT_YUVA444P10BE: AVPixelFormat = 90;
pub const AVPixelFormat_AV_PIX_FMT_YUVA444P10LE: AVPixelFormat = 91;
pub const AVPixelFormat_AV_PIX_FMT_YUVA420P16BE: AVPixelFormat = 92;
pub const AVPixelFormat_AV_PIX_FMT_YUVA420P16LE: AVPixelFormat = 93;
pub const AVPixelFormat_AV_PIX_FMT_YUVA422P16BE: AVPixelFormat = 94;
pub const AVPixelFormat_AV_PIX_FMT_YUVA422P16LE: AVPixelFormat = 95;
pub const AVPixelFormat_AV_PIX_FMT_YUVA444P16BE: AVPixelFormat = 96;
pub const AVPixelFormat_AV_PIX_FMT_YUVA444P16LE: AVPixelFormat = 97;
pub const AVPixelFormat_AV_PIX_FMT_VDPAU: AVPixelFormat = 98;
pub const AVPixelFormat_AV_PIX_FMT_XYZ12LE: AVPixelFormat = 99;
pub const AVPixelFormat_AV_PIX_FMT_XYZ12BE: AVPixelFormat = 100;
pub const AVPixelFormat_AV_PIX_FMT_NV16: AVPixelFormat = 101;
pub const AVPixelFormat_AV_PIX_FMT_NV20LE: AVPixelFormat = 102;
pub const AVPixelFormat_AV_PIX_FMT_NV20BE: AVPixelFormat = 103;
pub const AVPixelFormat_AV_PIX_FMT_RGBA64BE: AVPixelFormat = 104;
pub const AVPixelFormat_AV_PIX_FMT_RGBA64LE: AVPixelFormat = 105;
pub const AVPixelFormat_AV_PIX_FMT_BGRA64BE: AVPixelFormat = 106;
pub const AVPixelFormat_AV_PIX_FMT_BGRA64LE: AVPixelFormat = 107;
pub const AVPixelFormat_AV_PIX_FMT_YVYU422: AVPixelFormat = 108;
pub const AVPixelFormat_AV_PIX_FMT_YA16BE: AVPixelFormat = 109;
pub const AVPixelFormat_AV_PIX_FMT_YA16LE: AVPixelFormat = 110;
pub const AVPixelFormat_AV_PIX_FMT_GBRAP: AVPixelFormat = 111;
pub const AVPixelFormat_AV_PIX_FMT_GBRAP16BE: AVPixelFormat = 112;
pub const AVPixelFormat_AV_PIX_FMT_GBRAP16LE: AVPixelFormat = 113;
pub const AVPixelFormat_AV_PIX_FMT_QSV: AVPixelFormat = 114;
pub const AVPixelFormat_AV_PIX_FMT_MMAL: AVPixelFormat = 115;
pub const AVPixelFormat_AV_PIX_FMT_D3D11VA_VLD: AVPixelFormat = 116;
pub const AVPixelFormat_AV_PIX_FMT_CUDA: AVPixelFormat = 117;
pub const AVPixelFormat_AV_PIX_FMT_0RGB: AVPixelFormat = 118;
pub const AVPixelFormat_AV_PIX_FMT_RGB0: AVPixelFormat = 119;
pub const AVPixelFormat_AV_PIX_FMT_0BGR: AVPixelFormat = 120;
pub const AVPixelFormat_AV_PIX_FMT_BGR0: AVPixelFormat = 121;
pub const AVPixelFormat_AV_PIX_FMT_YUV420P12BE: AVPixelFormat = 122;
pub const AVPixelFormat_AV_PIX_FMT_YUV420P12LE: AVPixelFormat = 123;
pub const AVPixelFormat_AV_PIX_FMT_YUV420P14BE: AVPixelFormat = 124;
pub const AVPixelFormat_AV_PIX_FMT_YUV420P14LE: AVPixelFormat = 125;
pub const AVPixelFormat_AV_PIX_FMT_YUV422P12BE: AVPixelFormat = 126;
pub const AVPixelFormat_AV_PIX_FMT_YUV422P12LE: AVPixelFormat = 127;
pub const AVPixelFormat_AV_PIX_FMT_YUV422P14BE: AVPixelFormat = 128;
pub const AVPixelFormat_AV_PIX_FMT_YUV422P14LE: AVPixelFormat = 129;
pub const AVPixelFormat_AV_PIX_FMT_YUV444P12BE: AVPixelFormat = 130;
pub const AVPixelFormat_AV_PIX_FMT_YUV444P12LE: AVPixelFormat = 131;
pub const AVPixelFormat_AV_PIX_FMT_YUV444P14BE: AVPixelFormat = 132;
pub const AVPixelFormat_AV_PIX_FMT_YUV444P14LE: AVPixelFormat = 133;
pub const AVPixelFormat_AV_PIX_FMT_GBRP12BE: AVPixelFormat = 134;
pub const AVPixelFormat_AV_PIX_FMT_GBRP12LE: AVPixelFormat = 135;
pub const AVPixelFormat_AV_PIX_FMT_GBRP14BE: AVPixelFormat = 136;
pub const AVPixelFormat_AV_PIX_FMT_GBRP14LE: AVPixelFormat = 137;
pub const AVPixelFormat_AV_PIX_FMT_YUVJ411P: AVPixelFormat = 138;
pub const AVPixelFormat_AV_PIX_FMT_BAYER_BGGR8: AVPixelFormat = 139;
pub const AVPixelFormat_AV_PIX_FMT_BAYER_RGGB8: AVPixelFormat = 140;
pub const AVPixelFormat_AV_PIX_FMT_BAYER_GBRG8: AVPixelFormat = 141;
pub const AVPixelFormat_AV_PIX_FMT_BAYER_GRBG8: AVPixelFormat = 142;
pub const AVPixelFormat_AV_PIX_FMT_BAYER_BGGR16LE: AVPixelFormat = 143;
pub const AVPixelFormat_AV_PIX_FMT_BAYER_BGGR16BE: AVPixelFormat = 144;
pub const AVPixelFormat_AV_PIX_FMT_BAYER_RGGB16LE: AVPixelFormat = 145;
pub const AVPixelFormat_AV_PIX_FMT_BAYER_RGGB16BE: AVPixelFormat = 146;
pub const AVPixelFormat_AV_PIX_FMT_BAYER_GBRG16LE: AVPixelFormat = 147;
pub const AVPixelFormat_AV_PIX_FMT_BAYER_GBRG16BE: AVPixelFormat = 148;
pub const AVPixelFormat_AV_PIX_FMT_BAYER_GRBG16LE: AVPixelFormat = 149;
pub const AVPixelFormat_AV_PIX_FMT_BAYER_GRBG16BE: AVPixelFormat = 150;
pub const AVPixelFormat_AV_PIX_FMT_XVMC: AVPixelFormat = 151;
pub const AVPixelFormat_AV_PIX_FMT_YUV440P10LE: AVPixelFormat = 152;
pub const AVPixelFormat_AV_PIX_FMT_YUV440P10BE: AVPixelFormat = 153;
pub const AVPixelFormat_AV_PIX_FMT_YUV440P12LE: AVPixelFormat = 154;
pub const AVPixelFormat_AV_PIX_FMT_YUV440P12BE: AVPixelFormat = 155;
pub const AVPixelFormat_AV_PIX_FMT_AYUV64LE: AVPixelFormat = 156;
pub const AVPixelFormat_AV_PIX_FMT_AYUV64BE: AVPixelFormat = 157;
pub const AVPixelFormat_AV_PIX_FMT_VIDEOTOOLBOX: AVPixelFormat = 158;
pub const AVPixelFormat_AV_PIX_FMT_P010LE: AVPixelFormat = 159;
pub const AVPixelFormat_AV_PIX_FMT_P010BE: AVPixelFormat = 160;
pub const AVPixelFormat_AV_PIX_FMT_GBRAP12BE: AVPixelFormat = 161;
pub const AVPixelFormat_AV_PIX_FMT_GBRAP12LE: AVPixelFormat = 162;
pub const AVPixelFormat_AV_PIX_FMT_GBRAP10BE: AVPixelFormat = 163;
pub const AVPixelFormat_AV_PIX_FMT_GBRAP10LE: AVPixelFormat = 164;
pub const AVPixelFormat_AV_PIX_FMT_MEDIACODEC: AVPixelFormat = 165;
pub const AVPixelFormat_AV_PIX_FMT_GRAY12BE: AVPixelFormat = 166;
pub const AVPixelFormat_AV_PIX_FMT_GRAY12LE: AVPixelFormat = 167;
pub const AVPixelFormat_AV_PIX_FMT_GRAY10BE: AVPixelFormat = 168;
pub const AVPixelFormat_AV_PIX_FMT_GRAY10LE: AVPixelFormat = 169;
pub const AVPixelFormat_AV_PIX_FMT_P016LE: AVPixelFormat = 170;
pub const AVPixelFormat_AV_PIX_FMT_P016BE: AVPixelFormat = 171;
pub const AVPixelFormat_AV_PIX_FMT_D3D11: AVPixelFormat = 172;
pub const AVPixelFormat_AV_PIX_FMT_GRAY9BE: AVPixelFormat = 173;
pub const AVPixelFormat_AV_PIX_FMT_GRAY9LE: AVPixelFormat = 174;
pub const AVPixelFormat_AV_PIX_FMT_GBRPF32BE: AVPixelFormat = 175;
pub const AVPixelFormat_AV_PIX_FMT_GBRPF32LE: AVPixelFormat = 176;
pub const AVPixelFormat_AV_PIX_FMT_GBRAPF32BE: AVPixelFormat = 177;
pub const AVPixelFormat_AV_PIX_FMT_GBRAPF32LE: AVPixelFormat = 178;
pub const AVPixelFormat_AV_PIX_FMT_DRM_PRIME: AVPixelFormat = 179;
pub const AVPixelFormat_AV_PIX_FMT_OPENCL: AVPixelFormat = 180;
pub const AVPixelFormat_AV_PIX_FMT_GRAY14BE: AVPixelFormat = 181;
pub const AVPixelFormat_AV_PIX_FMT_GRAY14LE: AVPixelFormat = 182;
pub const AVPixelFormat_AV_PIX_FMT_GRAYF32BE: AVPixelFormat = 183;
pub const AVPixelFormat_AV_PIX_FMT_GRAYF32LE: AVPixelFormat = 184;
pub const AVPixelFormat_AV_PIX_FMT_YUVA422P12BE: AVPixelFormat = 185;
pub const AVPixelFormat_AV_PIX_FMT_YUVA422P12LE: AVPixelFormat = 186;
pub const AVPixelFormat_AV_PIX_FMT_YUVA444P12BE: AVPixelFormat = 187;
pub const AVPixelFormat_AV_PIX_FMT_YUVA444P12LE: AVPixelFormat = 188;
pub const AVPixelFormat_AV_PIX_FMT_NV24: AVPixelFormat = 189;
pub const AVPixelFormat_AV_PIX_FMT_NV42: AVPixelFormat = 190;
pub const AVPixelFormat_AV_PIX_FMT_VULKAN: AVPixelFormat = 191;
pub const AVPixelFormat_AV_PIX_FMT_Y210BE: AVPixelFormat = 192;
pub const AVPixelFormat_AV_PIX_FMT_Y210LE: AVPixelFormat = 193;
pub const AVPixelFormat_AV_PIX_FMT_X2RGB10LE: AVPixelFormat = 194;
pub const AVPixelFormat_AV_PIX_FMT_X2RGB10BE: AVPixelFormat = 195;
pub const AVPixelFormat_AV_PIX_FMT_X2BGR10LE: AVPixelFormat = 196;
pub const AVPixelFormat_AV_PIX_FMT_X2BGR10BE: AVPixelFormat = 197;
pub const AVPixelFormat_AV_PIX_FMT_P210BE: AVPixelFormat = 198;
pub const AVPixelFormat_AV_PIX_FMT_P210LE: AVPixelFormat = 199;
pub const AVPixelFormat_AV_PIX_FMT_P410BE: AVPixelFormat = 200;
pub const AVPixelFormat_AV_PIX_FMT_P410LE: AVPixelFormat = 201;
pub const AVPixelFormat_AV_PIX_FMT_P216BE: AVPixelFormat = 202;
pub const AVPixelFormat_AV_PIX_FMT_P216LE: AVPixelFormat = 203;
pub const AVPixelFormat_AV_PIX_FMT_P416BE: AVPixelFormat = 204;
pub const AVPixelFormat_AV_PIX_FMT_P416LE: AVPixelFormat = 205;
pub const AVPixelFormat_AV_PIX_FMT_NB: AVPixelFormat = 206;
pub type AVPixelFormat = ::std::os::raw::c_int;
pub const AVColorPrimaries_AVCOL_PRI_RESERVED0: AVColorPrimaries = 0;
pub const AVColorPrimaries_AVCOL_PRI_BT709: AVColorPrimaries = 1;
pub const AVColorPrimaries_AVCOL_PRI_UNSPECIFIED: AVColorPrimaries = 2;
pub const AVColorPrimaries_AVCOL_PRI_RESERVED: AVColorPrimaries = 3;
pub const AVColorPrimaries_AVCOL_PRI_BT470M: AVColorPrimaries = 4;
pub const AVColorPrimaries_AVCOL_PRI_BT470BG: AVColorPrimaries = 5;
pub const AVColorPrimaries_AVCOL_PRI_SMPTE170M: AVColorPrimaries = 6;
pub const AVColorPrimaries_AVCOL_PRI_SMPTE240M: AVColorPrimaries = 7;
pub const AVColorPrimaries_AVCOL_PRI_FILM: AVColorPrimaries = 8;
pub const AVColorPrimaries_AVCOL_PRI_BT2020: AVColorPrimaries = 9;
pub const AVColorPrimaries_AVCOL_PRI_SMPTE428: AVColorPrimaries = 10;
pub const AVColorPrimaries_AVCOL_PRI_SMPTEST428_1: AVColorPrimaries = 10;
pub const AVColorPrimaries_AVCOL_PRI_SMPTE431: AVColorPrimaries = 11;
pub const AVColorPrimaries_AVCOL_PRI_SMPTE432: AVColorPrimaries = 12;
pub const AVColorPrimaries_AVCOL_PRI_EBU3213: AVColorPrimaries = 22;
pub const AVColorPrimaries_AVCOL_PRI_JEDEC_P22: AVColorPrimaries = 22;
pub const AVColorPrimaries_AVCOL_PRI_NB: AVColorPrimaries = 23;
pub type AVColorPrimaries = ::std::os::raw::c_uint;
pub const AVColorTransferCharacteristic_AVCOL_TRC_RESERVED0: AVColorTransferCharacteristic = 0;
pub const AVColorTransferCharacteristic_AVCOL_TRC_BT709: AVColorTransferCharacteristic = 1;
pub const AVColorTransferCharacteristic_AVCOL_TRC_UNSPECIFIED: AVColorTransferCharacteristic = 2;
pub const AVColorTransferCharacteristic_AVCOL_TRC_RESERVED: AVColorTransferCharacteristic = 3;
pub const AVColorTransferCharacteristic_AVCOL_TRC_GAMMA22: AVColorTransferCharacteristic = 4;
pub const AVColorTransferCharacteristic_AVCOL_TRC_GAMMA28: AVColorTransferCharacteristic = 5;
pub const AVColorTransferCharacteristic_AVCOL_TRC_SMPTE170M: AVColorTransferCharacteristic = 6;
pub const AVColorTransferCharacteristic_AVCOL_TRC_SMPTE240M: AVColorTransferCharacteristic = 7;
pub const AVColorTransferCharacteristic_AVCOL_TRC_LINEAR: AVColorTransferCharacteristic = 8;
pub const AVColorTransferCharacteristic_AVCOL_TRC_LOG: AVColorTransferCharacteristic = 9;
pub const AVColorTransferCharacteristic_AVCOL_TRC_LOG_SQRT: AVColorTransferCharacteristic = 10;
pub const AVColorTransferCharacteristic_AVCOL_TRC_IEC61966_2_4: AVColorTransferCharacteristic = 11;
pub const AVColorTransferCharacteristic_AVCOL_TRC_BT1361_ECG: AVColorTransferCharacteristic = 12;
pub const AVColorTransferCharacteristic_AVCOL_TRC_IEC61966_2_1: AVColorTransferCharacteristic = 13;
pub const AVColorTransferCharacteristic_AVCOL_TRC_BT2020_10: AVColorTransferCharacteristic = 14;
pub const AVColorTransferCharacteristic_AVCOL_TRC_BT2020_12: AVColorTransferCharacteristic = 15;
pub const AVColorTransferCharacteristic_AVCOL_TRC_SMPTE2084: AVColorTransferCharacteristic = 16;
pub const AVColorTransferCharacteristic_AVCOL_TRC_SMPTEST2084: AVColorTransferCharacteristic = 16;
pub const AVColorTransferCharacteristic_AVCOL_TRC_SMPTE428: AVColorTransferCharacteristic = 17;
pub const AVColorTransferCharacteristic_AVCOL_TRC_SMPTEST428_1: AVColorTransferCharacteristic = 17;
pub const AVColorTransferCharacteristic_AVCOL_TRC_ARIB_STD_B67: AVColorTransferCharacteristic = 18;
pub const AVColorTransferCharacteristic_AVCOL_TRC_NB: AVColorTransferCharacteristic = 19;
pub type AVColorTransferCharacteristic = ::std::os::raw::c_uint;
pub const AVColorSpace_AVCOL_SPC_RGB: AVColorSpace = 0;
pub const AVColorSpace_AVCOL_SPC_BT709: AVColorSpace = 1;
pub const AVColorSpace_AVCOL_SPC_UNSPECIFIED: AVColorSpace = 2;
pub const AVColorSpace_AVCOL_SPC_RESERVED: AVColorSpace = 3;
pub const AVColorSpace_AVCOL_SPC_FCC: AVColorSpace = 4;
pub const AVColorSpace_AVCOL_SPC_BT470BG: AVColorSpace = 5;
pub const AVColorSpace_AVCOL_SPC_SMPTE170M: AVColorSpace = 6;
pub const AVColorSpace_AVCOL_SPC_SMPTE240M: AVColorSpace = 7;
pub const AVColorSpace_AVCOL_SPC_YCGCO: AVColorSpace = 8;
pub const AVColorSpace_AVCOL_SPC_YCOCG: AVColorSpace = 8;
pub const AVColorSpace_AVCOL_SPC_BT2020_NCL: AVColorSpace = 9;
pub const AVColorSpace_AVCOL_SPC_BT2020_CL: AVColorSpace = 10;
pub const AVColorSpace_AVCOL_SPC_SMPTE2085: AVColorSpace = 11;
pub const AVColorSpace_AVCOL_SPC_CHROMA_DERIVED_NCL: AVColorSpace = 12;
pub const AVColorSpace_AVCOL_SPC_CHROMA_DERIVED_CL: AVColorSpace = 13;
pub const AVColorSpace_AVCOL_SPC_ICTCP: AVColorSpace = 14;
pub const AVColorSpace_AVCOL_SPC_NB: AVColorSpace = 15;
pub type AVColorSpace = ::std::os::raw::c_uint;
pub const AVColorRange_AVCOL_RANGE_UNSPECIFIED: AVColorRange = 0;
pub const AVColorRange_AVCOL_RANGE_MPEG: AVColorRange = 1;
pub const AVColorRange_AVCOL_RANGE_JPEG: AVColorRange = 2;
pub const AVColorRange_AVCOL_RANGE_NB: AVColorRange = 3;
pub type AVColorRange = ::std::os::raw::c_uint;
pub const AVChromaLocation_AVCHROMA_LOC_UNSPECIFIED: AVChromaLocation = 0;
pub const AVChromaLocation_AVCHROMA_LOC_LEFT: AVChromaLocation = 1;
pub const AVChromaLocation_AVCHROMA_LOC_CENTER: AVChromaLocation = 2;
pub const AVChromaLocation_AVCHROMA_LOC_TOPLEFT: AVChromaLocation = 3;
pub const AVChromaLocation_AVCHROMA_LOC_TOP: AVChromaLocation = 4;
pub const AVChromaLocation_AVCHROMA_LOC_BOTTOMLEFT: AVChromaLocation = 5;
pub const AVChromaLocation_AVCHROMA_LOC_BOTTOM: AVChromaLocation = 6;
pub const AVChromaLocation_AVCHROMA_LOC_NB: AVChromaLocation = 7;
pub type AVChromaLocation = ::std::os::raw::c_uint;
extern "C" {
	pub fn av_int_list_length_for_size(
		elsize: ::std::os::raw::c_uint,
		list: *const ::std::os::raw::c_void,
		term: u64,
	) -> ::std::os::raw::c_uint;
}
extern "C" {
	pub fn av_fopen_utf8(path: *const ::std::os::raw::c_char, mode: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
	pub fn av_get_time_base_q() -> AVRational;
}
extern "C" {
	pub fn av_fourcc_make_string(buf: *mut ::std::os::raw::c_char, fourcc: u32) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVBuffer {
	_unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVBufferRef {
	pub buffer: *mut AVBuffer,
	pub data: *mut u8,
	pub size: size_t,
}
#[test]
fn bindgen_test_layout_AVBufferRef() {
	assert_eq!(
		::std::mem::size_of::<AVBufferRef>(),
		24usize,
		concat!("Size of: ", stringify!(AVBufferRef))
	);
	assert_eq!(
		::std::mem::align_of::<AVBufferRef>(),
		8usize,
		concat!("Alignment of ", stringify!(AVBufferRef))
	);
	fn test_field_buffer() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVBufferRef>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize
			},
			0usize,
			concat!("Offset of field: ", stringify!(AVBufferRef), "::", stringify!(buffer))
		);
	}
	test_field_buffer();
	fn test_field_data() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVBufferRef>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
			},
			8usize,
			concat!("Offset of field: ", stringify!(AVBufferRef), "::", stringify!(data))
		);
	}
	test_field_data();
	fn test_field_size() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVBufferRef>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
			},
			16usize,
			concat!("Offset of field: ", stringify!(AVBufferRef), "::", stringify!(size))
		);
	}
	test_field_size();
}
extern "C" {
	pub fn av_buffer_alloc(size: size_t) -> *mut AVBufferRef;
}
extern "C" {
	pub fn av_buffer_allocz(size: size_t) -> *mut AVBufferRef;
}
extern "C" {
	pub fn av_buffer_create(
		data: *mut u8,
		size: size_t,
		free: ::std::option::Option<unsafe extern "C" fn(opaque: *mut ::std::os::raw::c_void, data: *mut u8)>,
		opaque: *mut ::std::os::raw::c_void,
		flags: ::std::os::raw::c_int,
	) -> *mut AVBufferRef;
}
extern "C" {
	pub fn av_buffer_default_free(opaque: *mut ::std::os::raw::c_void, data: *mut u8);
}
extern "C" {
	pub fn av_buffer_ref(buf: *const AVBufferRef) -> *mut AVBufferRef;
}
extern "C" {
	pub fn av_buffer_unref(buf: *mut *mut AVBufferRef);
}
extern "C" {
	pub fn av_buffer_is_writable(buf: *const AVBufferRef) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_buffer_get_opaque(buf: *const AVBufferRef) -> *mut ::std::os::raw::c_void;
}
extern "C" {
	pub fn av_buffer_get_ref_count(buf: *const AVBufferRef) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_buffer_make_writable(buf: *mut *mut AVBufferRef) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_buffer_realloc(buf: *mut *mut AVBufferRef, size: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_buffer_replace(dst: *mut *mut AVBufferRef, src: *const AVBufferRef) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVBufferPool {
	_unused: [u8; 0],
}
extern "C" {
	pub fn av_buffer_pool_init(
		size: size_t,
		alloc: ::std::option::Option<unsafe extern "C" fn(size: size_t) -> *mut AVBufferRef>,
	) -> *mut AVBufferPool;
}
extern "C" {
	pub fn av_buffer_pool_init2(
		size: size_t,
		opaque: *mut ::std::os::raw::c_void,
		alloc: ::std::option::Option<
			unsafe extern "C" fn(opaque: *mut ::std::os::raw::c_void, size: size_t) -> *mut AVBufferRef,
		>,
		pool_free: ::std::option::Option<unsafe extern "C" fn(opaque: *mut ::std::os::raw::c_void)>,
	) -> *mut AVBufferPool;
}
extern "C" {
	pub fn av_buffer_pool_uninit(pool: *mut *mut AVBufferPool);
}
extern "C" {
	pub fn av_buffer_pool_get(pool: *mut AVBufferPool) -> *mut AVBufferRef;
}
extern "C" {
	pub fn av_buffer_pool_buffer_get_opaque(ref_: *const AVBufferRef) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVDictionaryEntry {
	pub key: *mut ::std::os::raw::c_char,
	pub value: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_AVDictionaryEntry() {
	assert_eq!(
		::std::mem::size_of::<AVDictionaryEntry>(),
		16usize,
		concat!("Size of: ", stringify!(AVDictionaryEntry))
	);
	assert_eq!(
		::std::mem::align_of::<AVDictionaryEntry>(),
		8usize,
		concat!("Alignment of ", stringify!(AVDictionaryEntry))
	);
	fn test_field_key() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVDictionaryEntry>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(AVDictionaryEntry),
				"::",
				stringify!(key)
			)
		);
	}
	test_field_key();
	fn test_field_value() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVDictionaryEntry>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(AVDictionaryEntry),
				"::",
				stringify!(value)
			)
		);
	}
	test_field_value();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVDictionary {
	_unused: [u8; 0],
}
extern "C" {
	pub fn av_dict_get(
		m: *const AVDictionary,
		key: *const ::std::os::raw::c_char,
		prev: *const AVDictionaryEntry,
		flags: ::std::os::raw::c_int,
	) -> *mut AVDictionaryEntry;
}
extern "C" {
	pub fn av_dict_count(m: *const AVDictionary) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_dict_set(
		pm: *mut *mut AVDictionary,
		key: *const ::std::os::raw::c_char,
		value: *const ::std::os::raw::c_char,
		flags: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_dict_set_int(
		pm: *mut *mut AVDictionary,
		key: *const ::std::os::raw::c_char,
		value: i64,
		flags: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_dict_parse_string(
		pm: *mut *mut AVDictionary,
		str_: *const ::std::os::raw::c_char,
		key_val_sep: *const ::std::os::raw::c_char,
		pairs_sep: *const ::std::os::raw::c_char,
		flags: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_dict_copy(
		dst: *mut *mut AVDictionary,
		src: *const AVDictionary,
		flags: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_dict_free(m: *mut *mut AVDictionary);
}
extern "C" {
	pub fn av_dict_get_string(
		m: *const AVDictionary,
		buffer: *mut *mut ::std::os::raw::c_char,
		key_val_sep: ::std::os::raw::c_char,
		pairs_sep: ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
pub const AVChannel_AV_CHAN_NONE: AVChannel = -1;
pub const AVChannel_AV_CHAN_FRONT_LEFT: AVChannel = 0;
pub const AVChannel_AV_CHAN_FRONT_RIGHT: AVChannel = 1;
pub const AVChannel_AV_CHAN_FRONT_CENTER: AVChannel = 2;
pub const AVChannel_AV_CHAN_LOW_FREQUENCY: AVChannel = 3;
pub const AVChannel_AV_CHAN_BACK_LEFT: AVChannel = 4;
pub const AVChannel_AV_CHAN_BACK_RIGHT: AVChannel = 5;
pub const AVChannel_AV_CHAN_FRONT_LEFT_OF_CENTER: AVChannel = 6;
pub const AVChannel_AV_CHAN_FRONT_RIGHT_OF_CENTER: AVChannel = 7;
pub const AVChannel_AV_CHAN_BACK_CENTER: AVChannel = 8;
pub const AVChannel_AV_CHAN_SIDE_LEFT: AVChannel = 9;
pub const AVChannel_AV_CHAN_SIDE_RIGHT: AVChannel = 10;
pub const AVChannel_AV_CHAN_TOP_CENTER: AVChannel = 11;
pub const AVChannel_AV_CHAN_TOP_FRONT_LEFT: AVChannel = 12;
pub const AVChannel_AV_CHAN_TOP_FRONT_CENTER: AVChannel = 13;
pub const AVChannel_AV_CHAN_TOP_FRONT_RIGHT: AVChannel = 14;
pub const AVChannel_AV_CHAN_TOP_BACK_LEFT: AVChannel = 15;
pub const AVChannel_AV_CHAN_TOP_BACK_CENTER: AVChannel = 16;
pub const AVChannel_AV_CHAN_TOP_BACK_RIGHT: AVChannel = 17;
pub const AVChannel_AV_CHAN_STEREO_LEFT: AVChannel = 29;
pub const AVChannel_AV_CHAN_STEREO_RIGHT: AVChannel = 30;
pub const AVChannel_AV_CHAN_WIDE_LEFT: AVChannel = 31;
pub const AVChannel_AV_CHAN_WIDE_RIGHT: AVChannel = 32;
pub const AVChannel_AV_CHAN_SURROUND_DIRECT_LEFT: AVChannel = 33;
pub const AVChannel_AV_CHAN_SURROUND_DIRECT_RIGHT: AVChannel = 34;
pub const AVChannel_AV_CHAN_LOW_FREQUENCY_2: AVChannel = 35;
pub const AVChannel_AV_CHAN_TOP_SIDE_LEFT: AVChannel = 36;
pub const AVChannel_AV_CHAN_TOP_SIDE_RIGHT: AVChannel = 37;
pub const AVChannel_AV_CHAN_BOTTOM_FRONT_CENTER: AVChannel = 38;
pub const AVChannel_AV_CHAN_BOTTOM_FRONT_LEFT: AVChannel = 39;
pub const AVChannel_AV_CHAN_BOTTOM_FRONT_RIGHT: AVChannel = 40;
pub const AVChannel_AV_CHAN_UNUSED: AVChannel = 512;
pub const AVChannel_AV_CHAN_UNKNOWN: AVChannel = 768;
pub const AVChannel_AV_CHAN_AMBISONIC_BASE: AVChannel = 1024;
pub const AVChannel_AV_CHAN_AMBISONIC_END: AVChannel = 2047;
pub type AVChannel = ::std::os::raw::c_int;
pub const AVChannelOrder_AV_CHANNEL_ORDER_UNSPEC: AVChannelOrder = 0;
pub const AVChannelOrder_AV_CHANNEL_ORDER_NATIVE: AVChannelOrder = 1;
pub const AVChannelOrder_AV_CHANNEL_ORDER_CUSTOM: AVChannelOrder = 2;
pub const AVChannelOrder_AV_CHANNEL_ORDER_AMBISONIC: AVChannelOrder = 3;
pub type AVChannelOrder = ::std::os::raw::c_uint;
pub const AVMatrixEncoding_AV_MATRIX_ENCODING_NONE: AVMatrixEncoding = 0;
pub const AVMatrixEncoding_AV_MATRIX_ENCODING_DOLBY: AVMatrixEncoding = 1;
pub const AVMatrixEncoding_AV_MATRIX_ENCODING_DPLII: AVMatrixEncoding = 2;
pub const AVMatrixEncoding_AV_MATRIX_ENCODING_DPLIIX: AVMatrixEncoding = 3;
pub const AVMatrixEncoding_AV_MATRIX_ENCODING_DPLIIZ: AVMatrixEncoding = 4;
pub const AVMatrixEncoding_AV_MATRIX_ENCODING_DOLBYEX: AVMatrixEncoding = 5;
pub const AVMatrixEncoding_AV_MATRIX_ENCODING_DOLBYHEADPHONE: AVMatrixEncoding = 6;
pub const AVMatrixEncoding_AV_MATRIX_ENCODING_NB: AVMatrixEncoding = 7;
pub type AVMatrixEncoding = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVChannelCustom {
	pub id: AVChannel,
	pub name: [::std::os::raw::c_char; 16usize],
	pub opaque: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_AVChannelCustom() {
	assert_eq!(
		::std::mem::size_of::<AVChannelCustom>(),
		32usize,
		concat!("Size of: ", stringify!(AVChannelCustom))
	);
	assert_eq!(
		::std::mem::align_of::<AVChannelCustom>(),
		8usize,
		concat!("Alignment of ", stringify!(AVChannelCustom))
	);
	fn test_field_id() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVChannelCustom>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize
			},
			0usize,
			concat!("Offset of field: ", stringify!(AVChannelCustom), "::", stringify!(id))
		);
	}
	test_field_id();
	fn test_field_name() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVChannelCustom>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
			},
			4usize,
			concat!("Offset of field: ", stringify!(AVChannelCustom), "::", stringify!(name))
		);
	}
	test_field_name();
	fn test_field_opaque() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVChannelCustom>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).opaque) as usize - ptr as usize
			},
			24usize,
			concat!(
				"Offset of field: ",
				stringify!(AVChannelCustom),
				"::",
				stringify!(opaque)
			)
		);
	}
	test_field_opaque();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AVChannelLayout {
	pub order: AVChannelOrder,
	pub nb_channels: ::std::os::raw::c_int,
	pub u: AVChannelLayout__bindgen_ty_1,
	pub opaque: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union AVChannelLayout__bindgen_ty_1 {
	pub mask: u64,
	pub map: *mut AVChannelCustom,
}
#[test]
fn bindgen_test_layout_AVChannelLayout__bindgen_ty_1() {
	assert_eq!(
		::std::mem::size_of::<AVChannelLayout__bindgen_ty_1>(),
		8usize,
		concat!("Size of: ", stringify!(AVChannelLayout__bindgen_ty_1))
	);
	assert_eq!(
		::std::mem::align_of::<AVChannelLayout__bindgen_ty_1>(),
		8usize,
		concat!("Alignment of ", stringify!(AVChannelLayout__bindgen_ty_1))
	);
	fn test_field_mask() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVChannelLayout__bindgen_ty_1>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(AVChannelLayout__bindgen_ty_1),
				"::",
				stringify!(mask)
			)
		);
	}
	test_field_mask();
	fn test_field_map() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVChannelLayout__bindgen_ty_1>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).map) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(AVChannelLayout__bindgen_ty_1),
				"::",
				stringify!(map)
			)
		);
	}
	test_field_map();
}
#[test]
fn bindgen_test_layout_AVChannelLayout() {
	assert_eq!(
		::std::mem::size_of::<AVChannelLayout>(),
		24usize,
		concat!("Size of: ", stringify!(AVChannelLayout))
	);
	assert_eq!(
		::std::mem::align_of::<AVChannelLayout>(),
		8usize,
		concat!("Alignment of ", stringify!(AVChannelLayout))
	);
	fn test_field_order() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVChannelLayout>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).order) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(AVChannelLayout),
				"::",
				stringify!(order)
			)
		);
	}
	test_field_order();
	fn test_field_nb_channels() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVChannelLayout>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).nb_channels) as usize - ptr as usize
			},
			4usize,
			concat!(
				"Offset of field: ",
				stringify!(AVChannelLayout),
				"::",
				stringify!(nb_channels)
			)
		);
	}
	test_field_nb_channels();
	fn test_field_u() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVChannelLayout>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize
			},
			8usize,
			concat!("Offset of field: ", stringify!(AVChannelLayout), "::", stringify!(u))
		);
	}
	test_field_u();
	fn test_field_opaque() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVChannelLayout>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).opaque) as usize - ptr as usize
			},
			16usize,
			concat!(
				"Offset of field: ",
				stringify!(AVChannelLayout),
				"::",
				stringify!(opaque)
			)
		);
	}
	test_field_opaque();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVBPrint {
	_unused: [u8; 0],
}
extern "C" {
	pub fn av_get_channel_layout(name: *const ::std::os::raw::c_char) -> u64;
}
extern "C" {
	pub fn av_get_extended_channel_layout(
		name: *const ::std::os::raw::c_char,
		channel_layout: *mut u64,
		nb_channels: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_get_channel_layout_string(
		buf: *mut ::std::os::raw::c_char,
		buf_size: ::std::os::raw::c_int,
		nb_channels: ::std::os::raw::c_int,
		channel_layout: u64,
	);
}
extern "C" {
	pub fn av_bprint_channel_layout(bp: *mut AVBPrint, nb_channels: ::std::os::raw::c_int, channel_layout: u64);
}
extern "C" {
	pub fn av_get_channel_layout_nb_channels(channel_layout: u64) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_get_default_channel_layout(nb_channels: ::std::os::raw::c_int) -> i64;
}
extern "C" {
	pub fn av_get_channel_layout_channel_index(channel_layout: u64, channel: u64) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_channel_layout_extract_channel(channel_layout: u64, index: ::std::os::raw::c_int) -> u64;
}
extern "C" {
	pub fn av_get_channel_name(channel: u64) -> *const ::std::os::raw::c_char;
}
extern "C" {
	pub fn av_get_channel_description(channel: u64) -> *const ::std::os::raw::c_char;
}
extern "C" {
	pub fn av_get_standard_channel_layout(
		index: ::std::os::raw::c_uint,
		layout: *mut u64,
		name: *mut *const ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_channel_name(
		buf: *mut ::std::os::raw::c_char,
		buf_size: size_t,
		channel: AVChannel,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_channel_name_bprint(bp: *mut AVBPrint, channel_id: AVChannel);
}
extern "C" {
	pub fn av_channel_description(
		buf: *mut ::std::os::raw::c_char,
		buf_size: size_t,
		channel: AVChannel,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_channel_description_bprint(bp: *mut AVBPrint, channel_id: AVChannel);
}
extern "C" {
	pub fn av_channel_from_string(name: *const ::std::os::raw::c_char) -> AVChannel;
}
extern "C" {
	pub fn av_channel_layout_from_mask(channel_layout: *mut AVChannelLayout, mask: u64) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_channel_layout_from_string(
		channel_layout: *mut AVChannelLayout,
		str_: *const ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_channel_layout_default(ch_layout: *mut AVChannelLayout, nb_channels: ::std::os::raw::c_int);
}
extern "C" {
	pub fn av_channel_layout_standard(opaque: *mut *mut ::std::os::raw::c_void) -> *const AVChannelLayout;
}
extern "C" {
	pub fn av_channel_layout_uninit(channel_layout: *mut AVChannelLayout);
}
extern "C" {
	pub fn av_channel_layout_copy(dst: *mut AVChannelLayout, src: *const AVChannelLayout) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_channel_layout_describe(
		channel_layout: *const AVChannelLayout,
		buf: *mut ::std::os::raw::c_char,
		buf_size: size_t,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_channel_layout_describe_bprint(
		channel_layout: *const AVChannelLayout,
		bp: *mut AVBPrint,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_channel_layout_channel_from_index(
		channel_layout: *const AVChannelLayout,
		idx: ::std::os::raw::c_uint,
	) -> AVChannel;
}
extern "C" {
	pub fn av_channel_layout_index_from_channel(
		channel_layout: *const AVChannelLayout,
		channel: AVChannel,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_channel_layout_index_from_string(
		channel_layout: *const AVChannelLayout,
		name: *const ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_channel_layout_channel_from_string(
		channel_layout: *const AVChannelLayout,
		name: *const ::std::os::raw::c_char,
	) -> AVChannel;
}
extern "C" {
	pub fn av_channel_layout_subset(channel_layout: *const AVChannelLayout, mask: u64) -> u64;
}
extern "C" {
	pub fn av_channel_layout_check(channel_layout: *const AVChannelLayout) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_channel_layout_compare(
		chl: *const AVChannelLayout,
		chl1: *const AVChannelLayout,
	) -> ::std::os::raw::c_int;
}
pub const AVFrameSideDataType_AV_FRAME_DATA_PANSCAN: AVFrameSideDataType = 0;
pub const AVFrameSideDataType_AV_FRAME_DATA_A53_CC: AVFrameSideDataType = 1;
pub const AVFrameSideDataType_AV_FRAME_DATA_STEREO3D: AVFrameSideDataType = 2;
pub const AVFrameSideDataType_AV_FRAME_DATA_MATRIXENCODING: AVFrameSideDataType = 3;
pub const AVFrameSideDataType_AV_FRAME_DATA_DOWNMIX_INFO: AVFrameSideDataType = 4;
pub const AVFrameSideDataType_AV_FRAME_DATA_REPLAYGAIN: AVFrameSideDataType = 5;
pub const AVFrameSideDataType_AV_FRAME_DATA_DISPLAYMATRIX: AVFrameSideDataType = 6;
pub const AVFrameSideDataType_AV_FRAME_DATA_AFD: AVFrameSideDataType = 7;
pub const AVFrameSideDataType_AV_FRAME_DATA_MOTION_VECTORS: AVFrameSideDataType = 8;
pub const AVFrameSideDataType_AV_FRAME_DATA_SKIP_SAMPLES: AVFrameSideDataType = 9;
pub const AVFrameSideDataType_AV_FRAME_DATA_AUDIO_SERVICE_TYPE: AVFrameSideDataType = 10;
pub const AVFrameSideDataType_AV_FRAME_DATA_MASTERING_DISPLAY_METADATA: AVFrameSideDataType = 11;
pub const AVFrameSideDataType_AV_FRAME_DATA_GOP_TIMECODE: AVFrameSideDataType = 12;
pub const AVFrameSideDataType_AV_FRAME_DATA_SPHERICAL: AVFrameSideDataType = 13;
pub const AVFrameSideDataType_AV_FRAME_DATA_CONTENT_LIGHT_LEVEL: AVFrameSideDataType = 14;
pub const AVFrameSideDataType_AV_FRAME_DATA_ICC_PROFILE: AVFrameSideDataType = 15;
pub const AVFrameSideDataType_AV_FRAME_DATA_S12M_TIMECODE: AVFrameSideDataType = 16;
pub const AVFrameSideDataType_AV_FRAME_DATA_DYNAMIC_HDR_PLUS: AVFrameSideDataType = 17;
pub const AVFrameSideDataType_AV_FRAME_DATA_REGIONS_OF_INTEREST: AVFrameSideDataType = 18;
pub const AVFrameSideDataType_AV_FRAME_DATA_VIDEO_ENC_PARAMS: AVFrameSideDataType = 19;
pub const AVFrameSideDataType_AV_FRAME_DATA_SEI_UNREGISTERED: AVFrameSideDataType = 20;
pub const AVFrameSideDataType_AV_FRAME_DATA_FILM_GRAIN_PARAMS: AVFrameSideDataType = 21;
pub const AVFrameSideDataType_AV_FRAME_DATA_DETECTION_BBOXES: AVFrameSideDataType = 22;
pub const AVFrameSideDataType_AV_FRAME_DATA_DOVI_RPU_BUFFER: AVFrameSideDataType = 23;
pub const AVFrameSideDataType_AV_FRAME_DATA_DOVI_METADATA: AVFrameSideDataType = 24;
pub const AVFrameSideDataType_AV_FRAME_DATA_DYNAMIC_HDR_VIVID: AVFrameSideDataType = 25;
pub type AVFrameSideDataType = ::std::os::raw::c_uint;
pub const AVActiveFormatDescription_AV_AFD_SAME: AVActiveFormatDescription = 8;
pub const AVActiveFormatDescription_AV_AFD_4_3: AVActiveFormatDescription = 9;
pub const AVActiveFormatDescription_AV_AFD_16_9: AVActiveFormatDescription = 10;
pub const AVActiveFormatDescription_AV_AFD_14_9: AVActiveFormatDescription = 11;
pub const AVActiveFormatDescription_AV_AFD_4_3_SP_14_9: AVActiveFormatDescription = 13;
pub const AVActiveFormatDescription_AV_AFD_16_9_SP_14_9: AVActiveFormatDescription = 14;
pub const AVActiveFormatDescription_AV_AFD_SP_4_3: AVActiveFormatDescription = 15;
pub type AVActiveFormatDescription = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVFrameSideData {
	pub type_: AVFrameSideDataType,
	pub data: *mut u8,
	pub size: size_t,
	pub metadata: *mut AVDictionary,
	pub buf: *mut AVBufferRef,
}
#[test]
fn bindgen_test_layout_AVFrameSideData() {
	assert_eq!(
		::std::mem::size_of::<AVFrameSideData>(),
		40usize,
		concat!("Size of: ", stringify!(AVFrameSideData))
	);
	assert_eq!(
		::std::mem::align_of::<AVFrameSideData>(),
		8usize,
		concat!("Alignment of ", stringify!(AVFrameSideData))
	);
	fn test_field_type() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrameSideData>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFrameSideData),
				"::",
				stringify!(type_)
			)
		);
	}
	test_field_type();
	fn test_field_data() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrameSideData>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
			},
			8usize,
			concat!("Offset of field: ", stringify!(AVFrameSideData), "::", stringify!(data))
		);
	}
	test_field_data();
	fn test_field_size() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrameSideData>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
			},
			16usize,
			concat!("Offset of field: ", stringify!(AVFrameSideData), "::", stringify!(size))
		);
	}
	test_field_size();
	fn test_field_metadata() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrameSideData>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).metadata) as usize - ptr as usize
			},
			24usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFrameSideData),
				"::",
				stringify!(metadata)
			)
		);
	}
	test_field_metadata();
	fn test_field_buf() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrameSideData>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize
			},
			32usize,
			concat!("Offset of field: ", stringify!(AVFrameSideData), "::", stringify!(buf))
		);
	}
	test_field_buf();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVRegionOfInterest {
	pub self_size: u32,
	pub top: ::std::os::raw::c_int,
	pub bottom: ::std::os::raw::c_int,
	pub left: ::std::os::raw::c_int,
	pub right: ::std::os::raw::c_int,
	pub qoffset: AVRational,
}
#[test]
fn bindgen_test_layout_AVRegionOfInterest() {
	assert_eq!(
		::std::mem::size_of::<AVRegionOfInterest>(),
		28usize,
		concat!("Size of: ", stringify!(AVRegionOfInterest))
	);
	assert_eq!(
		::std::mem::align_of::<AVRegionOfInterest>(),
		4usize,
		concat!("Alignment of ", stringify!(AVRegionOfInterest))
	);
	fn test_field_self_size() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVRegionOfInterest>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).self_size) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(AVRegionOfInterest),
				"::",
				stringify!(self_size)
			)
		);
	}
	test_field_self_size();
	fn test_field_top() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVRegionOfInterest>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).top) as usize - ptr as usize
			},
			4usize,
			concat!(
				"Offset of field: ",
				stringify!(AVRegionOfInterest),
				"::",
				stringify!(top)
			)
		);
	}
	test_field_top();
	fn test_field_bottom() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVRegionOfInterest>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).bottom) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(AVRegionOfInterest),
				"::",
				stringify!(bottom)
			)
		);
	}
	test_field_bottom();
	fn test_field_left() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVRegionOfInterest>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).left) as usize - ptr as usize
			},
			12usize,
			concat!(
				"Offset of field: ",
				stringify!(AVRegionOfInterest),
				"::",
				stringify!(left)
			)
		);
	}
	test_field_left();
	fn test_field_right() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVRegionOfInterest>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).right) as usize - ptr as usize
			},
			16usize,
			concat!(
				"Offset of field: ",
				stringify!(AVRegionOfInterest),
				"::",
				stringify!(right)
			)
		);
	}
	test_field_right();
	fn test_field_qoffset() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVRegionOfInterest>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).qoffset) as usize - ptr as usize
			},
			20usize,
			concat!(
				"Offset of field: ",
				stringify!(AVRegionOfInterest),
				"::",
				stringify!(qoffset)
			)
		);
	}
	test_field_qoffset();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AVFrame {
	pub data: [*mut u8; 8usize],
	pub linesize: [::std::os::raw::c_int; 8usize],
	pub extended_data: *mut *mut u8,
	pub width: ::std::os::raw::c_int,
	pub height: ::std::os::raw::c_int,
	pub nb_samples: ::std::os::raw::c_int,
	pub format: ::std::os::raw::c_int,
	pub key_frame: ::std::os::raw::c_int,
	pub pict_type: AVPictureType,
	pub sample_aspect_ratio: AVRational,
	pub pts: i64,
	pub pkt_dts: i64,
	pub time_base: AVRational,
	pub coded_picture_number: ::std::os::raw::c_int,
	pub display_picture_number: ::std::os::raw::c_int,
	pub quality: ::std::os::raw::c_int,
	pub opaque: *mut ::std::os::raw::c_void,
	pub repeat_pict: ::std::os::raw::c_int,
	pub interlaced_frame: ::std::os::raw::c_int,
	pub top_field_first: ::std::os::raw::c_int,
	pub palette_has_changed: ::std::os::raw::c_int,
	pub reordered_opaque: i64,
	pub sample_rate: ::std::os::raw::c_int,
	pub channel_layout: u64,
	pub buf: [*mut AVBufferRef; 8usize],
	pub extended_buf: *mut *mut AVBufferRef,
	pub nb_extended_buf: ::std::os::raw::c_int,
	pub side_data: *mut *mut AVFrameSideData,
	pub nb_side_data: ::std::os::raw::c_int,
	pub flags: ::std::os::raw::c_int,
	pub color_range: AVColorRange,
	pub color_primaries: AVColorPrimaries,
	pub color_trc: AVColorTransferCharacteristic,
	pub colorspace: AVColorSpace,
	pub chroma_location: AVChromaLocation,
	pub best_effort_timestamp: i64,
	pub pkt_pos: i64,
	pub pkt_duration: i64,
	pub metadata: *mut AVDictionary,
	pub decode_error_flags: ::std::os::raw::c_int,
	pub channels: ::std::os::raw::c_int,
	pub pkt_size: ::std::os::raw::c_int,
	pub hw_frames_ctx: *mut AVBufferRef,
	pub opaque_ref: *mut AVBufferRef,
	pub crop_top: size_t,
	pub crop_bottom: size_t,
	pub crop_left: size_t,
	pub crop_right: size_t,
	pub private_ref: *mut AVBufferRef,
	pub ch_layout: AVChannelLayout,
}
#[test]
fn bindgen_test_layout_AVFrame() {
	assert_eq!(
		::std::mem::size_of::<AVFrame>(),
		472usize,
		concat!("Size of: ", stringify!(AVFrame))
	);
	assert_eq!(
		::std::mem::align_of::<AVFrame>(),
		8usize,
		concat!("Alignment of ", stringify!(AVFrame))
	);
	fn test_field_data() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrame>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
			},
			0usize,
			concat!("Offset of field: ", stringify!(AVFrame), "::", stringify!(data))
		);
	}
	test_field_data();
	fn test_field_linesize() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrame>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).linesize) as usize - ptr as usize
			},
			64usize,
			concat!("Offset of field: ", stringify!(AVFrame), "::", stringify!(linesize))
		);
	}
	test_field_linesize();
	fn test_field_extended_data() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrame>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).extended_data) as usize - ptr as usize
			},
			96usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFrame),
				"::",
				stringify!(extended_data)
			)
		);
	}
	test_field_extended_data();
	fn test_field_width() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrame>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize
			},
			104usize,
			concat!("Offset of field: ", stringify!(AVFrame), "::", stringify!(width))
		);
	}
	test_field_width();
	fn test_field_height() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrame>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize
			},
			108usize,
			concat!("Offset of field: ", stringify!(AVFrame), "::", stringify!(height))
		);
	}
	test_field_height();
	fn test_field_nb_samples() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrame>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).nb_samples) as usize - ptr as usize
			},
			112usize,
			concat!("Offset of field: ", stringify!(AVFrame), "::", stringify!(nb_samples))
		);
	}
	test_field_nb_samples();
	fn test_field_format() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrame>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize
			},
			116usize,
			concat!("Offset of field: ", stringify!(AVFrame), "::", stringify!(format))
		);
	}
	test_field_format();
	fn test_field_key_frame() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrame>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).key_frame) as usize - ptr as usize
			},
			120usize,
			concat!("Offset of field: ", stringify!(AVFrame), "::", stringify!(key_frame))
		);
	}
	test_field_key_frame();
	fn test_field_pict_type() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrame>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).pict_type) as usize - ptr as usize
			},
			124usize,
			concat!("Offset of field: ", stringify!(AVFrame), "::", stringify!(pict_type))
		);
	}
	test_field_pict_type();
	fn test_field_sample_aspect_ratio() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrame>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).sample_aspect_ratio) as usize - ptr as usize
			},
			128usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFrame),
				"::",
				stringify!(sample_aspect_ratio)
			)
		);
	}
	test_field_sample_aspect_ratio();
	fn test_field_pts() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrame>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).pts) as usize - ptr as usize
			},
			136usize,
			concat!("Offset of field: ", stringify!(AVFrame), "::", stringify!(pts))
		);
	}
	test_field_pts();
	fn test_field_pkt_dts() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrame>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).pkt_dts) as usize - ptr as usize
			},
			144usize,
			concat!("Offset of field: ", stringify!(AVFrame), "::", stringify!(pkt_dts))
		);
	}
	test_field_pkt_dts();
	fn test_field_time_base() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrame>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).time_base) as usize - ptr as usize
			},
			152usize,
			concat!("Offset of field: ", stringify!(AVFrame), "::", stringify!(time_base))
		);
	}
	test_field_time_base();
	fn test_field_coded_picture_number() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrame>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).coded_picture_number) as usize - ptr as usize
			},
			160usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFrame),
				"::",
				stringify!(coded_picture_number)
			)
		);
	}
	test_field_coded_picture_number();
	fn test_field_display_picture_number() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrame>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).display_picture_number) as usize - ptr as usize
			},
			164usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFrame),
				"::",
				stringify!(display_picture_number)
			)
		);
	}
	test_field_display_picture_number();
	fn test_field_quality() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrame>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).quality) as usize - ptr as usize
			},
			168usize,
			concat!("Offset of field: ", stringify!(AVFrame), "::", stringify!(quality))
		);
	}
	test_field_quality();
	fn test_field_opaque() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrame>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).opaque) as usize - ptr as usize
			},
			176usize,
			concat!("Offset of field: ", stringify!(AVFrame), "::", stringify!(opaque))
		);
	}
	test_field_opaque();
	fn test_field_repeat_pict() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrame>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).repeat_pict) as usize - ptr as usize
			},
			184usize,
			concat!("Offset of field: ", stringify!(AVFrame), "::", stringify!(repeat_pict))
		);
	}
	test_field_repeat_pict();
	fn test_field_interlaced_frame() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrame>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).interlaced_frame) as usize - ptr as usize
			},
			188usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFrame),
				"::",
				stringify!(interlaced_frame)
			)
		);
	}
	test_field_interlaced_frame();
	fn test_field_top_field_first() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrame>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).top_field_first) as usize - ptr as usize
			},
			192usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFrame),
				"::",
				stringify!(top_field_first)
			)
		);
	}
	test_field_top_field_first();
	fn test_field_palette_has_changed() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrame>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).palette_has_changed) as usize - ptr as usize
			},
			196usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFrame),
				"::",
				stringify!(palette_has_changed)
			)
		);
	}
	test_field_palette_has_changed();
	fn test_field_reordered_opaque() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrame>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).reordered_opaque) as usize - ptr as usize
			},
			200usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFrame),
				"::",
				stringify!(reordered_opaque)
			)
		);
	}
	test_field_reordered_opaque();
	fn test_field_sample_rate() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrame>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).sample_rate) as usize - ptr as usize
			},
			208usize,
			concat!("Offset of field: ", stringify!(AVFrame), "::", stringify!(sample_rate))
		);
	}
	test_field_sample_rate();
	fn test_field_channel_layout() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrame>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).channel_layout) as usize - ptr as usize
			},
			216usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFrame),
				"::",
				stringify!(channel_layout)
			)
		);
	}
	test_field_channel_layout();
	fn test_field_buf() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrame>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize
			},
			224usize,
			concat!("Offset of field: ", stringify!(AVFrame), "::", stringify!(buf))
		);
	}
	test_field_buf();
	fn test_field_extended_buf() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrame>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).extended_buf) as usize - ptr as usize
			},
			288usize,
			concat!("Offset of field: ", stringify!(AVFrame), "::", stringify!(extended_buf))
		);
	}
	test_field_extended_buf();
	fn test_field_nb_extended_buf() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrame>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).nb_extended_buf) as usize - ptr as usize
			},
			296usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFrame),
				"::",
				stringify!(nb_extended_buf)
			)
		);
	}
	test_field_nb_extended_buf();
	fn test_field_side_data() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrame>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).side_data) as usize - ptr as usize
			},
			304usize,
			concat!("Offset of field: ", stringify!(AVFrame), "::", stringify!(side_data))
		);
	}
	test_field_side_data();
	fn test_field_nb_side_data() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrame>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).nb_side_data) as usize - ptr as usize
			},
			312usize,
			concat!("Offset of field: ", stringify!(AVFrame), "::", stringify!(nb_side_data))
		);
	}
	test_field_nb_side_data();
	fn test_field_flags() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrame>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
			},
			316usize,
			concat!("Offset of field: ", stringify!(AVFrame), "::", stringify!(flags))
		);
	}
	test_field_flags();
	fn test_field_color_range() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrame>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).color_range) as usize - ptr as usize
			},
			320usize,
			concat!("Offset of field: ", stringify!(AVFrame), "::", stringify!(color_range))
		);
	}
	test_field_color_range();
	fn test_field_color_primaries() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrame>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).color_primaries) as usize - ptr as usize
			},
			324usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFrame),
				"::",
				stringify!(color_primaries)
			)
		);
	}
	test_field_color_primaries();
	fn test_field_color_trc() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrame>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).color_trc) as usize - ptr as usize
			},
			328usize,
			concat!("Offset of field: ", stringify!(AVFrame), "::", stringify!(color_trc))
		);
	}
	test_field_color_trc();
	fn test_field_colorspace() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrame>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).colorspace) as usize - ptr as usize
			},
			332usize,
			concat!("Offset of field: ", stringify!(AVFrame), "::", stringify!(colorspace))
		);
	}
	test_field_colorspace();
	fn test_field_chroma_location() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrame>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).chroma_location) as usize - ptr as usize
			},
			336usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFrame),
				"::",
				stringify!(chroma_location)
			)
		);
	}
	test_field_chroma_location();
	fn test_field_best_effort_timestamp() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrame>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).best_effort_timestamp) as usize - ptr as usize
			},
			344usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFrame),
				"::",
				stringify!(best_effort_timestamp)
			)
		);
	}
	test_field_best_effort_timestamp();
	fn test_field_pkt_pos() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrame>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).pkt_pos) as usize - ptr as usize
			},
			352usize,
			concat!("Offset of field: ", stringify!(AVFrame), "::", stringify!(pkt_pos))
		);
	}
	test_field_pkt_pos();
	fn test_field_pkt_duration() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrame>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).pkt_duration) as usize - ptr as usize
			},
			360usize,
			concat!("Offset of field: ", stringify!(AVFrame), "::", stringify!(pkt_duration))
		);
	}
	test_field_pkt_duration();
	fn test_field_metadata() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrame>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).metadata) as usize - ptr as usize
			},
			368usize,
			concat!("Offset of field: ", stringify!(AVFrame), "::", stringify!(metadata))
		);
	}
	test_field_metadata();
	fn test_field_decode_error_flags() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrame>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).decode_error_flags) as usize - ptr as usize
			},
			376usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFrame),
				"::",
				stringify!(decode_error_flags)
			)
		);
	}
	test_field_decode_error_flags();
	fn test_field_channels() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrame>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize
			},
			380usize,
			concat!("Offset of field: ", stringify!(AVFrame), "::", stringify!(channels))
		);
	}
	test_field_channels();
	fn test_field_pkt_size() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrame>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).pkt_size) as usize - ptr as usize
			},
			384usize,
			concat!("Offset of field: ", stringify!(AVFrame), "::", stringify!(pkt_size))
		);
	}
	test_field_pkt_size();
	fn test_field_hw_frames_ctx() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrame>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).hw_frames_ctx) as usize - ptr as usize
			},
			392usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFrame),
				"::",
				stringify!(hw_frames_ctx)
			)
		);
	}
	test_field_hw_frames_ctx();
	fn test_field_opaque_ref() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrame>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).opaque_ref) as usize - ptr as usize
			},
			400usize,
			concat!("Offset of field: ", stringify!(AVFrame), "::", stringify!(opaque_ref))
		);
	}
	test_field_opaque_ref();
	fn test_field_crop_top() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrame>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).crop_top) as usize - ptr as usize
			},
			408usize,
			concat!("Offset of field: ", stringify!(AVFrame), "::", stringify!(crop_top))
		);
	}
	test_field_crop_top();
	fn test_field_crop_bottom() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrame>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).crop_bottom) as usize - ptr as usize
			},
			416usize,
			concat!("Offset of field: ", stringify!(AVFrame), "::", stringify!(crop_bottom))
		);
	}
	test_field_crop_bottom();
	fn test_field_crop_left() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrame>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).crop_left) as usize - ptr as usize
			},
			424usize,
			concat!("Offset of field: ", stringify!(AVFrame), "::", stringify!(crop_left))
		);
	}
	test_field_crop_left();
	fn test_field_crop_right() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrame>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).crop_right) as usize - ptr as usize
			},
			432usize,
			concat!("Offset of field: ", stringify!(AVFrame), "::", stringify!(crop_right))
		);
	}
	test_field_crop_right();
	fn test_field_private_ref() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrame>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).private_ref) as usize - ptr as usize
			},
			440usize,
			concat!("Offset of field: ", stringify!(AVFrame), "::", stringify!(private_ref))
		);
	}
	test_field_private_ref();
	fn test_field_ch_layout() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFrame>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).ch_layout) as usize - ptr as usize
			},
			448usize,
			concat!("Offset of field: ", stringify!(AVFrame), "::", stringify!(ch_layout))
		);
	}
	test_field_ch_layout();
}
extern "C" {
	pub fn av_get_colorspace_name(val: AVColorSpace) -> *const ::std::os::raw::c_char;
}
extern "C" {
	pub fn av_frame_alloc() -> *mut AVFrame;
}
extern "C" {
	pub fn av_frame_free(frame: *mut *mut AVFrame);
}
extern "C" {
	pub fn av_frame_ref(dst: *mut AVFrame, src: *const AVFrame) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_frame_clone(src: *const AVFrame) -> *mut AVFrame;
}
extern "C" {
	pub fn av_frame_unref(frame: *mut AVFrame);
}
extern "C" {
	pub fn av_frame_move_ref(dst: *mut AVFrame, src: *mut AVFrame);
}
extern "C" {
	pub fn av_frame_get_buffer(frame: *mut AVFrame, align: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_frame_is_writable(frame: *mut AVFrame) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_frame_make_writable(frame: *mut AVFrame) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_frame_copy(dst: *mut AVFrame, src: *const AVFrame) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_frame_copy_props(dst: *mut AVFrame, src: *const AVFrame) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_frame_get_plane_buffer(frame: *mut AVFrame, plane: ::std::os::raw::c_int) -> *mut AVBufferRef;
}
extern "C" {
	pub fn av_frame_new_side_data(
		frame: *mut AVFrame,
		type_: AVFrameSideDataType,
		size: size_t,
	) -> *mut AVFrameSideData;
}
extern "C" {
	pub fn av_frame_new_side_data_from_buf(
		frame: *mut AVFrame,
		type_: AVFrameSideDataType,
		buf: *mut AVBufferRef,
	) -> *mut AVFrameSideData;
}
extern "C" {
	pub fn av_frame_get_side_data(frame: *const AVFrame, type_: AVFrameSideDataType) -> *mut AVFrameSideData;
}
extern "C" {
	pub fn av_frame_remove_side_data(frame: *mut AVFrame, type_: AVFrameSideDataType);
}
pub const AV_FRAME_CROP_UNALIGNED: _bindgen_ty_2 = 1;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
extern "C" {
	pub fn av_frame_apply_cropping(frame: *mut AVFrame, flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_frame_side_data_name(type_: AVFrameSideDataType) -> *const ::std::os::raw::c_char;
}
pub const AVHWDeviceType_AV_HWDEVICE_TYPE_NONE: AVHWDeviceType = 0;
pub const AVHWDeviceType_AV_HWDEVICE_TYPE_VDPAU: AVHWDeviceType = 1;
pub const AVHWDeviceType_AV_HWDEVICE_TYPE_CUDA: AVHWDeviceType = 2;
pub const AVHWDeviceType_AV_HWDEVICE_TYPE_VAAPI: AVHWDeviceType = 3;
pub const AVHWDeviceType_AV_HWDEVICE_TYPE_DXVA2: AVHWDeviceType = 4;
pub const AVHWDeviceType_AV_HWDEVICE_TYPE_QSV: AVHWDeviceType = 5;
pub const AVHWDeviceType_AV_HWDEVICE_TYPE_VIDEOTOOLBOX: AVHWDeviceType = 6;
pub const AVHWDeviceType_AV_HWDEVICE_TYPE_D3D11VA: AVHWDeviceType = 7;
pub const AVHWDeviceType_AV_HWDEVICE_TYPE_DRM: AVHWDeviceType = 8;
pub const AVHWDeviceType_AV_HWDEVICE_TYPE_OPENCL: AVHWDeviceType = 9;
pub const AVHWDeviceType_AV_HWDEVICE_TYPE_MEDIACODEC: AVHWDeviceType = 10;
pub const AVHWDeviceType_AV_HWDEVICE_TYPE_VULKAN: AVHWDeviceType = 11;
pub type AVHWDeviceType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVHWDeviceInternal {
	_unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVHWDeviceContext {
	pub av_class: *const AVClass,
	pub internal: *mut AVHWDeviceInternal,
	pub type_: AVHWDeviceType,
	pub hwctx: *mut ::std::os::raw::c_void,
	pub free: ::std::option::Option<unsafe extern "C" fn(ctx: *mut AVHWDeviceContext)>,
	pub user_opaque: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_AVHWDeviceContext() {
	assert_eq!(
		::std::mem::size_of::<AVHWDeviceContext>(),
		48usize,
		concat!("Size of: ", stringify!(AVHWDeviceContext))
	);
	assert_eq!(
		::std::mem::align_of::<AVHWDeviceContext>(),
		8usize,
		concat!("Alignment of ", stringify!(AVHWDeviceContext))
	);
	fn test_field_av_class() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVHWDeviceContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).av_class) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(AVHWDeviceContext),
				"::",
				stringify!(av_class)
			)
		);
	}
	test_field_av_class();
	fn test_field_internal() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVHWDeviceContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).internal) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(AVHWDeviceContext),
				"::",
				stringify!(internal)
			)
		);
	}
	test_field_internal();
	fn test_field_type() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVHWDeviceContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
			},
			16usize,
			concat!(
				"Offset of field: ",
				stringify!(AVHWDeviceContext),
				"::",
				stringify!(type_)
			)
		);
	}
	test_field_type();
	fn test_field_hwctx() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVHWDeviceContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).hwctx) as usize - ptr as usize
			},
			24usize,
			concat!(
				"Offset of field: ",
				stringify!(AVHWDeviceContext),
				"::",
				stringify!(hwctx)
			)
		);
	}
	test_field_hwctx();
	fn test_field_free() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVHWDeviceContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).free) as usize - ptr as usize
			},
			32usize,
			concat!(
				"Offset of field: ",
				stringify!(AVHWDeviceContext),
				"::",
				stringify!(free)
			)
		);
	}
	test_field_free();
	fn test_field_user_opaque() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVHWDeviceContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).user_opaque) as usize - ptr as usize
			},
			40usize,
			concat!(
				"Offset of field: ",
				stringify!(AVHWDeviceContext),
				"::",
				stringify!(user_opaque)
			)
		);
	}
	test_field_user_opaque();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVHWFramesInternal {
	_unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVHWFramesContext {
	pub av_class: *const AVClass,
	pub internal: *mut AVHWFramesInternal,
	pub device_ref: *mut AVBufferRef,
	pub device_ctx: *mut AVHWDeviceContext,
	pub hwctx: *mut ::std::os::raw::c_void,
	pub free: ::std::option::Option<unsafe extern "C" fn(ctx: *mut AVHWFramesContext)>,
	pub user_opaque: *mut ::std::os::raw::c_void,
	pub pool: *mut AVBufferPool,
	pub initial_pool_size: ::std::os::raw::c_int,
	pub format: AVPixelFormat,
	pub sw_format: AVPixelFormat,
	pub width: ::std::os::raw::c_int,
	pub height: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_AVHWFramesContext() {
	assert_eq!(
		::std::mem::size_of::<AVHWFramesContext>(),
		88usize,
		concat!("Size of: ", stringify!(AVHWFramesContext))
	);
	assert_eq!(
		::std::mem::align_of::<AVHWFramesContext>(),
		8usize,
		concat!("Alignment of ", stringify!(AVHWFramesContext))
	);
	fn test_field_av_class() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVHWFramesContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).av_class) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(AVHWFramesContext),
				"::",
				stringify!(av_class)
			)
		);
	}
	test_field_av_class();
	fn test_field_internal() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVHWFramesContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).internal) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(AVHWFramesContext),
				"::",
				stringify!(internal)
			)
		);
	}
	test_field_internal();
	fn test_field_device_ref() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVHWFramesContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).device_ref) as usize - ptr as usize
			},
			16usize,
			concat!(
				"Offset of field: ",
				stringify!(AVHWFramesContext),
				"::",
				stringify!(device_ref)
			)
		);
	}
	test_field_device_ref();
	fn test_field_device_ctx() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVHWFramesContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).device_ctx) as usize - ptr as usize
			},
			24usize,
			concat!(
				"Offset of field: ",
				stringify!(AVHWFramesContext),
				"::",
				stringify!(device_ctx)
			)
		);
	}
	test_field_device_ctx();
	fn test_field_hwctx() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVHWFramesContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).hwctx) as usize - ptr as usize
			},
			32usize,
			concat!(
				"Offset of field: ",
				stringify!(AVHWFramesContext),
				"::",
				stringify!(hwctx)
			)
		);
	}
	test_field_hwctx();
	fn test_field_free() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVHWFramesContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).free) as usize - ptr as usize
			},
			40usize,
			concat!(
				"Offset of field: ",
				stringify!(AVHWFramesContext),
				"::",
				stringify!(free)
			)
		);
	}
	test_field_free();
	fn test_field_user_opaque() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVHWFramesContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).user_opaque) as usize - ptr as usize
			},
			48usize,
			concat!(
				"Offset of field: ",
				stringify!(AVHWFramesContext),
				"::",
				stringify!(user_opaque)
			)
		);
	}
	test_field_user_opaque();
	fn test_field_pool() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVHWFramesContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).pool) as usize - ptr as usize
			},
			56usize,
			concat!(
				"Offset of field: ",
				stringify!(AVHWFramesContext),
				"::",
				stringify!(pool)
			)
		);
	}
	test_field_pool();
	fn test_field_initial_pool_size() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVHWFramesContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).initial_pool_size) as usize - ptr as usize
			},
			64usize,
			concat!(
				"Offset of field: ",
				stringify!(AVHWFramesContext),
				"::",
				stringify!(initial_pool_size)
			)
		);
	}
	test_field_initial_pool_size();
	fn test_field_format() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVHWFramesContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize
			},
			68usize,
			concat!(
				"Offset of field: ",
				stringify!(AVHWFramesContext),
				"::",
				stringify!(format)
			)
		);
	}
	test_field_format();
	fn test_field_sw_format() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVHWFramesContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).sw_format) as usize - ptr as usize
			},
			72usize,
			concat!(
				"Offset of field: ",
				stringify!(AVHWFramesContext),
				"::",
				stringify!(sw_format)
			)
		);
	}
	test_field_sw_format();
	fn test_field_width() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVHWFramesContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize
			},
			76usize,
			concat!(
				"Offset of field: ",
				stringify!(AVHWFramesContext),
				"::",
				stringify!(width)
			)
		);
	}
	test_field_width();
	fn test_field_height() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVHWFramesContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize
			},
			80usize,
			concat!(
				"Offset of field: ",
				stringify!(AVHWFramesContext),
				"::",
				stringify!(height)
			)
		);
	}
	test_field_height();
}
extern "C" {
	pub fn av_hwdevice_find_type_by_name(name: *const ::std::os::raw::c_char) -> AVHWDeviceType;
}
extern "C" {
	pub fn av_hwdevice_get_type_name(type_: AVHWDeviceType) -> *const ::std::os::raw::c_char;
}
extern "C" {
	pub fn av_hwdevice_iterate_types(prev: AVHWDeviceType) -> AVHWDeviceType;
}
extern "C" {
	pub fn av_hwdevice_ctx_alloc(type_: AVHWDeviceType) -> *mut AVBufferRef;
}
extern "C" {
	pub fn av_hwdevice_ctx_init(ref_: *mut AVBufferRef) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_hwdevice_ctx_create(
		device_ctx: *mut *mut AVBufferRef,
		type_: AVHWDeviceType,
		device: *const ::std::os::raw::c_char,
		opts: *mut AVDictionary,
		flags: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_hwdevice_ctx_create_derived(
		dst_ctx: *mut *mut AVBufferRef,
		type_: AVHWDeviceType,
		src_ctx: *mut AVBufferRef,
		flags: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_hwdevice_ctx_create_derived_opts(
		dst_ctx: *mut *mut AVBufferRef,
		type_: AVHWDeviceType,
		src_ctx: *mut AVBufferRef,
		options: *mut AVDictionary,
		flags: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_hwframe_ctx_alloc(device_ctx: *mut AVBufferRef) -> *mut AVBufferRef;
}
extern "C" {
	pub fn av_hwframe_ctx_init(ref_: *mut AVBufferRef) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_hwframe_get_buffer(
		hwframe_ctx: *mut AVBufferRef,
		frame: *mut AVFrame,
		flags: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_hwframe_transfer_data(
		dst: *mut AVFrame,
		src: *const AVFrame,
		flags: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
pub const AVHWFrameTransferDirection_AV_HWFRAME_TRANSFER_DIRECTION_FROM: AVHWFrameTransferDirection = 0;
pub const AVHWFrameTransferDirection_AV_HWFRAME_TRANSFER_DIRECTION_TO: AVHWFrameTransferDirection = 1;
pub type AVHWFrameTransferDirection = ::std::os::raw::c_uint;
extern "C" {
	pub fn av_hwframe_transfer_get_formats(
		hwframe_ctx: *mut AVBufferRef,
		dir: AVHWFrameTransferDirection,
		formats: *mut *mut AVPixelFormat,
		flags: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVHWFramesConstraints {
	pub valid_hw_formats: *mut AVPixelFormat,
	pub valid_sw_formats: *mut AVPixelFormat,
	pub min_width: ::std::os::raw::c_int,
	pub min_height: ::std::os::raw::c_int,
	pub max_width: ::std::os::raw::c_int,
	pub max_height: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_AVHWFramesConstraints() {
	assert_eq!(
		::std::mem::size_of::<AVHWFramesConstraints>(),
		32usize,
		concat!("Size of: ", stringify!(AVHWFramesConstraints))
	);
	assert_eq!(
		::std::mem::align_of::<AVHWFramesConstraints>(),
		8usize,
		concat!("Alignment of ", stringify!(AVHWFramesConstraints))
	);
	fn test_field_valid_hw_formats() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVHWFramesConstraints>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).valid_hw_formats) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(AVHWFramesConstraints),
				"::",
				stringify!(valid_hw_formats)
			)
		);
	}
	test_field_valid_hw_formats();
	fn test_field_valid_sw_formats() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVHWFramesConstraints>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).valid_sw_formats) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(AVHWFramesConstraints),
				"::",
				stringify!(valid_sw_formats)
			)
		);
	}
	test_field_valid_sw_formats();
	fn test_field_min_width() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVHWFramesConstraints>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).min_width) as usize - ptr as usize
			},
			16usize,
			concat!(
				"Offset of field: ",
				stringify!(AVHWFramesConstraints),
				"::",
				stringify!(min_width)
			)
		);
	}
	test_field_min_width();
	fn test_field_min_height() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVHWFramesConstraints>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).min_height) as usize - ptr as usize
			},
			20usize,
			concat!(
				"Offset of field: ",
				stringify!(AVHWFramesConstraints),
				"::",
				stringify!(min_height)
			)
		);
	}
	test_field_min_height();
	fn test_field_max_width() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVHWFramesConstraints>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).max_width) as usize - ptr as usize
			},
			24usize,
			concat!(
				"Offset of field: ",
				stringify!(AVHWFramesConstraints),
				"::",
				stringify!(max_width)
			)
		);
	}
	test_field_max_width();
	fn test_field_max_height() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVHWFramesConstraints>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).max_height) as usize - ptr as usize
			},
			28usize,
			concat!(
				"Offset of field: ",
				stringify!(AVHWFramesConstraints),
				"::",
				stringify!(max_height)
			)
		);
	}
	test_field_max_height();
}
extern "C" {
	pub fn av_hwdevice_hwconfig_alloc(device_ctx: *mut AVBufferRef) -> *mut ::std::os::raw::c_void;
}
extern "C" {
	pub fn av_hwdevice_get_hwframe_constraints(
		ref_: *mut AVBufferRef,
		hwconfig: *const ::std::os::raw::c_void,
	) -> *mut AVHWFramesConstraints;
}
extern "C" {
	pub fn av_hwframe_constraints_free(constraints: *mut *mut AVHWFramesConstraints);
}
pub const AV_HWFRAME_MAP_READ: _bindgen_ty_3 = 1;
pub const AV_HWFRAME_MAP_WRITE: _bindgen_ty_3 = 2;
pub const AV_HWFRAME_MAP_OVERWRITE: _bindgen_ty_3 = 4;
pub const AV_HWFRAME_MAP_DIRECT: _bindgen_ty_3 = 8;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
extern "C" {
	pub fn av_hwframe_map(
		dst: *mut AVFrame,
		src: *const AVFrame,
		flags: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_hwframe_ctx_create_derived(
		derived_frame_ctx: *mut *mut AVBufferRef,
		format: AVPixelFormat,
		derived_device_ctx: *mut AVBufferRef,
		source_frame_ctx: *mut AVBufferRef,
		flags: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
pub const AVCodecID_AV_CODEC_ID_NONE: AVCodecID = 0;
pub const AVCodecID_AV_CODEC_ID_MPEG1VIDEO: AVCodecID = 1;
pub const AVCodecID_AV_CODEC_ID_MPEG2VIDEO: AVCodecID = 2;
pub const AVCodecID_AV_CODEC_ID_H261: AVCodecID = 3;
pub const AVCodecID_AV_CODEC_ID_H263: AVCodecID = 4;
pub const AVCodecID_AV_CODEC_ID_RV10: AVCodecID = 5;
pub const AVCodecID_AV_CODEC_ID_RV20: AVCodecID = 6;
pub const AVCodecID_AV_CODEC_ID_MJPEG: AVCodecID = 7;
pub const AVCodecID_AV_CODEC_ID_MJPEGB: AVCodecID = 8;
pub const AVCodecID_AV_CODEC_ID_LJPEG: AVCodecID = 9;
pub const AVCodecID_AV_CODEC_ID_SP5X: AVCodecID = 10;
pub const AVCodecID_AV_CODEC_ID_JPEGLS: AVCodecID = 11;
pub const AVCodecID_AV_CODEC_ID_MPEG4: AVCodecID = 12;
pub const AVCodecID_AV_CODEC_ID_RAWVIDEO: AVCodecID = 13;
pub const AVCodecID_AV_CODEC_ID_MSMPEG4V1: AVCodecID = 14;
pub const AVCodecID_AV_CODEC_ID_MSMPEG4V2: AVCodecID = 15;
pub const AVCodecID_AV_CODEC_ID_MSMPEG4V3: AVCodecID = 16;
pub const AVCodecID_AV_CODEC_ID_WMV1: AVCodecID = 17;
pub const AVCodecID_AV_CODEC_ID_WMV2: AVCodecID = 18;
pub const AVCodecID_AV_CODEC_ID_H263P: AVCodecID = 19;
pub const AVCodecID_AV_CODEC_ID_H263I: AVCodecID = 20;
pub const AVCodecID_AV_CODEC_ID_FLV1: AVCodecID = 21;
pub const AVCodecID_AV_CODEC_ID_SVQ1: AVCodecID = 22;
pub const AVCodecID_AV_CODEC_ID_SVQ3: AVCodecID = 23;
pub const AVCodecID_AV_CODEC_ID_DVVIDEO: AVCodecID = 24;
pub const AVCodecID_AV_CODEC_ID_HUFFYUV: AVCodecID = 25;
pub const AVCodecID_AV_CODEC_ID_CYUV: AVCodecID = 26;
pub const AVCodecID_AV_CODEC_ID_H264: AVCodecID = 27;
pub const AVCodecID_AV_CODEC_ID_INDEO3: AVCodecID = 28;
pub const AVCodecID_AV_CODEC_ID_VP3: AVCodecID = 29;
pub const AVCodecID_AV_CODEC_ID_THEORA: AVCodecID = 30;
pub const AVCodecID_AV_CODEC_ID_ASV1: AVCodecID = 31;
pub const AVCodecID_AV_CODEC_ID_ASV2: AVCodecID = 32;
pub const AVCodecID_AV_CODEC_ID_FFV1: AVCodecID = 33;
pub const AVCodecID_AV_CODEC_ID_4XM: AVCodecID = 34;
pub const AVCodecID_AV_CODEC_ID_VCR1: AVCodecID = 35;
pub const AVCodecID_AV_CODEC_ID_CLJR: AVCodecID = 36;
pub const AVCodecID_AV_CODEC_ID_MDEC: AVCodecID = 37;
pub const AVCodecID_AV_CODEC_ID_ROQ: AVCodecID = 38;
pub const AVCodecID_AV_CODEC_ID_INTERPLAY_VIDEO: AVCodecID = 39;
pub const AVCodecID_AV_CODEC_ID_XAN_WC3: AVCodecID = 40;
pub const AVCodecID_AV_CODEC_ID_XAN_WC4: AVCodecID = 41;
pub const AVCodecID_AV_CODEC_ID_RPZA: AVCodecID = 42;
pub const AVCodecID_AV_CODEC_ID_CINEPAK: AVCodecID = 43;
pub const AVCodecID_AV_CODEC_ID_WS_VQA: AVCodecID = 44;
pub const AVCodecID_AV_CODEC_ID_MSRLE: AVCodecID = 45;
pub const AVCodecID_AV_CODEC_ID_MSVIDEO1: AVCodecID = 46;
pub const AVCodecID_AV_CODEC_ID_IDCIN: AVCodecID = 47;
pub const AVCodecID_AV_CODEC_ID_8BPS: AVCodecID = 48;
pub const AVCodecID_AV_CODEC_ID_SMC: AVCodecID = 49;
pub const AVCodecID_AV_CODEC_ID_FLIC: AVCodecID = 50;
pub const AVCodecID_AV_CODEC_ID_TRUEMOTION1: AVCodecID = 51;
pub const AVCodecID_AV_CODEC_ID_VMDVIDEO: AVCodecID = 52;
pub const AVCodecID_AV_CODEC_ID_MSZH: AVCodecID = 53;
pub const AVCodecID_AV_CODEC_ID_ZLIB: AVCodecID = 54;
pub const AVCodecID_AV_CODEC_ID_QTRLE: AVCodecID = 55;
pub const AVCodecID_AV_CODEC_ID_TSCC: AVCodecID = 56;
pub const AVCodecID_AV_CODEC_ID_ULTI: AVCodecID = 57;
pub const AVCodecID_AV_CODEC_ID_QDRAW: AVCodecID = 58;
pub const AVCodecID_AV_CODEC_ID_VIXL: AVCodecID = 59;
pub const AVCodecID_AV_CODEC_ID_QPEG: AVCodecID = 60;
pub const AVCodecID_AV_CODEC_ID_PNG: AVCodecID = 61;
pub const AVCodecID_AV_CODEC_ID_PPM: AVCodecID = 62;
pub const AVCodecID_AV_CODEC_ID_PBM: AVCodecID = 63;
pub const AVCodecID_AV_CODEC_ID_PGM: AVCodecID = 64;
pub const AVCodecID_AV_CODEC_ID_PGMYUV: AVCodecID = 65;
pub const AVCodecID_AV_CODEC_ID_PAM: AVCodecID = 66;
pub const AVCodecID_AV_CODEC_ID_FFVHUFF: AVCodecID = 67;
pub const AVCodecID_AV_CODEC_ID_RV30: AVCodecID = 68;
pub const AVCodecID_AV_CODEC_ID_RV40: AVCodecID = 69;
pub const AVCodecID_AV_CODEC_ID_VC1: AVCodecID = 70;
pub const AVCodecID_AV_CODEC_ID_WMV3: AVCodecID = 71;
pub const AVCodecID_AV_CODEC_ID_LOCO: AVCodecID = 72;
pub const AVCodecID_AV_CODEC_ID_WNV1: AVCodecID = 73;
pub const AVCodecID_AV_CODEC_ID_AASC: AVCodecID = 74;
pub const AVCodecID_AV_CODEC_ID_INDEO2: AVCodecID = 75;
pub const AVCodecID_AV_CODEC_ID_FRAPS: AVCodecID = 76;
pub const AVCodecID_AV_CODEC_ID_TRUEMOTION2: AVCodecID = 77;
pub const AVCodecID_AV_CODEC_ID_BMP: AVCodecID = 78;
pub const AVCodecID_AV_CODEC_ID_CSCD: AVCodecID = 79;
pub const AVCodecID_AV_CODEC_ID_MMVIDEO: AVCodecID = 80;
pub const AVCodecID_AV_CODEC_ID_ZMBV: AVCodecID = 81;
pub const AVCodecID_AV_CODEC_ID_AVS: AVCodecID = 82;
pub const AVCodecID_AV_CODEC_ID_SMACKVIDEO: AVCodecID = 83;
pub const AVCodecID_AV_CODEC_ID_NUV: AVCodecID = 84;
pub const AVCodecID_AV_CODEC_ID_KMVC: AVCodecID = 85;
pub const AVCodecID_AV_CODEC_ID_FLASHSV: AVCodecID = 86;
pub const AVCodecID_AV_CODEC_ID_CAVS: AVCodecID = 87;
pub const AVCodecID_AV_CODEC_ID_JPEG2000: AVCodecID = 88;
pub const AVCodecID_AV_CODEC_ID_VMNC: AVCodecID = 89;
pub const AVCodecID_AV_CODEC_ID_VP5: AVCodecID = 90;
pub const AVCodecID_AV_CODEC_ID_VP6: AVCodecID = 91;
pub const AVCodecID_AV_CODEC_ID_VP6F: AVCodecID = 92;
pub const AVCodecID_AV_CODEC_ID_TARGA: AVCodecID = 93;
pub const AVCodecID_AV_CODEC_ID_DSICINVIDEO: AVCodecID = 94;
pub const AVCodecID_AV_CODEC_ID_TIERTEXSEQVIDEO: AVCodecID = 95;
pub const AVCodecID_AV_CODEC_ID_TIFF: AVCodecID = 96;
pub const AVCodecID_AV_CODEC_ID_GIF: AVCodecID = 97;
pub const AVCodecID_AV_CODEC_ID_DXA: AVCodecID = 98;
pub const AVCodecID_AV_CODEC_ID_DNXHD: AVCodecID = 99;
pub const AVCodecID_AV_CODEC_ID_THP: AVCodecID = 100;
pub const AVCodecID_AV_CODEC_ID_SGI: AVCodecID = 101;
pub const AVCodecID_AV_CODEC_ID_C93: AVCodecID = 102;
pub const AVCodecID_AV_CODEC_ID_BETHSOFTVID: AVCodecID = 103;
pub const AVCodecID_AV_CODEC_ID_PTX: AVCodecID = 104;
pub const AVCodecID_AV_CODEC_ID_TXD: AVCodecID = 105;
pub const AVCodecID_AV_CODEC_ID_VP6A: AVCodecID = 106;
pub const AVCodecID_AV_CODEC_ID_AMV: AVCodecID = 107;
pub const AVCodecID_AV_CODEC_ID_VB: AVCodecID = 108;
pub const AVCodecID_AV_CODEC_ID_PCX: AVCodecID = 109;
pub const AVCodecID_AV_CODEC_ID_SUNRAST: AVCodecID = 110;
pub const AVCodecID_AV_CODEC_ID_INDEO4: AVCodecID = 111;
pub const AVCodecID_AV_CODEC_ID_INDEO5: AVCodecID = 112;
pub const AVCodecID_AV_CODEC_ID_MIMIC: AVCodecID = 113;
pub const AVCodecID_AV_CODEC_ID_RL2: AVCodecID = 114;
pub const AVCodecID_AV_CODEC_ID_ESCAPE124: AVCodecID = 115;
pub const AVCodecID_AV_CODEC_ID_DIRAC: AVCodecID = 116;
pub const AVCodecID_AV_CODEC_ID_BFI: AVCodecID = 117;
pub const AVCodecID_AV_CODEC_ID_CMV: AVCodecID = 118;
pub const AVCodecID_AV_CODEC_ID_MOTIONPIXELS: AVCodecID = 119;
pub const AVCodecID_AV_CODEC_ID_TGV: AVCodecID = 120;
pub const AVCodecID_AV_CODEC_ID_TGQ: AVCodecID = 121;
pub const AVCodecID_AV_CODEC_ID_TQI: AVCodecID = 122;
pub const AVCodecID_AV_CODEC_ID_AURA: AVCodecID = 123;
pub const AVCodecID_AV_CODEC_ID_AURA2: AVCodecID = 124;
pub const AVCodecID_AV_CODEC_ID_V210X: AVCodecID = 125;
pub const AVCodecID_AV_CODEC_ID_TMV: AVCodecID = 126;
pub const AVCodecID_AV_CODEC_ID_V210: AVCodecID = 127;
pub const AVCodecID_AV_CODEC_ID_DPX: AVCodecID = 128;
pub const AVCodecID_AV_CODEC_ID_MAD: AVCodecID = 129;
pub const AVCodecID_AV_CODEC_ID_FRWU: AVCodecID = 130;
pub const AVCodecID_AV_CODEC_ID_FLASHSV2: AVCodecID = 131;
pub const AVCodecID_AV_CODEC_ID_CDGRAPHICS: AVCodecID = 132;
pub const AVCodecID_AV_CODEC_ID_R210: AVCodecID = 133;
pub const AVCodecID_AV_CODEC_ID_ANM: AVCodecID = 134;
pub const AVCodecID_AV_CODEC_ID_BINKVIDEO: AVCodecID = 135;
pub const AVCodecID_AV_CODEC_ID_IFF_ILBM: AVCodecID = 136;
pub const AVCodecID_AV_CODEC_ID_KGV1: AVCodecID = 137;
pub const AVCodecID_AV_CODEC_ID_YOP: AVCodecID = 138;
pub const AVCodecID_AV_CODEC_ID_VP8: AVCodecID = 139;
pub const AVCodecID_AV_CODEC_ID_PICTOR: AVCodecID = 140;
pub const AVCodecID_AV_CODEC_ID_ANSI: AVCodecID = 141;
pub const AVCodecID_AV_CODEC_ID_A64_MULTI: AVCodecID = 142;
pub const AVCodecID_AV_CODEC_ID_A64_MULTI5: AVCodecID = 143;
pub const AVCodecID_AV_CODEC_ID_R10K: AVCodecID = 144;
pub const AVCodecID_AV_CODEC_ID_MXPEG: AVCodecID = 145;
pub const AVCodecID_AV_CODEC_ID_LAGARITH: AVCodecID = 146;
pub const AVCodecID_AV_CODEC_ID_PRORES: AVCodecID = 147;
pub const AVCodecID_AV_CODEC_ID_JV: AVCodecID = 148;
pub const AVCodecID_AV_CODEC_ID_DFA: AVCodecID = 149;
pub const AVCodecID_AV_CODEC_ID_WMV3IMAGE: AVCodecID = 150;
pub const AVCodecID_AV_CODEC_ID_VC1IMAGE: AVCodecID = 151;
pub const AVCodecID_AV_CODEC_ID_UTVIDEO: AVCodecID = 152;
pub const AVCodecID_AV_CODEC_ID_BMV_VIDEO: AVCodecID = 153;
pub const AVCodecID_AV_CODEC_ID_VBLE: AVCodecID = 154;
pub const AVCodecID_AV_CODEC_ID_DXTORY: AVCodecID = 155;
pub const AVCodecID_AV_CODEC_ID_V410: AVCodecID = 156;
pub const AVCodecID_AV_CODEC_ID_XWD: AVCodecID = 157;
pub const AVCodecID_AV_CODEC_ID_CDXL: AVCodecID = 158;
pub const AVCodecID_AV_CODEC_ID_XBM: AVCodecID = 159;
pub const AVCodecID_AV_CODEC_ID_ZEROCODEC: AVCodecID = 160;
pub const AVCodecID_AV_CODEC_ID_MSS1: AVCodecID = 161;
pub const AVCodecID_AV_CODEC_ID_MSA1: AVCodecID = 162;
pub const AVCodecID_AV_CODEC_ID_TSCC2: AVCodecID = 163;
pub const AVCodecID_AV_CODEC_ID_MTS2: AVCodecID = 164;
pub const AVCodecID_AV_CODEC_ID_CLLC: AVCodecID = 165;
pub const AVCodecID_AV_CODEC_ID_MSS2: AVCodecID = 166;
pub const AVCodecID_AV_CODEC_ID_VP9: AVCodecID = 167;
pub const AVCodecID_AV_CODEC_ID_AIC: AVCodecID = 168;
pub const AVCodecID_AV_CODEC_ID_ESCAPE130: AVCodecID = 169;
pub const AVCodecID_AV_CODEC_ID_G2M: AVCodecID = 170;
pub const AVCodecID_AV_CODEC_ID_WEBP: AVCodecID = 171;
pub const AVCodecID_AV_CODEC_ID_HNM4_VIDEO: AVCodecID = 172;
pub const AVCodecID_AV_CODEC_ID_HEVC: AVCodecID = 173;
pub const AVCodecID_AV_CODEC_ID_FIC: AVCodecID = 174;
pub const AVCodecID_AV_CODEC_ID_ALIAS_PIX: AVCodecID = 175;
pub const AVCodecID_AV_CODEC_ID_BRENDER_PIX: AVCodecID = 176;
pub const AVCodecID_AV_CODEC_ID_PAF_VIDEO: AVCodecID = 177;
pub const AVCodecID_AV_CODEC_ID_EXR: AVCodecID = 178;
pub const AVCodecID_AV_CODEC_ID_VP7: AVCodecID = 179;
pub const AVCodecID_AV_CODEC_ID_SANM: AVCodecID = 180;
pub const AVCodecID_AV_CODEC_ID_SGIRLE: AVCodecID = 181;
pub const AVCodecID_AV_CODEC_ID_MVC1: AVCodecID = 182;
pub const AVCodecID_AV_CODEC_ID_MVC2: AVCodecID = 183;
pub const AVCodecID_AV_CODEC_ID_HQX: AVCodecID = 184;
pub const AVCodecID_AV_CODEC_ID_TDSC: AVCodecID = 185;
pub const AVCodecID_AV_CODEC_ID_HQ_HQA: AVCodecID = 186;
pub const AVCodecID_AV_CODEC_ID_HAP: AVCodecID = 187;
pub const AVCodecID_AV_CODEC_ID_DDS: AVCodecID = 188;
pub const AVCodecID_AV_CODEC_ID_DXV: AVCodecID = 189;
pub const AVCodecID_AV_CODEC_ID_SCREENPRESSO: AVCodecID = 190;
pub const AVCodecID_AV_CODEC_ID_RSCC: AVCodecID = 191;
pub const AVCodecID_AV_CODEC_ID_AVS2: AVCodecID = 192;
pub const AVCodecID_AV_CODEC_ID_PGX: AVCodecID = 193;
pub const AVCodecID_AV_CODEC_ID_AVS3: AVCodecID = 194;
pub const AVCodecID_AV_CODEC_ID_MSP2: AVCodecID = 195;
pub const AVCodecID_AV_CODEC_ID_VVC: AVCodecID = 196;
pub const AVCodecID_AV_CODEC_ID_Y41P: AVCodecID = 197;
pub const AVCodecID_AV_CODEC_ID_AVRP: AVCodecID = 198;
pub const AVCodecID_AV_CODEC_ID_012V: AVCodecID = 199;
pub const AVCodecID_AV_CODEC_ID_AVUI: AVCodecID = 200;
pub const AVCodecID_AV_CODEC_ID_AYUV: AVCodecID = 201;
pub const AVCodecID_AV_CODEC_ID_TARGA_Y216: AVCodecID = 202;
pub const AVCodecID_AV_CODEC_ID_V308: AVCodecID = 203;
pub const AVCodecID_AV_CODEC_ID_V408: AVCodecID = 204;
pub const AVCodecID_AV_CODEC_ID_YUV4: AVCodecID = 205;
pub const AVCodecID_AV_CODEC_ID_AVRN: AVCodecID = 206;
pub const AVCodecID_AV_CODEC_ID_CPIA: AVCodecID = 207;
pub const AVCodecID_AV_CODEC_ID_XFACE: AVCodecID = 208;
pub const AVCodecID_AV_CODEC_ID_SNOW: AVCodecID = 209;
pub const AVCodecID_AV_CODEC_ID_SMVJPEG: AVCodecID = 210;
pub const AVCodecID_AV_CODEC_ID_APNG: AVCodecID = 211;
pub const AVCodecID_AV_CODEC_ID_DAALA: AVCodecID = 212;
pub const AVCodecID_AV_CODEC_ID_CFHD: AVCodecID = 213;
pub const AVCodecID_AV_CODEC_ID_TRUEMOTION2RT: AVCodecID = 214;
pub const AVCodecID_AV_CODEC_ID_M101: AVCodecID = 215;
pub const AVCodecID_AV_CODEC_ID_MAGICYUV: AVCodecID = 216;
pub const AVCodecID_AV_CODEC_ID_SHEERVIDEO: AVCodecID = 217;
pub const AVCodecID_AV_CODEC_ID_YLC: AVCodecID = 218;
pub const AVCodecID_AV_CODEC_ID_PSD: AVCodecID = 219;
pub const AVCodecID_AV_CODEC_ID_PIXLET: AVCodecID = 220;
pub const AVCodecID_AV_CODEC_ID_SPEEDHQ: AVCodecID = 221;
pub const AVCodecID_AV_CODEC_ID_FMVC: AVCodecID = 222;
pub const AVCodecID_AV_CODEC_ID_SCPR: AVCodecID = 223;
pub const AVCodecID_AV_CODEC_ID_CLEARVIDEO: AVCodecID = 224;
pub const AVCodecID_AV_CODEC_ID_XPM: AVCodecID = 225;
pub const AVCodecID_AV_CODEC_ID_AV1: AVCodecID = 226;
pub const AVCodecID_AV_CODEC_ID_BITPACKED: AVCodecID = 227;
pub const AVCodecID_AV_CODEC_ID_MSCC: AVCodecID = 228;
pub const AVCodecID_AV_CODEC_ID_SRGC: AVCodecID = 229;
pub const AVCodecID_AV_CODEC_ID_SVG: AVCodecID = 230;
pub const AVCodecID_AV_CODEC_ID_GDV: AVCodecID = 231;
pub const AVCodecID_AV_CODEC_ID_FITS: AVCodecID = 232;
pub const AVCodecID_AV_CODEC_ID_IMM4: AVCodecID = 233;
pub const AVCodecID_AV_CODEC_ID_PROSUMER: AVCodecID = 234;
pub const AVCodecID_AV_CODEC_ID_MWSC: AVCodecID = 235;
pub const AVCodecID_AV_CODEC_ID_WCMV: AVCodecID = 236;
pub const AVCodecID_AV_CODEC_ID_RASC: AVCodecID = 237;
pub const AVCodecID_AV_CODEC_ID_HYMT: AVCodecID = 238;
pub const AVCodecID_AV_CODEC_ID_ARBC: AVCodecID = 239;
pub const AVCodecID_AV_CODEC_ID_AGM: AVCodecID = 240;
pub const AVCodecID_AV_CODEC_ID_LSCR: AVCodecID = 241;
pub const AVCodecID_AV_CODEC_ID_VP4: AVCodecID = 242;
pub const AVCodecID_AV_CODEC_ID_IMM5: AVCodecID = 243;
pub const AVCodecID_AV_CODEC_ID_MVDV: AVCodecID = 244;
pub const AVCodecID_AV_CODEC_ID_MVHA: AVCodecID = 245;
pub const AVCodecID_AV_CODEC_ID_CDTOONS: AVCodecID = 246;
pub const AVCodecID_AV_CODEC_ID_MV30: AVCodecID = 247;
pub const AVCodecID_AV_CODEC_ID_NOTCHLC: AVCodecID = 248;
pub const AVCodecID_AV_CODEC_ID_PFM: AVCodecID = 249;
pub const AVCodecID_AV_CODEC_ID_MOBICLIP: AVCodecID = 250;
pub const AVCodecID_AV_CODEC_ID_PHOTOCD: AVCodecID = 251;
pub const AVCodecID_AV_CODEC_ID_IPU: AVCodecID = 252;
pub const AVCodecID_AV_CODEC_ID_ARGO: AVCodecID = 253;
pub const AVCodecID_AV_CODEC_ID_CRI: AVCodecID = 254;
pub const AVCodecID_AV_CODEC_ID_SIMBIOSIS_IMX: AVCodecID = 255;
pub const AVCodecID_AV_CODEC_ID_SGA_VIDEO: AVCodecID = 256;
pub const AVCodecID_AV_CODEC_ID_GEM: AVCodecID = 257;
pub const AVCodecID_AV_CODEC_ID_VBN: AVCodecID = 258;
pub const AVCodecID_AV_CODEC_ID_JPEGXL: AVCodecID = 259;
pub const AVCodecID_AV_CODEC_ID_QOI: AVCodecID = 260;
pub const AVCodecID_AV_CODEC_ID_PHM: AVCodecID = 261;
pub const AVCodecID_AV_CODEC_ID_FIRST_AUDIO: AVCodecID = 65536;
pub const AVCodecID_AV_CODEC_ID_PCM_S16LE: AVCodecID = 65536;
pub const AVCodecID_AV_CODEC_ID_PCM_S16BE: AVCodecID = 65537;
pub const AVCodecID_AV_CODEC_ID_PCM_U16LE: AVCodecID = 65538;
pub const AVCodecID_AV_CODEC_ID_PCM_U16BE: AVCodecID = 65539;
pub const AVCodecID_AV_CODEC_ID_PCM_S8: AVCodecID = 65540;
pub const AVCodecID_AV_CODEC_ID_PCM_U8: AVCodecID = 65541;
pub const AVCodecID_AV_CODEC_ID_PCM_MULAW: AVCodecID = 65542;
pub const AVCodecID_AV_CODEC_ID_PCM_ALAW: AVCodecID = 65543;
pub const AVCodecID_AV_CODEC_ID_PCM_S32LE: AVCodecID = 65544;
pub const AVCodecID_AV_CODEC_ID_PCM_S32BE: AVCodecID = 65545;
pub const AVCodecID_AV_CODEC_ID_PCM_U32LE: AVCodecID = 65546;
pub const AVCodecID_AV_CODEC_ID_PCM_U32BE: AVCodecID = 65547;
pub const AVCodecID_AV_CODEC_ID_PCM_S24LE: AVCodecID = 65548;
pub const AVCodecID_AV_CODEC_ID_PCM_S24BE: AVCodecID = 65549;
pub const AVCodecID_AV_CODEC_ID_PCM_U24LE: AVCodecID = 65550;
pub const AVCodecID_AV_CODEC_ID_PCM_U24BE: AVCodecID = 65551;
pub const AVCodecID_AV_CODEC_ID_PCM_S24DAUD: AVCodecID = 65552;
pub const AVCodecID_AV_CODEC_ID_PCM_ZORK: AVCodecID = 65553;
pub const AVCodecID_AV_CODEC_ID_PCM_S16LE_PLANAR: AVCodecID = 65554;
pub const AVCodecID_AV_CODEC_ID_PCM_DVD: AVCodecID = 65555;
pub const AVCodecID_AV_CODEC_ID_PCM_F32BE: AVCodecID = 65556;
pub const AVCodecID_AV_CODEC_ID_PCM_F32LE: AVCodecID = 65557;
pub const AVCodecID_AV_CODEC_ID_PCM_F64BE: AVCodecID = 65558;
pub const AVCodecID_AV_CODEC_ID_PCM_F64LE: AVCodecID = 65559;
pub const AVCodecID_AV_CODEC_ID_PCM_BLURAY: AVCodecID = 65560;
pub const AVCodecID_AV_CODEC_ID_PCM_LXF: AVCodecID = 65561;
pub const AVCodecID_AV_CODEC_ID_S302M: AVCodecID = 65562;
pub const AVCodecID_AV_CODEC_ID_PCM_S8_PLANAR: AVCodecID = 65563;
pub const AVCodecID_AV_CODEC_ID_PCM_S24LE_PLANAR: AVCodecID = 65564;
pub const AVCodecID_AV_CODEC_ID_PCM_S32LE_PLANAR: AVCodecID = 65565;
pub const AVCodecID_AV_CODEC_ID_PCM_S16BE_PLANAR: AVCodecID = 65566;
pub const AVCodecID_AV_CODEC_ID_PCM_S64LE: AVCodecID = 65567;
pub const AVCodecID_AV_CODEC_ID_PCM_S64BE: AVCodecID = 65568;
pub const AVCodecID_AV_CODEC_ID_PCM_F16LE: AVCodecID = 65569;
pub const AVCodecID_AV_CODEC_ID_PCM_F24LE: AVCodecID = 65570;
pub const AVCodecID_AV_CODEC_ID_PCM_VIDC: AVCodecID = 65571;
pub const AVCodecID_AV_CODEC_ID_PCM_SGA: AVCodecID = 65572;
pub const AVCodecID_AV_CODEC_ID_ADPCM_IMA_QT: AVCodecID = 69632;
pub const AVCodecID_AV_CODEC_ID_ADPCM_IMA_WAV: AVCodecID = 69633;
pub const AVCodecID_AV_CODEC_ID_ADPCM_IMA_DK3: AVCodecID = 69634;
pub const AVCodecID_AV_CODEC_ID_ADPCM_IMA_DK4: AVCodecID = 69635;
pub const AVCodecID_AV_CODEC_ID_ADPCM_IMA_WS: AVCodecID = 69636;
pub const AVCodecID_AV_CODEC_ID_ADPCM_IMA_SMJPEG: AVCodecID = 69637;
pub const AVCodecID_AV_CODEC_ID_ADPCM_MS: AVCodecID = 69638;
pub const AVCodecID_AV_CODEC_ID_ADPCM_4XM: AVCodecID = 69639;
pub const AVCodecID_AV_CODEC_ID_ADPCM_XA: AVCodecID = 69640;
pub const AVCodecID_AV_CODEC_ID_ADPCM_ADX: AVCodecID = 69641;
pub const AVCodecID_AV_CODEC_ID_ADPCM_EA: AVCodecID = 69642;
pub const AVCodecID_AV_CODEC_ID_ADPCM_G726: AVCodecID = 69643;
pub const AVCodecID_AV_CODEC_ID_ADPCM_CT: AVCodecID = 69644;
pub const AVCodecID_AV_CODEC_ID_ADPCM_SWF: AVCodecID = 69645;
pub const AVCodecID_AV_CODEC_ID_ADPCM_YAMAHA: AVCodecID = 69646;
pub const AVCodecID_AV_CODEC_ID_ADPCM_SBPRO_4: AVCodecID = 69647;
pub const AVCodecID_AV_CODEC_ID_ADPCM_SBPRO_3: AVCodecID = 69648;
pub const AVCodecID_AV_CODEC_ID_ADPCM_SBPRO_2: AVCodecID = 69649;
pub const AVCodecID_AV_CODEC_ID_ADPCM_THP: AVCodecID = 69650;
pub const AVCodecID_AV_CODEC_ID_ADPCM_IMA_AMV: AVCodecID = 69651;
pub const AVCodecID_AV_CODEC_ID_ADPCM_EA_R1: AVCodecID = 69652;
pub const AVCodecID_AV_CODEC_ID_ADPCM_EA_R3: AVCodecID = 69653;
pub const AVCodecID_AV_CODEC_ID_ADPCM_EA_R2: AVCodecID = 69654;
pub const AVCodecID_AV_CODEC_ID_ADPCM_IMA_EA_SEAD: AVCodecID = 69655;
pub const AVCodecID_AV_CODEC_ID_ADPCM_IMA_EA_EACS: AVCodecID = 69656;
pub const AVCodecID_AV_CODEC_ID_ADPCM_EA_XAS: AVCodecID = 69657;
pub const AVCodecID_AV_CODEC_ID_ADPCM_EA_MAXIS_XA: AVCodecID = 69658;
pub const AVCodecID_AV_CODEC_ID_ADPCM_IMA_ISS: AVCodecID = 69659;
pub const AVCodecID_AV_CODEC_ID_ADPCM_G722: AVCodecID = 69660;
pub const AVCodecID_AV_CODEC_ID_ADPCM_IMA_APC: AVCodecID = 69661;
pub const AVCodecID_AV_CODEC_ID_ADPCM_VIMA: AVCodecID = 69662;
pub const AVCodecID_AV_CODEC_ID_ADPCM_AFC: AVCodecID = 69663;
pub const AVCodecID_AV_CODEC_ID_ADPCM_IMA_OKI: AVCodecID = 69664;
pub const AVCodecID_AV_CODEC_ID_ADPCM_DTK: AVCodecID = 69665;
pub const AVCodecID_AV_CODEC_ID_ADPCM_IMA_RAD: AVCodecID = 69666;
pub const AVCodecID_AV_CODEC_ID_ADPCM_G726LE: AVCodecID = 69667;
pub const AVCodecID_AV_CODEC_ID_ADPCM_THP_LE: AVCodecID = 69668;
pub const AVCodecID_AV_CODEC_ID_ADPCM_PSX: AVCodecID = 69669;
pub const AVCodecID_AV_CODEC_ID_ADPCM_AICA: AVCodecID = 69670;
pub const AVCodecID_AV_CODEC_ID_ADPCM_IMA_DAT4: AVCodecID = 69671;
pub const AVCodecID_AV_CODEC_ID_ADPCM_MTAF: AVCodecID = 69672;
pub const AVCodecID_AV_CODEC_ID_ADPCM_AGM: AVCodecID = 69673;
pub const AVCodecID_AV_CODEC_ID_ADPCM_ARGO: AVCodecID = 69674;
pub const AVCodecID_AV_CODEC_ID_ADPCM_IMA_SSI: AVCodecID = 69675;
pub const AVCodecID_AV_CODEC_ID_ADPCM_ZORK: AVCodecID = 69676;
pub const AVCodecID_AV_CODEC_ID_ADPCM_IMA_APM: AVCodecID = 69677;
pub const AVCodecID_AV_CODEC_ID_ADPCM_IMA_ALP: AVCodecID = 69678;
pub const AVCodecID_AV_CODEC_ID_ADPCM_IMA_MTF: AVCodecID = 69679;
pub const AVCodecID_AV_CODEC_ID_ADPCM_IMA_CUNNING: AVCodecID = 69680;
pub const AVCodecID_AV_CODEC_ID_ADPCM_IMA_MOFLEX: AVCodecID = 69681;
pub const AVCodecID_AV_CODEC_ID_ADPCM_IMA_ACORN: AVCodecID = 69682;
pub const AVCodecID_AV_CODEC_ID_AMR_NB: AVCodecID = 73728;
pub const AVCodecID_AV_CODEC_ID_AMR_WB: AVCodecID = 73729;
pub const AVCodecID_AV_CODEC_ID_RA_144: AVCodecID = 77824;
pub const AVCodecID_AV_CODEC_ID_RA_288: AVCodecID = 77825;
pub const AVCodecID_AV_CODEC_ID_ROQ_DPCM: AVCodecID = 81920;
pub const AVCodecID_AV_CODEC_ID_INTERPLAY_DPCM: AVCodecID = 81921;
pub const AVCodecID_AV_CODEC_ID_XAN_DPCM: AVCodecID = 81922;
pub const AVCodecID_AV_CODEC_ID_SOL_DPCM: AVCodecID = 81923;
pub const AVCodecID_AV_CODEC_ID_SDX2_DPCM: AVCodecID = 81924;
pub const AVCodecID_AV_CODEC_ID_GREMLIN_DPCM: AVCodecID = 81925;
pub const AVCodecID_AV_CODEC_ID_DERF_DPCM: AVCodecID = 81926;
pub const AVCodecID_AV_CODEC_ID_MP2: AVCodecID = 86016;
pub const AVCodecID_AV_CODEC_ID_MP3: AVCodecID = 86017;
pub const AVCodecID_AV_CODEC_ID_AAC: AVCodecID = 86018;
pub const AVCodecID_AV_CODEC_ID_AC3: AVCodecID = 86019;
pub const AVCodecID_AV_CODEC_ID_DTS: AVCodecID = 86020;
pub const AVCodecID_AV_CODEC_ID_VORBIS: AVCodecID = 86021;
pub const AVCodecID_AV_CODEC_ID_DVAUDIO: AVCodecID = 86022;
pub const AVCodecID_AV_CODEC_ID_WMAV1: AVCodecID = 86023;
pub const AVCodecID_AV_CODEC_ID_WMAV2: AVCodecID = 86024;
pub const AVCodecID_AV_CODEC_ID_MACE3: AVCodecID = 86025;
pub const AVCodecID_AV_CODEC_ID_MACE6: AVCodecID = 86026;
pub const AVCodecID_AV_CODEC_ID_VMDAUDIO: AVCodecID = 86027;
pub const AVCodecID_AV_CODEC_ID_FLAC: AVCodecID = 86028;
pub const AVCodecID_AV_CODEC_ID_MP3ADU: AVCodecID = 86029;
pub const AVCodecID_AV_CODEC_ID_MP3ON4: AVCodecID = 86030;
pub const AVCodecID_AV_CODEC_ID_SHORTEN: AVCodecID = 86031;
pub const AVCodecID_AV_CODEC_ID_ALAC: AVCodecID = 86032;
pub const AVCodecID_AV_CODEC_ID_WESTWOOD_SND1: AVCodecID = 86033;
pub const AVCodecID_AV_CODEC_ID_GSM: AVCodecID = 86034;
pub const AVCodecID_AV_CODEC_ID_QDM2: AVCodecID = 86035;
pub const AVCodecID_AV_CODEC_ID_COOK: AVCodecID = 86036;
pub const AVCodecID_AV_CODEC_ID_TRUESPEECH: AVCodecID = 86037;
pub const AVCodecID_AV_CODEC_ID_TTA: AVCodecID = 86038;
pub const AVCodecID_AV_CODEC_ID_SMACKAUDIO: AVCodecID = 86039;
pub const AVCodecID_AV_CODEC_ID_QCELP: AVCodecID = 86040;
pub const AVCodecID_AV_CODEC_ID_WAVPACK: AVCodecID = 86041;
pub const AVCodecID_AV_CODEC_ID_DSICINAUDIO: AVCodecID = 86042;
pub const AVCodecID_AV_CODEC_ID_IMC: AVCodecID = 86043;
pub const AVCodecID_AV_CODEC_ID_MUSEPACK7: AVCodecID = 86044;
pub const AVCodecID_AV_CODEC_ID_MLP: AVCodecID = 86045;
pub const AVCodecID_AV_CODEC_ID_GSM_MS: AVCodecID = 86046;
pub const AVCodecID_AV_CODEC_ID_ATRAC3: AVCodecID = 86047;
pub const AVCodecID_AV_CODEC_ID_APE: AVCodecID = 86048;
pub const AVCodecID_AV_CODEC_ID_NELLYMOSER: AVCodecID = 86049;
pub const AVCodecID_AV_CODEC_ID_MUSEPACK8: AVCodecID = 86050;
pub const AVCodecID_AV_CODEC_ID_SPEEX: AVCodecID = 86051;
pub const AVCodecID_AV_CODEC_ID_WMAVOICE: AVCodecID = 86052;
pub const AVCodecID_AV_CODEC_ID_WMAPRO: AVCodecID = 86053;
pub const AVCodecID_AV_CODEC_ID_WMALOSSLESS: AVCodecID = 86054;
pub const AVCodecID_AV_CODEC_ID_ATRAC3P: AVCodecID = 86055;
pub const AVCodecID_AV_CODEC_ID_EAC3: AVCodecID = 86056;
pub const AVCodecID_AV_CODEC_ID_SIPR: AVCodecID = 86057;
pub const AVCodecID_AV_CODEC_ID_MP1: AVCodecID = 86058;
pub const AVCodecID_AV_CODEC_ID_TWINVQ: AVCodecID = 86059;
pub const AVCodecID_AV_CODEC_ID_TRUEHD: AVCodecID = 86060;
pub const AVCodecID_AV_CODEC_ID_MP4ALS: AVCodecID = 86061;
pub const AVCodecID_AV_CODEC_ID_ATRAC1: AVCodecID = 86062;
pub const AVCodecID_AV_CODEC_ID_BINKAUDIO_RDFT: AVCodecID = 86063;
pub const AVCodecID_AV_CODEC_ID_BINKAUDIO_DCT: AVCodecID = 86064;
pub const AVCodecID_AV_CODEC_ID_AAC_LATM: AVCodecID = 86065;
pub const AVCodecID_AV_CODEC_ID_QDMC: AVCodecID = 86066;
pub const AVCodecID_AV_CODEC_ID_CELT: AVCodecID = 86067;
pub const AVCodecID_AV_CODEC_ID_G723_1: AVCodecID = 86068;
pub const AVCodecID_AV_CODEC_ID_G729: AVCodecID = 86069;
pub const AVCodecID_AV_CODEC_ID_8SVX_EXP: AVCodecID = 86070;
pub const AVCodecID_AV_CODEC_ID_8SVX_FIB: AVCodecID = 86071;
pub const AVCodecID_AV_CODEC_ID_BMV_AUDIO: AVCodecID = 86072;
pub const AVCodecID_AV_CODEC_ID_RALF: AVCodecID = 86073;
pub const AVCodecID_AV_CODEC_ID_IAC: AVCodecID = 86074;
pub const AVCodecID_AV_CODEC_ID_ILBC: AVCodecID = 86075;
pub const AVCodecID_AV_CODEC_ID_OPUS: AVCodecID = 86076;
pub const AVCodecID_AV_CODEC_ID_COMFORT_NOISE: AVCodecID = 86077;
pub const AVCodecID_AV_CODEC_ID_TAK: AVCodecID = 86078;
pub const AVCodecID_AV_CODEC_ID_METASOUND: AVCodecID = 86079;
pub const AVCodecID_AV_CODEC_ID_PAF_AUDIO: AVCodecID = 86080;
pub const AVCodecID_AV_CODEC_ID_ON2AVC: AVCodecID = 86081;
pub const AVCodecID_AV_CODEC_ID_DSS_SP: AVCodecID = 86082;
pub const AVCodecID_AV_CODEC_ID_CODEC2: AVCodecID = 86083;
pub const AVCodecID_AV_CODEC_ID_FFWAVESYNTH: AVCodecID = 86084;
pub const AVCodecID_AV_CODEC_ID_SONIC: AVCodecID = 86085;
pub const AVCodecID_AV_CODEC_ID_SONIC_LS: AVCodecID = 86086;
pub const AVCodecID_AV_CODEC_ID_EVRC: AVCodecID = 86087;
pub const AVCodecID_AV_CODEC_ID_SMV: AVCodecID = 86088;
pub const AVCodecID_AV_CODEC_ID_DSD_LSBF: AVCodecID = 86089;
pub const AVCodecID_AV_CODEC_ID_DSD_MSBF: AVCodecID = 86090;
pub const AVCodecID_AV_CODEC_ID_DSD_LSBF_PLANAR: AVCodecID = 86091;
pub const AVCodecID_AV_CODEC_ID_DSD_MSBF_PLANAR: AVCodecID = 86092;
pub const AVCodecID_AV_CODEC_ID_4GV: AVCodecID = 86093;
pub const AVCodecID_AV_CODEC_ID_INTERPLAY_ACM: AVCodecID = 86094;
pub const AVCodecID_AV_CODEC_ID_XMA1: AVCodecID = 86095;
pub const AVCodecID_AV_CODEC_ID_XMA2: AVCodecID = 86096;
pub const AVCodecID_AV_CODEC_ID_DST: AVCodecID = 86097;
pub const AVCodecID_AV_CODEC_ID_ATRAC3AL: AVCodecID = 86098;
pub const AVCodecID_AV_CODEC_ID_ATRAC3PAL: AVCodecID = 86099;
pub const AVCodecID_AV_CODEC_ID_DOLBY_E: AVCodecID = 86100;
pub const AVCodecID_AV_CODEC_ID_APTX: AVCodecID = 86101;
pub const AVCodecID_AV_CODEC_ID_APTX_HD: AVCodecID = 86102;
pub const AVCodecID_AV_CODEC_ID_SBC: AVCodecID = 86103;
pub const AVCodecID_AV_CODEC_ID_ATRAC9: AVCodecID = 86104;
pub const AVCodecID_AV_CODEC_ID_HCOM: AVCodecID = 86105;
pub const AVCodecID_AV_CODEC_ID_ACELP_KELVIN: AVCodecID = 86106;
pub const AVCodecID_AV_CODEC_ID_MPEGH_3D_AUDIO: AVCodecID = 86107;
pub const AVCodecID_AV_CODEC_ID_SIREN: AVCodecID = 86108;
pub const AVCodecID_AV_CODEC_ID_HCA: AVCodecID = 86109;
pub const AVCodecID_AV_CODEC_ID_FASTAUDIO: AVCodecID = 86110;
pub const AVCodecID_AV_CODEC_ID_MSNSIREN: AVCodecID = 86111;
pub const AVCodecID_AV_CODEC_ID_DFPWM: AVCodecID = 86112;
pub const AVCodecID_AV_CODEC_ID_FIRST_SUBTITLE: AVCodecID = 94208;
pub const AVCodecID_AV_CODEC_ID_DVD_SUBTITLE: AVCodecID = 94208;
pub const AVCodecID_AV_CODEC_ID_DVB_SUBTITLE: AVCodecID = 94209;
pub const AVCodecID_AV_CODEC_ID_TEXT: AVCodecID = 94210;
pub const AVCodecID_AV_CODEC_ID_XSUB: AVCodecID = 94211;
pub const AVCodecID_AV_CODEC_ID_SSA: AVCodecID = 94212;
pub const AVCodecID_AV_CODEC_ID_MOV_TEXT: AVCodecID = 94213;
pub const AVCodecID_AV_CODEC_ID_HDMV_PGS_SUBTITLE: AVCodecID = 94214;
pub const AVCodecID_AV_CODEC_ID_DVB_TELETEXT: AVCodecID = 94215;
pub const AVCodecID_AV_CODEC_ID_SRT: AVCodecID = 94216;
pub const AVCodecID_AV_CODEC_ID_MICRODVD: AVCodecID = 94217;
pub const AVCodecID_AV_CODEC_ID_EIA_608: AVCodecID = 94218;
pub const AVCodecID_AV_CODEC_ID_JACOSUB: AVCodecID = 94219;
pub const AVCodecID_AV_CODEC_ID_SAMI: AVCodecID = 94220;
pub const AVCodecID_AV_CODEC_ID_REALTEXT: AVCodecID = 94221;
pub const AVCodecID_AV_CODEC_ID_STL: AVCodecID = 94222;
pub const AVCodecID_AV_CODEC_ID_SUBVIEWER1: AVCodecID = 94223;
pub const AVCodecID_AV_CODEC_ID_SUBVIEWER: AVCodecID = 94224;
pub const AVCodecID_AV_CODEC_ID_SUBRIP: AVCodecID = 94225;
pub const AVCodecID_AV_CODEC_ID_WEBVTT: AVCodecID = 94226;
pub const AVCodecID_AV_CODEC_ID_MPL2: AVCodecID = 94227;
pub const AVCodecID_AV_CODEC_ID_VPLAYER: AVCodecID = 94228;
pub const AVCodecID_AV_CODEC_ID_PJS: AVCodecID = 94229;
pub const AVCodecID_AV_CODEC_ID_ASS: AVCodecID = 94230;
pub const AVCodecID_AV_CODEC_ID_HDMV_TEXT_SUBTITLE: AVCodecID = 94231;
pub const AVCodecID_AV_CODEC_ID_TTML: AVCodecID = 94232;
pub const AVCodecID_AV_CODEC_ID_ARIB_CAPTION: AVCodecID = 94233;
pub const AVCodecID_AV_CODEC_ID_FIRST_UNKNOWN: AVCodecID = 98304;
pub const AVCodecID_AV_CODEC_ID_TTF: AVCodecID = 98304;
pub const AVCodecID_AV_CODEC_ID_SCTE_35: AVCodecID = 98305;
pub const AVCodecID_AV_CODEC_ID_EPG: AVCodecID = 98306;
pub const AVCodecID_AV_CODEC_ID_BINTEXT: AVCodecID = 98307;
pub const AVCodecID_AV_CODEC_ID_XBIN: AVCodecID = 98308;
pub const AVCodecID_AV_CODEC_ID_IDF: AVCodecID = 98309;
pub const AVCodecID_AV_CODEC_ID_OTF: AVCodecID = 98310;
pub const AVCodecID_AV_CODEC_ID_SMPTE_KLV: AVCodecID = 98311;
pub const AVCodecID_AV_CODEC_ID_DVD_NAV: AVCodecID = 98312;
pub const AVCodecID_AV_CODEC_ID_TIMED_ID3: AVCodecID = 98313;
pub const AVCodecID_AV_CODEC_ID_BIN_DATA: AVCodecID = 98314;
pub const AVCodecID_AV_CODEC_ID_PROBE: AVCodecID = 102400;
pub const AVCodecID_AV_CODEC_ID_MPEG2TS: AVCodecID = 131072;
pub const AVCodecID_AV_CODEC_ID_MPEG4SYSTEMS: AVCodecID = 131073;
pub const AVCodecID_AV_CODEC_ID_FFMETADATA: AVCodecID = 135168;
pub const AVCodecID_AV_CODEC_ID_WRAPPED_AVFRAME: AVCodecID = 135169;
pub type AVCodecID = ::std::os::raw::c_uint;
extern "C" {
	pub fn avcodec_get_type(codec_id: AVCodecID) -> AVMediaType;
}
extern "C" {
	pub fn avcodec_get_name(id: AVCodecID) -> *const ::std::os::raw::c_char;
}
extern "C" {
	pub fn av_get_bits_per_sample(codec_id: AVCodecID) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_get_exact_bits_per_sample(codec_id: AVCodecID) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avcodec_profile_name(codec_id: AVCodecID, profile: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
	pub fn av_get_pcm_codec(fmt: AVSampleFormat, be: ::std::os::raw::c_int) -> AVCodecID;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVProfile {
	pub profile: ::std::os::raw::c_int,
	pub name: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_AVProfile() {
	assert_eq!(
		::std::mem::size_of::<AVProfile>(),
		16usize,
		concat!("Size of: ", stringify!(AVProfile))
	);
	assert_eq!(
		::std::mem::align_of::<AVProfile>(),
		8usize,
		concat!("Alignment of ", stringify!(AVProfile))
	);
	fn test_field_profile() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVProfile>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).profile) as usize - ptr as usize
			},
			0usize,
			concat!("Offset of field: ", stringify!(AVProfile), "::", stringify!(profile))
		);
	}
	test_field_profile();
	fn test_field_name() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVProfile>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
			},
			8usize,
			concat!("Offset of field: ", stringify!(AVProfile), "::", stringify!(name))
		);
	}
	test_field_name();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVCodec {
	pub name: *const ::std::os::raw::c_char,
	pub long_name: *const ::std::os::raw::c_char,
	pub type_: AVMediaType,
	pub id: AVCodecID,
	pub capabilities: ::std::os::raw::c_int,
	pub max_lowres: u8,
	pub supported_framerates: *const AVRational,
	pub pix_fmts: *const AVPixelFormat,
	pub supported_samplerates: *const ::std::os::raw::c_int,
	pub sample_fmts: *const AVSampleFormat,
	pub channel_layouts: *const u64,
	pub priv_class: *const AVClass,
	pub profiles: *const AVProfile,
	pub wrapper_name: *const ::std::os::raw::c_char,
	pub ch_layouts: *const AVChannelLayout,
}
#[test]
fn bindgen_test_layout_AVCodec() {
	assert_eq!(
		::std::mem::size_of::<AVCodec>(),
		104usize,
		concat!("Size of: ", stringify!(AVCodec))
	);
	assert_eq!(
		::std::mem::align_of::<AVCodec>(),
		8usize,
		concat!("Alignment of ", stringify!(AVCodec))
	);
	fn test_field_name() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodec>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
			},
			0usize,
			concat!("Offset of field: ", stringify!(AVCodec), "::", stringify!(name))
		);
	}
	test_field_name();
	fn test_field_long_name() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodec>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).long_name) as usize - ptr as usize
			},
			8usize,
			concat!("Offset of field: ", stringify!(AVCodec), "::", stringify!(long_name))
		);
	}
	test_field_long_name();
	fn test_field_type() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodec>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
			},
			16usize,
			concat!("Offset of field: ", stringify!(AVCodec), "::", stringify!(type_))
		);
	}
	test_field_type();
	fn test_field_id() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodec>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize
			},
			20usize,
			concat!("Offset of field: ", stringify!(AVCodec), "::", stringify!(id))
		);
	}
	test_field_id();
	fn test_field_capabilities() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodec>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).capabilities) as usize - ptr as usize
			},
			24usize,
			concat!("Offset of field: ", stringify!(AVCodec), "::", stringify!(capabilities))
		);
	}
	test_field_capabilities();
	fn test_field_max_lowres() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodec>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).max_lowres) as usize - ptr as usize
			},
			28usize,
			concat!("Offset of field: ", stringify!(AVCodec), "::", stringify!(max_lowres))
		);
	}
	test_field_max_lowres();
	fn test_field_supported_framerates() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodec>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).supported_framerates) as usize - ptr as usize
			},
			32usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodec),
				"::",
				stringify!(supported_framerates)
			)
		);
	}
	test_field_supported_framerates();
	fn test_field_pix_fmts() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodec>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).pix_fmts) as usize - ptr as usize
			},
			40usize,
			concat!("Offset of field: ", stringify!(AVCodec), "::", stringify!(pix_fmts))
		);
	}
	test_field_pix_fmts();
	fn test_field_supported_samplerates() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodec>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).supported_samplerates) as usize - ptr as usize
			},
			48usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodec),
				"::",
				stringify!(supported_samplerates)
			)
		);
	}
	test_field_supported_samplerates();
	fn test_field_sample_fmts() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodec>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).sample_fmts) as usize - ptr as usize
			},
			56usize,
			concat!("Offset of field: ", stringify!(AVCodec), "::", stringify!(sample_fmts))
		);
	}
	test_field_sample_fmts();
	fn test_field_channel_layouts() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodec>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).channel_layouts) as usize - ptr as usize
			},
			64usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodec),
				"::",
				stringify!(channel_layouts)
			)
		);
	}
	test_field_channel_layouts();
	fn test_field_priv_class() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodec>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).priv_class) as usize - ptr as usize
			},
			72usize,
			concat!("Offset of field: ", stringify!(AVCodec), "::", stringify!(priv_class))
		);
	}
	test_field_priv_class();
	fn test_field_profiles() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodec>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).profiles) as usize - ptr as usize
			},
			80usize,
			concat!("Offset of field: ", stringify!(AVCodec), "::", stringify!(profiles))
		);
	}
	test_field_profiles();
	fn test_field_wrapper_name() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodec>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).wrapper_name) as usize - ptr as usize
			},
			88usize,
			concat!("Offset of field: ", stringify!(AVCodec), "::", stringify!(wrapper_name))
		);
	}
	test_field_wrapper_name();
	fn test_field_ch_layouts() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodec>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).ch_layouts) as usize - ptr as usize
			},
			96usize,
			concat!("Offset of field: ", stringify!(AVCodec), "::", stringify!(ch_layouts))
		);
	}
	test_field_ch_layouts();
}
extern "C" {
	pub fn av_codec_iterate(opaque: *mut *mut ::std::os::raw::c_void) -> *const AVCodec;
}
extern "C" {
	pub fn avcodec_find_decoder(id: AVCodecID) -> *const AVCodec;
}
extern "C" {
	pub fn avcodec_find_decoder_by_name(name: *const ::std::os::raw::c_char) -> *const AVCodec;
}
extern "C" {
	pub fn avcodec_find_encoder(id: AVCodecID) -> *const AVCodec;
}
extern "C" {
	pub fn avcodec_find_encoder_by_name(name: *const ::std::os::raw::c_char) -> *const AVCodec;
}
extern "C" {
	pub fn av_codec_is_encoder(codec: *const AVCodec) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_codec_is_decoder(codec: *const AVCodec) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_get_profile_name(codec: *const AVCodec, profile: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
pub const AV_CODEC_HW_CONFIG_METHOD_HW_DEVICE_CTX: _bindgen_ty_4 = 1;
pub const AV_CODEC_HW_CONFIG_METHOD_HW_FRAMES_CTX: _bindgen_ty_4 = 2;
pub const AV_CODEC_HW_CONFIG_METHOD_INTERNAL: _bindgen_ty_4 = 4;
pub const AV_CODEC_HW_CONFIG_METHOD_AD_HOC: _bindgen_ty_4 = 8;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVCodecHWConfig {
	pub pix_fmt: AVPixelFormat,
	pub methods: ::std::os::raw::c_int,
	pub device_type: AVHWDeviceType,
}
#[test]
fn bindgen_test_layout_AVCodecHWConfig() {
	assert_eq!(
		::std::mem::size_of::<AVCodecHWConfig>(),
		12usize,
		concat!("Size of: ", stringify!(AVCodecHWConfig))
	);
	assert_eq!(
		::std::mem::align_of::<AVCodecHWConfig>(),
		4usize,
		concat!("Alignment of ", stringify!(AVCodecHWConfig))
	);
	fn test_field_pix_fmt() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecHWConfig>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).pix_fmt) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecHWConfig),
				"::",
				stringify!(pix_fmt)
			)
		);
	}
	test_field_pix_fmt();
	fn test_field_methods() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecHWConfig>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).methods) as usize - ptr as usize
			},
			4usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecHWConfig),
				"::",
				stringify!(methods)
			)
		);
	}
	test_field_methods();
	fn test_field_device_type() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecHWConfig>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).device_type) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecHWConfig),
				"::",
				stringify!(device_type)
			)
		);
	}
	test_field_device_type();
}
extern "C" {
	pub fn avcodec_get_hw_config(codec: *const AVCodec, index: ::std::os::raw::c_int) -> *const AVCodecHWConfig;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVCodecDescriptor {
	pub id: AVCodecID,
	pub type_: AVMediaType,
	pub name: *const ::std::os::raw::c_char,
	pub long_name: *const ::std::os::raw::c_char,
	pub props: ::std::os::raw::c_int,
	pub mime_types: *const *const ::std::os::raw::c_char,
	pub profiles: *const AVProfile,
}
#[test]
fn bindgen_test_layout_AVCodecDescriptor() {
	assert_eq!(
		::std::mem::size_of::<AVCodecDescriptor>(),
		48usize,
		concat!("Size of: ", stringify!(AVCodecDescriptor))
	);
	assert_eq!(
		::std::mem::align_of::<AVCodecDescriptor>(),
		8usize,
		concat!("Alignment of ", stringify!(AVCodecDescriptor))
	);
	fn test_field_id() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecDescriptor>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize
			},
			0usize,
			concat!("Offset of field: ", stringify!(AVCodecDescriptor), "::", stringify!(id))
		);
	}
	test_field_id();
	fn test_field_type() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecDescriptor>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
			},
			4usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecDescriptor),
				"::",
				stringify!(type_)
			)
		);
	}
	test_field_type();
	fn test_field_name() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecDescriptor>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecDescriptor),
				"::",
				stringify!(name)
			)
		);
	}
	test_field_name();
	fn test_field_long_name() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecDescriptor>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).long_name) as usize - ptr as usize
			},
			16usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecDescriptor),
				"::",
				stringify!(long_name)
			)
		);
	}
	test_field_long_name();
	fn test_field_props() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecDescriptor>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).props) as usize - ptr as usize
			},
			24usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecDescriptor),
				"::",
				stringify!(props)
			)
		);
	}
	test_field_props();
	fn test_field_mime_types() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecDescriptor>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).mime_types) as usize - ptr as usize
			},
			32usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecDescriptor),
				"::",
				stringify!(mime_types)
			)
		);
	}
	test_field_mime_types();
	fn test_field_profiles() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecDescriptor>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).profiles) as usize - ptr as usize
			},
			40usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecDescriptor),
				"::",
				stringify!(profiles)
			)
		);
	}
	test_field_profiles();
}
extern "C" {
	pub fn avcodec_descriptor_get(id: AVCodecID) -> *const AVCodecDescriptor;
}
extern "C" {
	pub fn avcodec_descriptor_next(prev: *const AVCodecDescriptor) -> *const AVCodecDescriptor;
}
extern "C" {
	pub fn avcodec_descriptor_get_by_name(name: *const ::std::os::raw::c_char) -> *const AVCodecDescriptor;
}
pub const AVFieldOrder_AV_FIELD_UNKNOWN: AVFieldOrder = 0;
pub const AVFieldOrder_AV_FIELD_PROGRESSIVE: AVFieldOrder = 1;
pub const AVFieldOrder_AV_FIELD_TT: AVFieldOrder = 2;
pub const AVFieldOrder_AV_FIELD_BB: AVFieldOrder = 3;
pub const AVFieldOrder_AV_FIELD_TB: AVFieldOrder = 4;
pub const AVFieldOrder_AV_FIELD_BT: AVFieldOrder = 5;
pub type AVFieldOrder = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AVCodecParameters {
	pub codec_type: AVMediaType,
	pub codec_id: AVCodecID,
	pub codec_tag: u32,
	pub extradata: *mut u8,
	pub extradata_size: ::std::os::raw::c_int,
	pub format: ::std::os::raw::c_int,
	pub bit_rate: i64,
	pub bits_per_coded_sample: ::std::os::raw::c_int,
	pub bits_per_raw_sample: ::std::os::raw::c_int,
	pub profile: ::std::os::raw::c_int,
	pub level: ::std::os::raw::c_int,
	pub width: ::std::os::raw::c_int,
	pub height: ::std::os::raw::c_int,
	pub sample_aspect_ratio: AVRational,
	pub field_order: AVFieldOrder,
	pub color_range: AVColorRange,
	pub color_primaries: AVColorPrimaries,
	pub color_trc: AVColorTransferCharacteristic,
	pub color_space: AVColorSpace,
	pub chroma_location: AVChromaLocation,
	pub video_delay: ::std::os::raw::c_int,
	pub channel_layout: u64,
	pub channels: ::std::os::raw::c_int,
	pub sample_rate: ::std::os::raw::c_int,
	pub block_align: ::std::os::raw::c_int,
	pub frame_size: ::std::os::raw::c_int,
	pub initial_padding: ::std::os::raw::c_int,
	pub trailing_padding: ::std::os::raw::c_int,
	pub seek_preroll: ::std::os::raw::c_int,
	pub ch_layout: AVChannelLayout,
}
#[test]
fn bindgen_test_layout_AVCodecParameters() {
	assert_eq!(
		::std::mem::size_of::<AVCodecParameters>(),
		168usize,
		concat!("Size of: ", stringify!(AVCodecParameters))
	);
	assert_eq!(
		::std::mem::align_of::<AVCodecParameters>(),
		8usize,
		concat!("Alignment of ", stringify!(AVCodecParameters))
	);
	fn test_field_codec_type() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParameters>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).codec_type) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParameters),
				"::",
				stringify!(codec_type)
			)
		);
	}
	test_field_codec_type();
	fn test_field_codec_id() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParameters>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).codec_id) as usize - ptr as usize
			},
			4usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParameters),
				"::",
				stringify!(codec_id)
			)
		);
	}
	test_field_codec_id();
	fn test_field_codec_tag() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParameters>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).codec_tag) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParameters),
				"::",
				stringify!(codec_tag)
			)
		);
	}
	test_field_codec_tag();
	fn test_field_extradata() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParameters>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).extradata) as usize - ptr as usize
			},
			16usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParameters),
				"::",
				stringify!(extradata)
			)
		);
	}
	test_field_extradata();
	fn test_field_extradata_size() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParameters>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).extradata_size) as usize - ptr as usize
			},
			24usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParameters),
				"::",
				stringify!(extradata_size)
			)
		);
	}
	test_field_extradata_size();
	fn test_field_format() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParameters>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize
			},
			28usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParameters),
				"::",
				stringify!(format)
			)
		);
	}
	test_field_format();
	fn test_field_bit_rate() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParameters>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).bit_rate) as usize - ptr as usize
			},
			32usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParameters),
				"::",
				stringify!(bit_rate)
			)
		);
	}
	test_field_bit_rate();
	fn test_field_bits_per_coded_sample() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParameters>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).bits_per_coded_sample) as usize - ptr as usize
			},
			40usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParameters),
				"::",
				stringify!(bits_per_coded_sample)
			)
		);
	}
	test_field_bits_per_coded_sample();
	fn test_field_bits_per_raw_sample() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParameters>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).bits_per_raw_sample) as usize - ptr as usize
			},
			44usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParameters),
				"::",
				stringify!(bits_per_raw_sample)
			)
		);
	}
	test_field_bits_per_raw_sample();
	fn test_field_profile() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParameters>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).profile) as usize - ptr as usize
			},
			48usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParameters),
				"::",
				stringify!(profile)
			)
		);
	}
	test_field_profile();
	fn test_field_level() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParameters>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).level) as usize - ptr as usize
			},
			52usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParameters),
				"::",
				stringify!(level)
			)
		);
	}
	test_field_level();
	fn test_field_width() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParameters>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize
			},
			56usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParameters),
				"::",
				stringify!(width)
			)
		);
	}
	test_field_width();
	fn test_field_height() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParameters>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize
			},
			60usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParameters),
				"::",
				stringify!(height)
			)
		);
	}
	test_field_height();
	fn test_field_sample_aspect_ratio() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParameters>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).sample_aspect_ratio) as usize - ptr as usize
			},
			64usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParameters),
				"::",
				stringify!(sample_aspect_ratio)
			)
		);
	}
	test_field_sample_aspect_ratio();
	fn test_field_field_order() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParameters>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).field_order) as usize - ptr as usize
			},
			72usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParameters),
				"::",
				stringify!(field_order)
			)
		);
	}
	test_field_field_order();
	fn test_field_color_range() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParameters>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).color_range) as usize - ptr as usize
			},
			76usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParameters),
				"::",
				stringify!(color_range)
			)
		);
	}
	test_field_color_range();
	fn test_field_color_primaries() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParameters>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).color_primaries) as usize - ptr as usize
			},
			80usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParameters),
				"::",
				stringify!(color_primaries)
			)
		);
	}
	test_field_color_primaries();
	fn test_field_color_trc() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParameters>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).color_trc) as usize - ptr as usize
			},
			84usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParameters),
				"::",
				stringify!(color_trc)
			)
		);
	}
	test_field_color_trc();
	fn test_field_color_space() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParameters>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).color_space) as usize - ptr as usize
			},
			88usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParameters),
				"::",
				stringify!(color_space)
			)
		);
	}
	test_field_color_space();
	fn test_field_chroma_location() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParameters>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).chroma_location) as usize - ptr as usize
			},
			92usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParameters),
				"::",
				stringify!(chroma_location)
			)
		);
	}
	test_field_chroma_location();
	fn test_field_video_delay() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParameters>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).video_delay) as usize - ptr as usize
			},
			96usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParameters),
				"::",
				stringify!(video_delay)
			)
		);
	}
	test_field_video_delay();
	fn test_field_channel_layout() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParameters>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).channel_layout) as usize - ptr as usize
			},
			104usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParameters),
				"::",
				stringify!(channel_layout)
			)
		);
	}
	test_field_channel_layout();
	fn test_field_channels() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParameters>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize
			},
			112usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParameters),
				"::",
				stringify!(channels)
			)
		);
	}
	test_field_channels();
	fn test_field_sample_rate() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParameters>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).sample_rate) as usize - ptr as usize
			},
			116usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParameters),
				"::",
				stringify!(sample_rate)
			)
		);
	}
	test_field_sample_rate();
	fn test_field_block_align() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParameters>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).block_align) as usize - ptr as usize
			},
			120usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParameters),
				"::",
				stringify!(block_align)
			)
		);
	}
	test_field_block_align();
	fn test_field_frame_size() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParameters>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).frame_size) as usize - ptr as usize
			},
			124usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParameters),
				"::",
				stringify!(frame_size)
			)
		);
	}
	test_field_frame_size();
	fn test_field_initial_padding() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParameters>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).initial_padding) as usize - ptr as usize
			},
			128usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParameters),
				"::",
				stringify!(initial_padding)
			)
		);
	}
	test_field_initial_padding();
	fn test_field_trailing_padding() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParameters>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).trailing_padding) as usize - ptr as usize
			},
			132usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParameters),
				"::",
				stringify!(trailing_padding)
			)
		);
	}
	test_field_trailing_padding();
	fn test_field_seek_preroll() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParameters>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).seek_preroll) as usize - ptr as usize
			},
			136usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParameters),
				"::",
				stringify!(seek_preroll)
			)
		);
	}
	test_field_seek_preroll();
	fn test_field_ch_layout() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParameters>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).ch_layout) as usize - ptr as usize
			},
			144usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParameters),
				"::",
				stringify!(ch_layout)
			)
		);
	}
	test_field_ch_layout();
}
extern "C" {
	pub fn avcodec_parameters_alloc() -> *mut AVCodecParameters;
}
extern "C" {
	pub fn avcodec_parameters_free(par: *mut *mut AVCodecParameters);
}
extern "C" {
	pub fn avcodec_parameters_copy(dst: *mut AVCodecParameters, src: *const AVCodecParameters)
		-> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_get_audio_frame_duration2(
		par: *mut AVCodecParameters,
		frame_bytes: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
pub const AVDiscard_AVDISCARD_NONE: AVDiscard = -16;
pub const AVDiscard_AVDISCARD_DEFAULT: AVDiscard = 0;
pub const AVDiscard_AVDISCARD_NONREF: AVDiscard = 8;
pub const AVDiscard_AVDISCARD_BIDIR: AVDiscard = 16;
pub const AVDiscard_AVDISCARD_NONINTRA: AVDiscard = 24;
pub const AVDiscard_AVDISCARD_NONKEY: AVDiscard = 32;
pub const AVDiscard_AVDISCARD_ALL: AVDiscard = 48;
pub type AVDiscard = ::std::os::raw::c_int;
pub const AVAudioServiceType_AV_AUDIO_SERVICE_TYPE_MAIN: AVAudioServiceType = 0;
pub const AVAudioServiceType_AV_AUDIO_SERVICE_TYPE_EFFECTS: AVAudioServiceType = 1;
pub const AVAudioServiceType_AV_AUDIO_SERVICE_TYPE_VISUALLY_IMPAIRED: AVAudioServiceType = 2;
pub const AVAudioServiceType_AV_AUDIO_SERVICE_TYPE_HEARING_IMPAIRED: AVAudioServiceType = 3;
pub const AVAudioServiceType_AV_AUDIO_SERVICE_TYPE_DIALOGUE: AVAudioServiceType = 4;
pub const AVAudioServiceType_AV_AUDIO_SERVICE_TYPE_COMMENTARY: AVAudioServiceType = 5;
pub const AVAudioServiceType_AV_AUDIO_SERVICE_TYPE_EMERGENCY: AVAudioServiceType = 6;
pub const AVAudioServiceType_AV_AUDIO_SERVICE_TYPE_VOICE_OVER: AVAudioServiceType = 7;
pub const AVAudioServiceType_AV_AUDIO_SERVICE_TYPE_KARAOKE: AVAudioServiceType = 8;
pub const AVAudioServiceType_AV_AUDIO_SERVICE_TYPE_NB: AVAudioServiceType = 9;
pub type AVAudioServiceType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVPanScan {
	pub id: ::std::os::raw::c_int,
	pub width: ::std::os::raw::c_int,
	pub height: ::std::os::raw::c_int,
	pub position: [[i16; 2usize]; 3usize],
}
#[test]
fn bindgen_test_layout_AVPanScan() {
	assert_eq!(
		::std::mem::size_of::<AVPanScan>(),
		24usize,
		concat!("Size of: ", stringify!(AVPanScan))
	);
	assert_eq!(
		::std::mem::align_of::<AVPanScan>(),
		4usize,
		concat!("Alignment of ", stringify!(AVPanScan))
	);
	fn test_field_id() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVPanScan>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize
			},
			0usize,
			concat!("Offset of field: ", stringify!(AVPanScan), "::", stringify!(id))
		);
	}
	test_field_id();
	fn test_field_width() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVPanScan>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize
			},
			4usize,
			concat!("Offset of field: ", stringify!(AVPanScan), "::", stringify!(width))
		);
	}
	test_field_width();
	fn test_field_height() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVPanScan>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize
			},
			8usize,
			concat!("Offset of field: ", stringify!(AVPanScan), "::", stringify!(height))
		);
	}
	test_field_height();
	fn test_field_position() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVPanScan>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).position) as usize - ptr as usize
			},
			12usize,
			concat!("Offset of field: ", stringify!(AVPanScan), "::", stringify!(position))
		);
	}
	test_field_position();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVCPBProperties {
	pub max_bitrate: i64,
	pub min_bitrate: i64,
	pub avg_bitrate: i64,
	pub buffer_size: i64,
	pub vbv_delay: u64,
}
#[test]
fn bindgen_test_layout_AVCPBProperties() {
	assert_eq!(
		::std::mem::size_of::<AVCPBProperties>(),
		40usize,
		concat!("Size of: ", stringify!(AVCPBProperties))
	);
	assert_eq!(
		::std::mem::align_of::<AVCPBProperties>(),
		8usize,
		concat!("Alignment of ", stringify!(AVCPBProperties))
	);
	fn test_field_max_bitrate() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCPBProperties>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).max_bitrate) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCPBProperties),
				"::",
				stringify!(max_bitrate)
			)
		);
	}
	test_field_max_bitrate();
	fn test_field_min_bitrate() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCPBProperties>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).min_bitrate) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCPBProperties),
				"::",
				stringify!(min_bitrate)
			)
		);
	}
	test_field_min_bitrate();
	fn test_field_avg_bitrate() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCPBProperties>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).avg_bitrate) as usize - ptr as usize
			},
			16usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCPBProperties),
				"::",
				stringify!(avg_bitrate)
			)
		);
	}
	test_field_avg_bitrate();
	fn test_field_buffer_size() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCPBProperties>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).buffer_size) as usize - ptr as usize
			},
			24usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCPBProperties),
				"::",
				stringify!(buffer_size)
			)
		);
	}
	test_field_buffer_size();
	fn test_field_vbv_delay() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCPBProperties>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).vbv_delay) as usize - ptr as usize
			},
			32usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCPBProperties),
				"::",
				stringify!(vbv_delay)
			)
		);
	}
	test_field_vbv_delay();
}
extern "C" {
	pub fn av_cpb_properties_alloc(size: *mut size_t) -> *mut AVCPBProperties;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVProducerReferenceTime {
	pub wallclock: i64,
	pub flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_AVProducerReferenceTime() {
	assert_eq!(
		::std::mem::size_of::<AVProducerReferenceTime>(),
		16usize,
		concat!("Size of: ", stringify!(AVProducerReferenceTime))
	);
	assert_eq!(
		::std::mem::align_of::<AVProducerReferenceTime>(),
		8usize,
		concat!("Alignment of ", stringify!(AVProducerReferenceTime))
	);
	fn test_field_wallclock() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVProducerReferenceTime>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).wallclock) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(AVProducerReferenceTime),
				"::",
				stringify!(wallclock)
			)
		);
	}
	test_field_wallclock();
	fn test_field_flags() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVProducerReferenceTime>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(AVProducerReferenceTime),
				"::",
				stringify!(flags)
			)
		);
	}
	test_field_flags();
}
extern "C" {
	pub fn av_xiphlacing(s: *mut ::std::os::raw::c_uchar, v: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
pub const AVPacketSideDataType_AV_PKT_DATA_PALETTE: AVPacketSideDataType = 0;
pub const AVPacketSideDataType_AV_PKT_DATA_NEW_EXTRADATA: AVPacketSideDataType = 1;
pub const AVPacketSideDataType_AV_PKT_DATA_PARAM_CHANGE: AVPacketSideDataType = 2;
pub const AVPacketSideDataType_AV_PKT_DATA_H263_MB_INFO: AVPacketSideDataType = 3;
pub const AVPacketSideDataType_AV_PKT_DATA_REPLAYGAIN: AVPacketSideDataType = 4;
pub const AVPacketSideDataType_AV_PKT_DATA_DISPLAYMATRIX: AVPacketSideDataType = 5;
pub const AVPacketSideDataType_AV_PKT_DATA_STEREO3D: AVPacketSideDataType = 6;
pub const AVPacketSideDataType_AV_PKT_DATA_AUDIO_SERVICE_TYPE: AVPacketSideDataType = 7;
pub const AVPacketSideDataType_AV_PKT_DATA_QUALITY_STATS: AVPacketSideDataType = 8;
pub const AVPacketSideDataType_AV_PKT_DATA_FALLBACK_TRACK: AVPacketSideDataType = 9;
pub const AVPacketSideDataType_AV_PKT_DATA_CPB_PROPERTIES: AVPacketSideDataType = 10;
pub const AVPacketSideDataType_AV_PKT_DATA_SKIP_SAMPLES: AVPacketSideDataType = 11;
pub const AVPacketSideDataType_AV_PKT_DATA_JP_DUALMONO: AVPacketSideDataType = 12;
pub const AVPacketSideDataType_AV_PKT_DATA_STRINGS_METADATA: AVPacketSideDataType = 13;
pub const AVPacketSideDataType_AV_PKT_DATA_SUBTITLE_POSITION: AVPacketSideDataType = 14;
pub const AVPacketSideDataType_AV_PKT_DATA_MATROSKA_BLOCKADDITIONAL: AVPacketSideDataType = 15;
pub const AVPacketSideDataType_AV_PKT_DATA_WEBVTT_IDENTIFIER: AVPacketSideDataType = 16;
pub const AVPacketSideDataType_AV_PKT_DATA_WEBVTT_SETTINGS: AVPacketSideDataType = 17;
pub const AVPacketSideDataType_AV_PKT_DATA_METADATA_UPDATE: AVPacketSideDataType = 18;
pub const AVPacketSideDataType_AV_PKT_DATA_MPEGTS_STREAM_ID: AVPacketSideDataType = 19;
pub const AVPacketSideDataType_AV_PKT_DATA_MASTERING_DISPLAY_METADATA: AVPacketSideDataType = 20;
pub const AVPacketSideDataType_AV_PKT_DATA_SPHERICAL: AVPacketSideDataType = 21;
pub const AVPacketSideDataType_AV_PKT_DATA_CONTENT_LIGHT_LEVEL: AVPacketSideDataType = 22;
pub const AVPacketSideDataType_AV_PKT_DATA_A53_CC: AVPacketSideDataType = 23;
pub const AVPacketSideDataType_AV_PKT_DATA_ENCRYPTION_INIT_INFO: AVPacketSideDataType = 24;
pub const AVPacketSideDataType_AV_PKT_DATA_ENCRYPTION_INFO: AVPacketSideDataType = 25;
pub const AVPacketSideDataType_AV_PKT_DATA_AFD: AVPacketSideDataType = 26;
pub const AVPacketSideDataType_AV_PKT_DATA_PRFT: AVPacketSideDataType = 27;
pub const AVPacketSideDataType_AV_PKT_DATA_ICC_PROFILE: AVPacketSideDataType = 28;
pub const AVPacketSideDataType_AV_PKT_DATA_DOVI_CONF: AVPacketSideDataType = 29;
pub const AVPacketSideDataType_AV_PKT_DATA_S12M_TIMECODE: AVPacketSideDataType = 30;
pub const AVPacketSideDataType_AV_PKT_DATA_DYNAMIC_HDR10_PLUS: AVPacketSideDataType = 31;
pub const AVPacketSideDataType_AV_PKT_DATA_NB: AVPacketSideDataType = 32;
pub type AVPacketSideDataType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVPacketSideData {
	pub data: *mut u8,
	pub size: size_t,
	pub type_: AVPacketSideDataType,
}
#[test]
fn bindgen_test_layout_AVPacketSideData() {
	assert_eq!(
		::std::mem::size_of::<AVPacketSideData>(),
		24usize,
		concat!("Size of: ", stringify!(AVPacketSideData))
	);
	assert_eq!(
		::std::mem::align_of::<AVPacketSideData>(),
		8usize,
		concat!("Alignment of ", stringify!(AVPacketSideData))
	);
	fn test_field_data() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVPacketSideData>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(AVPacketSideData),
				"::",
				stringify!(data)
			)
		);
	}
	test_field_data();
	fn test_field_size() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVPacketSideData>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(AVPacketSideData),
				"::",
				stringify!(size)
			)
		);
	}
	test_field_size();
	fn test_field_type() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVPacketSideData>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
			},
			16usize,
			concat!(
				"Offset of field: ",
				stringify!(AVPacketSideData),
				"::",
				stringify!(type_)
			)
		);
	}
	test_field_type();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVPacket {
	pub buf: *mut AVBufferRef,
	pub pts: i64,
	pub dts: i64,
	pub data: *mut u8,
	pub size: ::std::os::raw::c_int,
	pub stream_index: ::std::os::raw::c_int,
	pub flags: ::std::os::raw::c_int,
	pub side_data: *mut AVPacketSideData,
	pub side_data_elems: ::std::os::raw::c_int,
	pub duration: i64,
	pub pos: i64,
	pub opaque: *mut ::std::os::raw::c_void,
	pub opaque_ref: *mut AVBufferRef,
	pub time_base: AVRational,
}
#[test]
fn bindgen_test_layout_AVPacket() {
	assert_eq!(
		::std::mem::size_of::<AVPacket>(),
		104usize,
		concat!("Size of: ", stringify!(AVPacket))
	);
	assert_eq!(
		::std::mem::align_of::<AVPacket>(),
		8usize,
		concat!("Alignment of ", stringify!(AVPacket))
	);
	fn test_field_buf() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVPacket>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize
			},
			0usize,
			concat!("Offset of field: ", stringify!(AVPacket), "::", stringify!(buf))
		);
	}
	test_field_buf();
	fn test_field_pts() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVPacket>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).pts) as usize - ptr as usize
			},
			8usize,
			concat!("Offset of field: ", stringify!(AVPacket), "::", stringify!(pts))
		);
	}
	test_field_pts();
	fn test_field_dts() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVPacket>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).dts) as usize - ptr as usize
			},
			16usize,
			concat!("Offset of field: ", stringify!(AVPacket), "::", stringify!(dts))
		);
	}
	test_field_dts();
	fn test_field_data() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVPacket>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
			},
			24usize,
			concat!("Offset of field: ", stringify!(AVPacket), "::", stringify!(data))
		);
	}
	test_field_data();
	fn test_field_size() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVPacket>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
			},
			32usize,
			concat!("Offset of field: ", stringify!(AVPacket), "::", stringify!(size))
		);
	}
	test_field_size();
	fn test_field_stream_index() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVPacket>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).stream_index) as usize - ptr as usize
			},
			36usize,
			concat!(
				"Offset of field: ",
				stringify!(AVPacket),
				"::",
				stringify!(stream_index)
			)
		);
	}
	test_field_stream_index();
	fn test_field_flags() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVPacket>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
			},
			40usize,
			concat!("Offset of field: ", stringify!(AVPacket), "::", stringify!(flags))
		);
	}
	test_field_flags();
	fn test_field_side_data() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVPacket>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).side_data) as usize - ptr as usize
			},
			48usize,
			concat!("Offset of field: ", stringify!(AVPacket), "::", stringify!(side_data))
		);
	}
	test_field_side_data();
	fn test_field_side_data_elems() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVPacket>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).side_data_elems) as usize - ptr as usize
			},
			56usize,
			concat!(
				"Offset of field: ",
				stringify!(AVPacket),
				"::",
				stringify!(side_data_elems)
			)
		);
	}
	test_field_side_data_elems();
	fn test_field_duration() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVPacket>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).duration) as usize - ptr as usize
			},
			64usize,
			concat!("Offset of field: ", stringify!(AVPacket), "::", stringify!(duration))
		);
	}
	test_field_duration();
	fn test_field_pos() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVPacket>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).pos) as usize - ptr as usize
			},
			72usize,
			concat!("Offset of field: ", stringify!(AVPacket), "::", stringify!(pos))
		);
	}
	test_field_pos();
	fn test_field_opaque() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVPacket>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).opaque) as usize - ptr as usize
			},
			80usize,
			concat!("Offset of field: ", stringify!(AVPacket), "::", stringify!(opaque))
		);
	}
	test_field_opaque();
	fn test_field_opaque_ref() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVPacket>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).opaque_ref) as usize - ptr as usize
			},
			88usize,
			concat!("Offset of field: ", stringify!(AVPacket), "::", stringify!(opaque_ref))
		);
	}
	test_field_opaque_ref();
	fn test_field_time_base() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVPacket>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).time_base) as usize - ptr as usize
			},
			96usize,
			concat!("Offset of field: ", stringify!(AVPacket), "::", stringify!(time_base))
		);
	}
	test_field_time_base();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVPacketList {
	pub pkt: AVPacket,
	pub next: *mut AVPacketList,
}
#[test]
fn bindgen_test_layout_AVPacketList() {
	assert_eq!(
		::std::mem::size_of::<AVPacketList>(),
		112usize,
		concat!("Size of: ", stringify!(AVPacketList))
	);
	assert_eq!(
		::std::mem::align_of::<AVPacketList>(),
		8usize,
		concat!("Alignment of ", stringify!(AVPacketList))
	);
	fn test_field_pkt() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVPacketList>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).pkt) as usize - ptr as usize
			},
			0usize,
			concat!("Offset of field: ", stringify!(AVPacketList), "::", stringify!(pkt))
		);
	}
	test_field_pkt();
	fn test_field_next() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVPacketList>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize
			},
			104usize,
			concat!("Offset of field: ", stringify!(AVPacketList), "::", stringify!(next))
		);
	}
	test_field_next();
}
pub const AVSideDataParamChangeFlags_AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_COUNT: AVSideDataParamChangeFlags = 1;
pub const AVSideDataParamChangeFlags_AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_LAYOUT: AVSideDataParamChangeFlags = 2;
pub const AVSideDataParamChangeFlags_AV_SIDE_DATA_PARAM_CHANGE_SAMPLE_RATE: AVSideDataParamChangeFlags = 4;
pub const AVSideDataParamChangeFlags_AV_SIDE_DATA_PARAM_CHANGE_DIMENSIONS: AVSideDataParamChangeFlags = 8;
pub type AVSideDataParamChangeFlags = ::std::os::raw::c_uint;
extern "C" {
	pub fn av_packet_alloc() -> *mut AVPacket;
}
extern "C" {
	pub fn av_packet_clone(src: *const AVPacket) -> *mut AVPacket;
}
extern "C" {
	pub fn av_packet_free(pkt: *mut *mut AVPacket);
}
extern "C" {
	pub fn av_init_packet(pkt: *mut AVPacket);
}
extern "C" {
	pub fn av_new_packet(pkt: *mut AVPacket, size: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_shrink_packet(pkt: *mut AVPacket, size: ::std::os::raw::c_int);
}
extern "C" {
	pub fn av_grow_packet(pkt: *mut AVPacket, grow_by: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_packet_from_data(pkt: *mut AVPacket, data: *mut u8, size: ::std::os::raw::c_int)
		-> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_packet_new_side_data(pkt: *mut AVPacket, type_: AVPacketSideDataType, size: size_t) -> *mut u8;
}
extern "C" {
	pub fn av_packet_add_side_data(
		pkt: *mut AVPacket,
		type_: AVPacketSideDataType,
		data: *mut u8,
		size: size_t,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_packet_shrink_side_data(
		pkt: *mut AVPacket,
		type_: AVPacketSideDataType,
		size: size_t,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_packet_get_side_data(pkt: *const AVPacket, type_: AVPacketSideDataType, size: *mut size_t) -> *mut u8;
}
extern "C" {
	pub fn av_packet_side_data_name(type_: AVPacketSideDataType) -> *const ::std::os::raw::c_char;
}
extern "C" {
	pub fn av_packet_pack_dictionary(dict: *mut AVDictionary, size: *mut size_t) -> *mut u8;
}
extern "C" {
	pub fn av_packet_unpack_dictionary(
		data: *const u8,
		size: size_t,
		dict: *mut *mut AVDictionary,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_packet_free_side_data(pkt: *mut AVPacket);
}
extern "C" {
	pub fn av_packet_ref(dst: *mut AVPacket, src: *const AVPacket) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_packet_unref(pkt: *mut AVPacket);
}
extern "C" {
	pub fn av_packet_move_ref(dst: *mut AVPacket, src: *mut AVPacket);
}
extern "C" {
	pub fn av_packet_copy_props(dst: *mut AVPacket, src: *const AVPacket) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_packet_make_refcounted(pkt: *mut AVPacket) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_packet_make_writable(pkt: *mut AVPacket) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_packet_rescale_ts(pkt: *mut AVPacket, tb_src: AVRational, tb_dst: AVRational);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RcOverride {
	pub start_frame: ::std::os::raw::c_int,
	pub end_frame: ::std::os::raw::c_int,
	pub qscale: ::std::os::raw::c_int,
	pub quality_factor: f32,
}
#[test]
fn bindgen_test_layout_RcOverride() {
	assert_eq!(
		::std::mem::size_of::<RcOverride>(),
		16usize,
		concat!("Size of: ", stringify!(RcOverride))
	);
	assert_eq!(
		::std::mem::align_of::<RcOverride>(),
		4usize,
		concat!("Alignment of ", stringify!(RcOverride))
	);
	fn test_field_start_frame() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<RcOverride>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).start_frame) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(RcOverride),
				"::",
				stringify!(start_frame)
			)
		);
	}
	test_field_start_frame();
	fn test_field_end_frame() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<RcOverride>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).end_frame) as usize - ptr as usize
			},
			4usize,
			concat!("Offset of field: ", stringify!(RcOverride), "::", stringify!(end_frame))
		);
	}
	test_field_end_frame();
	fn test_field_qscale() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<RcOverride>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).qscale) as usize - ptr as usize
			},
			8usize,
			concat!("Offset of field: ", stringify!(RcOverride), "::", stringify!(qscale))
		);
	}
	test_field_qscale();
	fn test_field_quality_factor() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<RcOverride>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).quality_factor) as usize - ptr as usize
			},
			12usize,
			concat!(
				"Offset of field: ",
				stringify!(RcOverride),
				"::",
				stringify!(quality_factor)
			)
		);
	}
	test_field_quality_factor();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVCodecInternal {
	_unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AVCodecContext {
	pub av_class: *const AVClass,
	pub log_level_offset: ::std::os::raw::c_int,
	pub codec_type: AVMediaType,
	pub codec: *const AVCodec,
	pub codec_id: AVCodecID,
	pub codec_tag: ::std::os::raw::c_uint,
	pub priv_data: *mut ::std::os::raw::c_void,
	pub internal: *mut AVCodecInternal,
	pub opaque: *mut ::std::os::raw::c_void,
	pub bit_rate: i64,
	pub bit_rate_tolerance: ::std::os::raw::c_int,
	pub global_quality: ::std::os::raw::c_int,
	pub compression_level: ::std::os::raw::c_int,
	pub flags: ::std::os::raw::c_int,
	pub flags2: ::std::os::raw::c_int,
	pub extradata: *mut u8,
	pub extradata_size: ::std::os::raw::c_int,
	pub time_base: AVRational,
	pub ticks_per_frame: ::std::os::raw::c_int,
	pub delay: ::std::os::raw::c_int,
	pub width: ::std::os::raw::c_int,
	pub height: ::std::os::raw::c_int,
	pub coded_width: ::std::os::raw::c_int,
	pub coded_height: ::std::os::raw::c_int,
	pub gop_size: ::std::os::raw::c_int,
	pub pix_fmt: AVPixelFormat,
	pub draw_horiz_band: ::std::option::Option<
		unsafe extern "C" fn(
			s: *mut AVCodecContext,
			src: *const AVFrame,
			offset: *mut ::std::os::raw::c_int,
			y: ::std::os::raw::c_int,
			type_: ::std::os::raw::c_int,
			height: ::std::os::raw::c_int,
		),
	>,
	pub get_format:
		::std::option::Option<unsafe extern "C" fn(s: *mut AVCodecContext, fmt: *const AVPixelFormat) -> AVPixelFormat>,
	pub max_b_frames: ::std::os::raw::c_int,
	pub b_quant_factor: f32,
	pub b_quant_offset: f32,
	pub has_b_frames: ::std::os::raw::c_int,
	pub i_quant_factor: f32,
	pub i_quant_offset: f32,
	pub lumi_masking: f32,
	pub temporal_cplx_masking: f32,
	pub spatial_cplx_masking: f32,
	pub p_masking: f32,
	pub dark_masking: f32,
	pub slice_count: ::std::os::raw::c_int,
	pub slice_offset: *mut ::std::os::raw::c_int,
	pub sample_aspect_ratio: AVRational,
	pub me_cmp: ::std::os::raw::c_int,
	pub me_sub_cmp: ::std::os::raw::c_int,
	pub mb_cmp: ::std::os::raw::c_int,
	pub ildct_cmp: ::std::os::raw::c_int,
	pub dia_size: ::std::os::raw::c_int,
	pub last_predictor_count: ::std::os::raw::c_int,
	pub me_pre_cmp: ::std::os::raw::c_int,
	pub pre_dia_size: ::std::os::raw::c_int,
	pub me_subpel_quality: ::std::os::raw::c_int,
	pub me_range: ::std::os::raw::c_int,
	pub slice_flags: ::std::os::raw::c_int,
	pub mb_decision: ::std::os::raw::c_int,
	pub intra_matrix: *mut u16,
	pub inter_matrix: *mut u16,
	pub intra_dc_precision: ::std::os::raw::c_int,
	pub skip_top: ::std::os::raw::c_int,
	pub skip_bottom: ::std::os::raw::c_int,
	pub mb_lmin: ::std::os::raw::c_int,
	pub mb_lmax: ::std::os::raw::c_int,
	pub bidir_refine: ::std::os::raw::c_int,
	pub keyint_min: ::std::os::raw::c_int,
	pub refs: ::std::os::raw::c_int,
	pub mv0_threshold: ::std::os::raw::c_int,
	pub color_primaries: AVColorPrimaries,
	pub color_trc: AVColorTransferCharacteristic,
	pub colorspace: AVColorSpace,
	pub color_range: AVColorRange,
	pub chroma_sample_location: AVChromaLocation,
	pub slices: ::std::os::raw::c_int,
	pub field_order: AVFieldOrder,
	pub sample_rate: ::std::os::raw::c_int,
	pub channels: ::std::os::raw::c_int,
	pub sample_fmt: AVSampleFormat,
	pub frame_size: ::std::os::raw::c_int,
	pub frame_number: ::std::os::raw::c_int,
	pub block_align: ::std::os::raw::c_int,
	pub cutoff: ::std::os::raw::c_int,
	pub channel_layout: u64,
	pub request_channel_layout: u64,
	pub audio_service_type: AVAudioServiceType,
	pub request_sample_fmt: AVSampleFormat,
	pub get_buffer2: ::std::option::Option<
		unsafe extern "C" fn(
			s: *mut AVCodecContext,
			frame: *mut AVFrame,
			flags: ::std::os::raw::c_int,
		) -> ::std::os::raw::c_int,
	>,
	pub qcompress: f32,
	pub qblur: f32,
	pub qmin: ::std::os::raw::c_int,
	pub qmax: ::std::os::raw::c_int,
	pub max_qdiff: ::std::os::raw::c_int,
	pub rc_buffer_size: ::std::os::raw::c_int,
	pub rc_override_count: ::std::os::raw::c_int,
	pub rc_override: *mut RcOverride,
	pub rc_max_rate: i64,
	pub rc_min_rate: i64,
	pub rc_max_available_vbv_use: f32,
	pub rc_min_vbv_overflow_use: f32,
	pub rc_initial_buffer_occupancy: ::std::os::raw::c_int,
	pub trellis: ::std::os::raw::c_int,
	pub stats_out: *mut ::std::os::raw::c_char,
	pub stats_in: *mut ::std::os::raw::c_char,
	pub workaround_bugs: ::std::os::raw::c_int,
	pub strict_std_compliance: ::std::os::raw::c_int,
	pub error_concealment: ::std::os::raw::c_int,
	pub debug: ::std::os::raw::c_int,
	pub err_recognition: ::std::os::raw::c_int,
	pub reordered_opaque: i64,
	pub hwaccel: *const AVHWAccel,
	pub hwaccel_context: *mut ::std::os::raw::c_void,
	pub error: [u64; 8usize],
	pub dct_algo: ::std::os::raw::c_int,
	pub idct_algo: ::std::os::raw::c_int,
	pub bits_per_coded_sample: ::std::os::raw::c_int,
	pub bits_per_raw_sample: ::std::os::raw::c_int,
	pub lowres: ::std::os::raw::c_int,
	pub thread_count: ::std::os::raw::c_int,
	pub thread_type: ::std::os::raw::c_int,
	pub active_thread_type: ::std::os::raw::c_int,
	pub thread_safe_callbacks: ::std::os::raw::c_int,
	pub execute: ::std::option::Option<
		unsafe extern "C" fn(
			c: *mut AVCodecContext,
			func: ::std::option::Option<
				unsafe extern "C" fn(
					c2: *mut AVCodecContext,
					arg: *mut ::std::os::raw::c_void,
				) -> ::std::os::raw::c_int,
			>,
			arg2: *mut ::std::os::raw::c_void,
			ret: *mut ::std::os::raw::c_int,
			count: ::std::os::raw::c_int,
			size: ::std::os::raw::c_int,
		) -> ::std::os::raw::c_int,
	>,
	pub execute2: ::std::option::Option<
		unsafe extern "C" fn(
			c: *mut AVCodecContext,
			func: ::std::option::Option<
				unsafe extern "C" fn(
					c2: *mut AVCodecContext,
					arg: *mut ::std::os::raw::c_void,
					jobnr: ::std::os::raw::c_int,
					threadnr: ::std::os::raw::c_int,
				) -> ::std::os::raw::c_int,
			>,
			arg2: *mut ::std::os::raw::c_void,
			ret: *mut ::std::os::raw::c_int,
			count: ::std::os::raw::c_int,
		) -> ::std::os::raw::c_int,
	>,
	pub nsse_weight: ::std::os::raw::c_int,
	pub profile: ::std::os::raw::c_int,
	pub level: ::std::os::raw::c_int,
	pub skip_loop_filter: AVDiscard,
	pub skip_idct: AVDiscard,
	pub skip_frame: AVDiscard,
	pub subtitle_header: *mut u8,
	pub subtitle_header_size: ::std::os::raw::c_int,
	pub initial_padding: ::std::os::raw::c_int,
	pub framerate: AVRational,
	pub sw_pix_fmt: AVPixelFormat,
	pub pkt_timebase: AVRational,
	pub codec_descriptor: *const AVCodecDescriptor,
	pub pts_correction_num_faulty_pts: i64,
	pub pts_correction_num_faulty_dts: i64,
	pub pts_correction_last_pts: i64,
	pub pts_correction_last_dts: i64,
	pub sub_charenc: *mut ::std::os::raw::c_char,
	pub sub_charenc_mode: ::std::os::raw::c_int,
	pub skip_alpha: ::std::os::raw::c_int,
	pub seek_preroll: ::std::os::raw::c_int,
	pub debug_mv: ::std::os::raw::c_int,
	pub chroma_intra_matrix: *mut u16,
	pub dump_separator: *mut u8,
	pub codec_whitelist: *mut ::std::os::raw::c_char,
	pub properties: ::std::os::raw::c_uint,
	pub coded_side_data: *mut AVPacketSideData,
	pub nb_coded_side_data: ::std::os::raw::c_int,
	pub hw_frames_ctx: *mut AVBufferRef,
	pub sub_text_format: ::std::os::raw::c_int,
	pub trailing_padding: ::std::os::raw::c_int,
	pub max_pixels: i64,
	pub hw_device_ctx: *mut AVBufferRef,
	pub hwaccel_flags: ::std::os::raw::c_int,
	pub apply_cropping: ::std::os::raw::c_int,
	pub extra_hw_frames: ::std::os::raw::c_int,
	pub discard_damaged_percentage: ::std::os::raw::c_int,
	pub max_samples: i64,
	pub export_side_data: ::std::os::raw::c_int,
	pub get_encode_buffer: ::std::option::Option<
		unsafe extern "C" fn(
			s: *mut AVCodecContext,
			pkt: *mut AVPacket,
			flags: ::std::os::raw::c_int,
		) -> ::std::os::raw::c_int,
	>,
	pub ch_layout: AVChannelLayout,
}
#[test]
fn bindgen_test_layout_AVCodecContext() {
	assert_eq!(
		::std::mem::size_of::<AVCodecContext>(),
		944usize,
		concat!("Size of: ", stringify!(AVCodecContext))
	);
	assert_eq!(
		::std::mem::align_of::<AVCodecContext>(),
		8usize,
		concat!("Alignment of ", stringify!(AVCodecContext))
	);
	fn test_field_av_class() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).av_class) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(av_class)
			)
		);
	}
	test_field_av_class();
	fn test_field_log_level_offset() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).log_level_offset) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(log_level_offset)
			)
		);
	}
	test_field_log_level_offset();
	fn test_field_codec_type() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).codec_type) as usize - ptr as usize
			},
			12usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(codec_type)
			)
		);
	}
	test_field_codec_type();
	fn test_field_codec() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).codec) as usize - ptr as usize
			},
			16usize,
			concat!("Offset of field: ", stringify!(AVCodecContext), "::", stringify!(codec))
		);
	}
	test_field_codec();
	fn test_field_codec_id() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).codec_id) as usize - ptr as usize
			},
			24usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(codec_id)
			)
		);
	}
	test_field_codec_id();
	fn test_field_codec_tag() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).codec_tag) as usize - ptr as usize
			},
			28usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(codec_tag)
			)
		);
	}
	test_field_codec_tag();
	fn test_field_priv_data() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).priv_data) as usize - ptr as usize
			},
			32usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(priv_data)
			)
		);
	}
	test_field_priv_data();
	fn test_field_internal() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).internal) as usize - ptr as usize
			},
			40usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(internal)
			)
		);
	}
	test_field_internal();
	fn test_field_opaque() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).opaque) as usize - ptr as usize
			},
			48usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(opaque)
			)
		);
	}
	test_field_opaque();
	fn test_field_bit_rate() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).bit_rate) as usize - ptr as usize
			},
			56usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(bit_rate)
			)
		);
	}
	test_field_bit_rate();
	fn test_field_bit_rate_tolerance() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).bit_rate_tolerance) as usize - ptr as usize
			},
			64usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(bit_rate_tolerance)
			)
		);
	}
	test_field_bit_rate_tolerance();
	fn test_field_global_quality() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).global_quality) as usize - ptr as usize
			},
			68usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(global_quality)
			)
		);
	}
	test_field_global_quality();
	fn test_field_compression_level() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).compression_level) as usize - ptr as usize
			},
			72usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(compression_level)
			)
		);
	}
	test_field_compression_level();
	fn test_field_flags() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
			},
			76usize,
			concat!("Offset of field: ", stringify!(AVCodecContext), "::", stringify!(flags))
		);
	}
	test_field_flags();
	fn test_field_flags2() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).flags2) as usize - ptr as usize
			},
			80usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(flags2)
			)
		);
	}
	test_field_flags2();
	fn test_field_extradata() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).extradata) as usize - ptr as usize
			},
			88usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(extradata)
			)
		);
	}
	test_field_extradata();
	fn test_field_extradata_size() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).extradata_size) as usize - ptr as usize
			},
			96usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(extradata_size)
			)
		);
	}
	test_field_extradata_size();
	fn test_field_time_base() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).time_base) as usize - ptr as usize
			},
			100usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(time_base)
			)
		);
	}
	test_field_time_base();
	fn test_field_ticks_per_frame() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).ticks_per_frame) as usize - ptr as usize
			},
			108usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(ticks_per_frame)
			)
		);
	}
	test_field_ticks_per_frame();
	fn test_field_delay() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).delay) as usize - ptr as usize
			},
			112usize,
			concat!("Offset of field: ", stringify!(AVCodecContext), "::", stringify!(delay))
		);
	}
	test_field_delay();
	fn test_field_width() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize
			},
			116usize,
			concat!("Offset of field: ", stringify!(AVCodecContext), "::", stringify!(width))
		);
	}
	test_field_width();
	fn test_field_height() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize
			},
			120usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(height)
			)
		);
	}
	test_field_height();
	fn test_field_coded_width() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).coded_width) as usize - ptr as usize
			},
			124usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(coded_width)
			)
		);
	}
	test_field_coded_width();
	fn test_field_coded_height() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).coded_height) as usize - ptr as usize
			},
			128usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(coded_height)
			)
		);
	}
	test_field_coded_height();
	fn test_field_gop_size() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).gop_size) as usize - ptr as usize
			},
			132usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(gop_size)
			)
		);
	}
	test_field_gop_size();
	fn test_field_pix_fmt() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).pix_fmt) as usize - ptr as usize
			},
			136usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(pix_fmt)
			)
		);
	}
	test_field_pix_fmt();
	fn test_field_draw_horiz_band() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).draw_horiz_band) as usize - ptr as usize
			},
			144usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(draw_horiz_band)
			)
		);
	}
	test_field_draw_horiz_band();
	fn test_field_get_format() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).get_format) as usize - ptr as usize
			},
			152usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(get_format)
			)
		);
	}
	test_field_get_format();
	fn test_field_max_b_frames() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).max_b_frames) as usize - ptr as usize
			},
			160usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(max_b_frames)
			)
		);
	}
	test_field_max_b_frames();
	fn test_field_b_quant_factor() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).b_quant_factor) as usize - ptr as usize
			},
			164usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(b_quant_factor)
			)
		);
	}
	test_field_b_quant_factor();
	fn test_field_b_quant_offset() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).b_quant_offset) as usize - ptr as usize
			},
			168usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(b_quant_offset)
			)
		);
	}
	test_field_b_quant_offset();
	fn test_field_has_b_frames() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).has_b_frames) as usize - ptr as usize
			},
			172usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(has_b_frames)
			)
		);
	}
	test_field_has_b_frames();
	fn test_field_i_quant_factor() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).i_quant_factor) as usize - ptr as usize
			},
			176usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(i_quant_factor)
			)
		);
	}
	test_field_i_quant_factor();
	fn test_field_i_quant_offset() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).i_quant_offset) as usize - ptr as usize
			},
			180usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(i_quant_offset)
			)
		);
	}
	test_field_i_quant_offset();
	fn test_field_lumi_masking() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).lumi_masking) as usize - ptr as usize
			},
			184usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(lumi_masking)
			)
		);
	}
	test_field_lumi_masking();
	fn test_field_temporal_cplx_masking() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).temporal_cplx_masking) as usize - ptr as usize
			},
			188usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(temporal_cplx_masking)
			)
		);
	}
	test_field_temporal_cplx_masking();
	fn test_field_spatial_cplx_masking() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).spatial_cplx_masking) as usize - ptr as usize
			},
			192usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(spatial_cplx_masking)
			)
		);
	}
	test_field_spatial_cplx_masking();
	fn test_field_p_masking() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).p_masking) as usize - ptr as usize
			},
			196usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(p_masking)
			)
		);
	}
	test_field_p_masking();
	fn test_field_dark_masking() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).dark_masking) as usize - ptr as usize
			},
			200usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(dark_masking)
			)
		);
	}
	test_field_dark_masking();
	fn test_field_slice_count() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).slice_count) as usize - ptr as usize
			},
			204usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(slice_count)
			)
		);
	}
	test_field_slice_count();
	fn test_field_slice_offset() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).slice_offset) as usize - ptr as usize
			},
			208usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(slice_offset)
			)
		);
	}
	test_field_slice_offset();
	fn test_field_sample_aspect_ratio() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).sample_aspect_ratio) as usize - ptr as usize
			},
			216usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(sample_aspect_ratio)
			)
		);
	}
	test_field_sample_aspect_ratio();
	fn test_field_me_cmp() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).me_cmp) as usize - ptr as usize
			},
			224usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(me_cmp)
			)
		);
	}
	test_field_me_cmp();
	fn test_field_me_sub_cmp() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).me_sub_cmp) as usize - ptr as usize
			},
			228usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(me_sub_cmp)
			)
		);
	}
	test_field_me_sub_cmp();
	fn test_field_mb_cmp() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).mb_cmp) as usize - ptr as usize
			},
			232usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(mb_cmp)
			)
		);
	}
	test_field_mb_cmp();
	fn test_field_ildct_cmp() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).ildct_cmp) as usize - ptr as usize
			},
			236usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(ildct_cmp)
			)
		);
	}
	test_field_ildct_cmp();
	fn test_field_dia_size() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).dia_size) as usize - ptr as usize
			},
			240usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(dia_size)
			)
		);
	}
	test_field_dia_size();
	fn test_field_last_predictor_count() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).last_predictor_count) as usize - ptr as usize
			},
			244usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(last_predictor_count)
			)
		);
	}
	test_field_last_predictor_count();
	fn test_field_me_pre_cmp() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).me_pre_cmp) as usize - ptr as usize
			},
			248usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(me_pre_cmp)
			)
		);
	}
	test_field_me_pre_cmp();
	fn test_field_pre_dia_size() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).pre_dia_size) as usize - ptr as usize
			},
			252usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(pre_dia_size)
			)
		);
	}
	test_field_pre_dia_size();
	fn test_field_me_subpel_quality() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).me_subpel_quality) as usize - ptr as usize
			},
			256usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(me_subpel_quality)
			)
		);
	}
	test_field_me_subpel_quality();
	fn test_field_me_range() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).me_range) as usize - ptr as usize
			},
			260usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(me_range)
			)
		);
	}
	test_field_me_range();
	fn test_field_slice_flags() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).slice_flags) as usize - ptr as usize
			},
			264usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(slice_flags)
			)
		);
	}
	test_field_slice_flags();
	fn test_field_mb_decision() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).mb_decision) as usize - ptr as usize
			},
			268usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(mb_decision)
			)
		);
	}
	test_field_mb_decision();
	fn test_field_intra_matrix() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).intra_matrix) as usize - ptr as usize
			},
			272usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(intra_matrix)
			)
		);
	}
	test_field_intra_matrix();
	fn test_field_inter_matrix() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).inter_matrix) as usize - ptr as usize
			},
			280usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(inter_matrix)
			)
		);
	}
	test_field_inter_matrix();
	fn test_field_intra_dc_precision() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).intra_dc_precision) as usize - ptr as usize
			},
			288usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(intra_dc_precision)
			)
		);
	}
	test_field_intra_dc_precision();
	fn test_field_skip_top() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).skip_top) as usize - ptr as usize
			},
			292usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(skip_top)
			)
		);
	}
	test_field_skip_top();
	fn test_field_skip_bottom() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).skip_bottom) as usize - ptr as usize
			},
			296usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(skip_bottom)
			)
		);
	}
	test_field_skip_bottom();
	fn test_field_mb_lmin() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).mb_lmin) as usize - ptr as usize
			},
			300usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(mb_lmin)
			)
		);
	}
	test_field_mb_lmin();
	fn test_field_mb_lmax() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).mb_lmax) as usize - ptr as usize
			},
			304usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(mb_lmax)
			)
		);
	}
	test_field_mb_lmax();
	fn test_field_bidir_refine() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).bidir_refine) as usize - ptr as usize
			},
			308usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(bidir_refine)
			)
		);
	}
	test_field_bidir_refine();
	fn test_field_keyint_min() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).keyint_min) as usize - ptr as usize
			},
			312usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(keyint_min)
			)
		);
	}
	test_field_keyint_min();
	fn test_field_refs() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).refs) as usize - ptr as usize
			},
			316usize,
			concat!("Offset of field: ", stringify!(AVCodecContext), "::", stringify!(refs))
		);
	}
	test_field_refs();
	fn test_field_mv0_threshold() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).mv0_threshold) as usize - ptr as usize
			},
			320usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(mv0_threshold)
			)
		);
	}
	test_field_mv0_threshold();
	fn test_field_color_primaries() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).color_primaries) as usize - ptr as usize
			},
			324usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(color_primaries)
			)
		);
	}
	test_field_color_primaries();
	fn test_field_color_trc() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).color_trc) as usize - ptr as usize
			},
			328usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(color_trc)
			)
		);
	}
	test_field_color_trc();
	fn test_field_colorspace() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).colorspace) as usize - ptr as usize
			},
			332usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(colorspace)
			)
		);
	}
	test_field_colorspace();
	fn test_field_color_range() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).color_range) as usize - ptr as usize
			},
			336usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(color_range)
			)
		);
	}
	test_field_color_range();
	fn test_field_chroma_sample_location() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).chroma_sample_location) as usize - ptr as usize
			},
			340usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(chroma_sample_location)
			)
		);
	}
	test_field_chroma_sample_location();
	fn test_field_slices() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).slices) as usize - ptr as usize
			},
			344usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(slices)
			)
		);
	}
	test_field_slices();
	fn test_field_field_order() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).field_order) as usize - ptr as usize
			},
			348usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(field_order)
			)
		);
	}
	test_field_field_order();
	fn test_field_sample_rate() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).sample_rate) as usize - ptr as usize
			},
			352usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(sample_rate)
			)
		);
	}
	test_field_sample_rate();
	fn test_field_channels() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize
			},
			356usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(channels)
			)
		);
	}
	test_field_channels();
	fn test_field_sample_fmt() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).sample_fmt) as usize - ptr as usize
			},
			360usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(sample_fmt)
			)
		);
	}
	test_field_sample_fmt();
	fn test_field_frame_size() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).frame_size) as usize - ptr as usize
			},
			364usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(frame_size)
			)
		);
	}
	test_field_frame_size();
	fn test_field_frame_number() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).frame_number) as usize - ptr as usize
			},
			368usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(frame_number)
			)
		);
	}
	test_field_frame_number();
	fn test_field_block_align() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).block_align) as usize - ptr as usize
			},
			372usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(block_align)
			)
		);
	}
	test_field_block_align();
	fn test_field_cutoff() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).cutoff) as usize - ptr as usize
			},
			376usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(cutoff)
			)
		);
	}
	test_field_cutoff();
	fn test_field_channel_layout() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).channel_layout) as usize - ptr as usize
			},
			384usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(channel_layout)
			)
		);
	}
	test_field_channel_layout();
	fn test_field_request_channel_layout() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).request_channel_layout) as usize - ptr as usize
			},
			392usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(request_channel_layout)
			)
		);
	}
	test_field_request_channel_layout();
	fn test_field_audio_service_type() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).audio_service_type) as usize - ptr as usize
			},
			400usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(audio_service_type)
			)
		);
	}
	test_field_audio_service_type();
	fn test_field_request_sample_fmt() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).request_sample_fmt) as usize - ptr as usize
			},
			404usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(request_sample_fmt)
			)
		);
	}
	test_field_request_sample_fmt();
	fn test_field_get_buffer2() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).get_buffer2) as usize - ptr as usize
			},
			408usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(get_buffer2)
			)
		);
	}
	test_field_get_buffer2();
	fn test_field_qcompress() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).qcompress) as usize - ptr as usize
			},
			416usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(qcompress)
			)
		);
	}
	test_field_qcompress();
	fn test_field_qblur() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).qblur) as usize - ptr as usize
			},
			420usize,
			concat!("Offset of field: ", stringify!(AVCodecContext), "::", stringify!(qblur))
		);
	}
	test_field_qblur();
	fn test_field_qmin() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).qmin) as usize - ptr as usize
			},
			424usize,
			concat!("Offset of field: ", stringify!(AVCodecContext), "::", stringify!(qmin))
		);
	}
	test_field_qmin();
	fn test_field_qmax() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).qmax) as usize - ptr as usize
			},
			428usize,
			concat!("Offset of field: ", stringify!(AVCodecContext), "::", stringify!(qmax))
		);
	}
	test_field_qmax();
	fn test_field_max_qdiff() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).max_qdiff) as usize - ptr as usize
			},
			432usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(max_qdiff)
			)
		);
	}
	test_field_max_qdiff();
	fn test_field_rc_buffer_size() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).rc_buffer_size) as usize - ptr as usize
			},
			436usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(rc_buffer_size)
			)
		);
	}
	test_field_rc_buffer_size();
	fn test_field_rc_override_count() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).rc_override_count) as usize - ptr as usize
			},
			440usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(rc_override_count)
			)
		);
	}
	test_field_rc_override_count();
	fn test_field_rc_override() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).rc_override) as usize - ptr as usize
			},
			448usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(rc_override)
			)
		);
	}
	test_field_rc_override();
	fn test_field_rc_max_rate() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).rc_max_rate) as usize - ptr as usize
			},
			456usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(rc_max_rate)
			)
		);
	}
	test_field_rc_max_rate();
	fn test_field_rc_min_rate() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).rc_min_rate) as usize - ptr as usize
			},
			464usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(rc_min_rate)
			)
		);
	}
	test_field_rc_min_rate();
	fn test_field_rc_max_available_vbv_use() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).rc_max_available_vbv_use) as usize - ptr as usize
			},
			472usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(rc_max_available_vbv_use)
			)
		);
	}
	test_field_rc_max_available_vbv_use();
	fn test_field_rc_min_vbv_overflow_use() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).rc_min_vbv_overflow_use) as usize - ptr as usize
			},
			476usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(rc_min_vbv_overflow_use)
			)
		);
	}
	test_field_rc_min_vbv_overflow_use();
	fn test_field_rc_initial_buffer_occupancy() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).rc_initial_buffer_occupancy) as usize - ptr as usize
			},
			480usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(rc_initial_buffer_occupancy)
			)
		);
	}
	test_field_rc_initial_buffer_occupancy();
	fn test_field_trellis() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).trellis) as usize - ptr as usize
			},
			484usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(trellis)
			)
		);
	}
	test_field_trellis();
	fn test_field_stats_out() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).stats_out) as usize - ptr as usize
			},
			488usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(stats_out)
			)
		);
	}
	test_field_stats_out();
	fn test_field_stats_in() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).stats_in) as usize - ptr as usize
			},
			496usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(stats_in)
			)
		);
	}
	test_field_stats_in();
	fn test_field_workaround_bugs() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).workaround_bugs) as usize - ptr as usize
			},
			504usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(workaround_bugs)
			)
		);
	}
	test_field_workaround_bugs();
	fn test_field_strict_std_compliance() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).strict_std_compliance) as usize - ptr as usize
			},
			508usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(strict_std_compliance)
			)
		);
	}
	test_field_strict_std_compliance();
	fn test_field_error_concealment() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).error_concealment) as usize - ptr as usize
			},
			512usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(error_concealment)
			)
		);
	}
	test_field_error_concealment();
	fn test_field_debug() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).debug) as usize - ptr as usize
			},
			516usize,
			concat!("Offset of field: ", stringify!(AVCodecContext), "::", stringify!(debug))
		);
	}
	test_field_debug();
	fn test_field_err_recognition() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).err_recognition) as usize - ptr as usize
			},
			520usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(err_recognition)
			)
		);
	}
	test_field_err_recognition();
	fn test_field_reordered_opaque() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).reordered_opaque) as usize - ptr as usize
			},
			528usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(reordered_opaque)
			)
		);
	}
	test_field_reordered_opaque();
	fn test_field_hwaccel() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).hwaccel) as usize - ptr as usize
			},
			536usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(hwaccel)
			)
		);
	}
	test_field_hwaccel();
	fn test_field_hwaccel_context() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).hwaccel_context) as usize - ptr as usize
			},
			544usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(hwaccel_context)
			)
		);
	}
	test_field_hwaccel_context();
	fn test_field_error() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize
			},
			552usize,
			concat!("Offset of field: ", stringify!(AVCodecContext), "::", stringify!(error))
		);
	}
	test_field_error();
	fn test_field_dct_algo() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).dct_algo) as usize - ptr as usize
			},
			616usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(dct_algo)
			)
		);
	}
	test_field_dct_algo();
	fn test_field_idct_algo() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).idct_algo) as usize - ptr as usize
			},
			620usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(idct_algo)
			)
		);
	}
	test_field_idct_algo();
	fn test_field_bits_per_coded_sample() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).bits_per_coded_sample) as usize - ptr as usize
			},
			624usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(bits_per_coded_sample)
			)
		);
	}
	test_field_bits_per_coded_sample();
	fn test_field_bits_per_raw_sample() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).bits_per_raw_sample) as usize - ptr as usize
			},
			628usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(bits_per_raw_sample)
			)
		);
	}
	test_field_bits_per_raw_sample();
	fn test_field_lowres() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).lowres) as usize - ptr as usize
			},
			632usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(lowres)
			)
		);
	}
	test_field_lowres();
	fn test_field_thread_count() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).thread_count) as usize - ptr as usize
			},
			636usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(thread_count)
			)
		);
	}
	test_field_thread_count();
	fn test_field_thread_type() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).thread_type) as usize - ptr as usize
			},
			640usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(thread_type)
			)
		);
	}
	test_field_thread_type();
	fn test_field_active_thread_type() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).active_thread_type) as usize - ptr as usize
			},
			644usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(active_thread_type)
			)
		);
	}
	test_field_active_thread_type();
	fn test_field_thread_safe_callbacks() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).thread_safe_callbacks) as usize - ptr as usize
			},
			648usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(thread_safe_callbacks)
			)
		);
	}
	test_field_thread_safe_callbacks();
	fn test_field_execute() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).execute) as usize - ptr as usize
			},
			656usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(execute)
			)
		);
	}
	test_field_execute();
	fn test_field_execute2() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).execute2) as usize - ptr as usize
			},
			664usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(execute2)
			)
		);
	}
	test_field_execute2();
	fn test_field_nsse_weight() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).nsse_weight) as usize - ptr as usize
			},
			672usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(nsse_weight)
			)
		);
	}
	test_field_nsse_weight();
	fn test_field_profile() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).profile) as usize - ptr as usize
			},
			676usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(profile)
			)
		);
	}
	test_field_profile();
	fn test_field_level() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).level) as usize - ptr as usize
			},
			680usize,
			concat!("Offset of field: ", stringify!(AVCodecContext), "::", stringify!(level))
		);
	}
	test_field_level();
	fn test_field_skip_loop_filter() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).skip_loop_filter) as usize - ptr as usize
			},
			684usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(skip_loop_filter)
			)
		);
	}
	test_field_skip_loop_filter();
	fn test_field_skip_idct() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).skip_idct) as usize - ptr as usize
			},
			688usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(skip_idct)
			)
		);
	}
	test_field_skip_idct();
	fn test_field_skip_frame() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).skip_frame) as usize - ptr as usize
			},
			692usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(skip_frame)
			)
		);
	}
	test_field_skip_frame();
	fn test_field_subtitle_header() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).subtitle_header) as usize - ptr as usize
			},
			696usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(subtitle_header)
			)
		);
	}
	test_field_subtitle_header();
	fn test_field_subtitle_header_size() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).subtitle_header_size) as usize - ptr as usize
			},
			704usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(subtitle_header_size)
			)
		);
	}
	test_field_subtitle_header_size();
	fn test_field_initial_padding() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).initial_padding) as usize - ptr as usize
			},
			708usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(initial_padding)
			)
		);
	}
	test_field_initial_padding();
	fn test_field_framerate() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).framerate) as usize - ptr as usize
			},
			712usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(framerate)
			)
		);
	}
	test_field_framerate();
	fn test_field_sw_pix_fmt() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).sw_pix_fmt) as usize - ptr as usize
			},
			720usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(sw_pix_fmt)
			)
		);
	}
	test_field_sw_pix_fmt();
	fn test_field_pkt_timebase() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).pkt_timebase) as usize - ptr as usize
			},
			724usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(pkt_timebase)
			)
		);
	}
	test_field_pkt_timebase();
	fn test_field_codec_descriptor() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).codec_descriptor) as usize - ptr as usize
			},
			736usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(codec_descriptor)
			)
		);
	}
	test_field_codec_descriptor();
	fn test_field_pts_correction_num_faulty_pts() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).pts_correction_num_faulty_pts) as usize - ptr as usize
			},
			744usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(pts_correction_num_faulty_pts)
			)
		);
	}
	test_field_pts_correction_num_faulty_pts();
	fn test_field_pts_correction_num_faulty_dts() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).pts_correction_num_faulty_dts) as usize - ptr as usize
			},
			752usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(pts_correction_num_faulty_dts)
			)
		);
	}
	test_field_pts_correction_num_faulty_dts();
	fn test_field_pts_correction_last_pts() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).pts_correction_last_pts) as usize - ptr as usize
			},
			760usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(pts_correction_last_pts)
			)
		);
	}
	test_field_pts_correction_last_pts();
	fn test_field_pts_correction_last_dts() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).pts_correction_last_dts) as usize - ptr as usize
			},
			768usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(pts_correction_last_dts)
			)
		);
	}
	test_field_pts_correction_last_dts();
	fn test_field_sub_charenc() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).sub_charenc) as usize - ptr as usize
			},
			776usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(sub_charenc)
			)
		);
	}
	test_field_sub_charenc();
	fn test_field_sub_charenc_mode() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).sub_charenc_mode) as usize - ptr as usize
			},
			784usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(sub_charenc_mode)
			)
		);
	}
	test_field_sub_charenc_mode();
	fn test_field_skip_alpha() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).skip_alpha) as usize - ptr as usize
			},
			788usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(skip_alpha)
			)
		);
	}
	test_field_skip_alpha();
	fn test_field_seek_preroll() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).seek_preroll) as usize - ptr as usize
			},
			792usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(seek_preroll)
			)
		);
	}
	test_field_seek_preroll();
	fn test_field_debug_mv() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).debug_mv) as usize - ptr as usize
			},
			796usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(debug_mv)
			)
		);
	}
	test_field_debug_mv();
	fn test_field_chroma_intra_matrix() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).chroma_intra_matrix) as usize - ptr as usize
			},
			800usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(chroma_intra_matrix)
			)
		);
	}
	test_field_chroma_intra_matrix();
	fn test_field_dump_separator() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).dump_separator) as usize - ptr as usize
			},
			808usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(dump_separator)
			)
		);
	}
	test_field_dump_separator();
	fn test_field_codec_whitelist() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).codec_whitelist) as usize - ptr as usize
			},
			816usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(codec_whitelist)
			)
		);
	}
	test_field_codec_whitelist();
	fn test_field_properties() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).properties) as usize - ptr as usize
			},
			824usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(properties)
			)
		);
	}
	test_field_properties();
	fn test_field_coded_side_data() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).coded_side_data) as usize - ptr as usize
			},
			832usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(coded_side_data)
			)
		);
	}
	test_field_coded_side_data();
	fn test_field_nb_coded_side_data() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).nb_coded_side_data) as usize - ptr as usize
			},
			840usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(nb_coded_side_data)
			)
		);
	}
	test_field_nb_coded_side_data();
	fn test_field_hw_frames_ctx() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).hw_frames_ctx) as usize - ptr as usize
			},
			848usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(hw_frames_ctx)
			)
		);
	}
	test_field_hw_frames_ctx();
	fn test_field_sub_text_format() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).sub_text_format) as usize - ptr as usize
			},
			856usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(sub_text_format)
			)
		);
	}
	test_field_sub_text_format();
	fn test_field_trailing_padding() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).trailing_padding) as usize - ptr as usize
			},
			860usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(trailing_padding)
			)
		);
	}
	test_field_trailing_padding();
	fn test_field_max_pixels() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).max_pixels) as usize - ptr as usize
			},
			864usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(max_pixels)
			)
		);
	}
	test_field_max_pixels();
	fn test_field_hw_device_ctx() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).hw_device_ctx) as usize - ptr as usize
			},
			872usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(hw_device_ctx)
			)
		);
	}
	test_field_hw_device_ctx();
	fn test_field_hwaccel_flags() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).hwaccel_flags) as usize - ptr as usize
			},
			880usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(hwaccel_flags)
			)
		);
	}
	test_field_hwaccel_flags();
	fn test_field_apply_cropping() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).apply_cropping) as usize - ptr as usize
			},
			884usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(apply_cropping)
			)
		);
	}
	test_field_apply_cropping();
	fn test_field_extra_hw_frames() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).extra_hw_frames) as usize - ptr as usize
			},
			888usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(extra_hw_frames)
			)
		);
	}
	test_field_extra_hw_frames();
	fn test_field_discard_damaged_percentage() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).discard_damaged_percentage) as usize - ptr as usize
			},
			892usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(discard_damaged_percentage)
			)
		);
	}
	test_field_discard_damaged_percentage();
	fn test_field_max_samples() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).max_samples) as usize - ptr as usize
			},
			896usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(max_samples)
			)
		);
	}
	test_field_max_samples();
	fn test_field_export_side_data() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).export_side_data) as usize - ptr as usize
			},
			904usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(export_side_data)
			)
		);
	}
	test_field_export_side_data();
	fn test_field_get_encode_buffer() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).get_encode_buffer) as usize - ptr as usize
			},
			912usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(get_encode_buffer)
			)
		);
	}
	test_field_get_encode_buffer();
	fn test_field_ch_layout() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).ch_layout) as usize - ptr as usize
			},
			920usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecContext),
				"::",
				stringify!(ch_layout)
			)
		);
	}
	test_field_ch_layout();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVHWAccel {
	pub name: *const ::std::os::raw::c_char,
	pub type_: AVMediaType,
	pub id: AVCodecID,
	pub pix_fmt: AVPixelFormat,
	pub capabilities: ::std::os::raw::c_int,
	pub alloc_frame: ::std::option::Option<
		unsafe extern "C" fn(avctx: *mut AVCodecContext, frame: *mut AVFrame) -> ::std::os::raw::c_int,
	>,
	pub start_frame: ::std::option::Option<
		unsafe extern "C" fn(avctx: *mut AVCodecContext, buf: *const u8, buf_size: u32) -> ::std::os::raw::c_int,
	>,
	pub decode_params: ::std::option::Option<
		unsafe extern "C" fn(
			avctx: *mut AVCodecContext,
			type_: ::std::os::raw::c_int,
			buf: *const u8,
			buf_size: u32,
		) -> ::std::os::raw::c_int,
	>,
	pub decode_slice: ::std::option::Option<
		unsafe extern "C" fn(avctx: *mut AVCodecContext, buf: *const u8, buf_size: u32) -> ::std::os::raw::c_int,
	>,
	pub end_frame: ::std::option::Option<unsafe extern "C" fn(avctx: *mut AVCodecContext) -> ::std::os::raw::c_int>,
	pub frame_priv_data_size: ::std::os::raw::c_int,
	pub init: ::std::option::Option<unsafe extern "C" fn(avctx: *mut AVCodecContext) -> ::std::os::raw::c_int>,
	pub uninit: ::std::option::Option<unsafe extern "C" fn(avctx: *mut AVCodecContext) -> ::std::os::raw::c_int>,
	pub priv_data_size: ::std::os::raw::c_int,
	pub caps_internal: ::std::os::raw::c_int,
	pub frame_params: ::std::option::Option<
		unsafe extern "C" fn(avctx: *mut AVCodecContext, hw_frames_ctx: *mut AVBufferRef) -> ::std::os::raw::c_int,
	>,
}
#[test]
fn bindgen_test_layout_AVHWAccel() {
	assert_eq!(
		::std::mem::size_of::<AVHWAccel>(),
		104usize,
		concat!("Size of: ", stringify!(AVHWAccel))
	);
	assert_eq!(
		::std::mem::align_of::<AVHWAccel>(),
		8usize,
		concat!("Alignment of ", stringify!(AVHWAccel))
	);
	fn test_field_name() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVHWAccel>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
			},
			0usize,
			concat!("Offset of field: ", stringify!(AVHWAccel), "::", stringify!(name))
		);
	}
	test_field_name();
	fn test_field_type() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVHWAccel>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
			},
			8usize,
			concat!("Offset of field: ", stringify!(AVHWAccel), "::", stringify!(type_))
		);
	}
	test_field_type();
	fn test_field_id() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVHWAccel>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize
			},
			12usize,
			concat!("Offset of field: ", stringify!(AVHWAccel), "::", stringify!(id))
		);
	}
	test_field_id();
	fn test_field_pix_fmt() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVHWAccel>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).pix_fmt) as usize - ptr as usize
			},
			16usize,
			concat!("Offset of field: ", stringify!(AVHWAccel), "::", stringify!(pix_fmt))
		);
	}
	test_field_pix_fmt();
	fn test_field_capabilities() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVHWAccel>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).capabilities) as usize - ptr as usize
			},
			20usize,
			concat!(
				"Offset of field: ",
				stringify!(AVHWAccel),
				"::",
				stringify!(capabilities)
			)
		);
	}
	test_field_capabilities();
	fn test_field_alloc_frame() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVHWAccel>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).alloc_frame) as usize - ptr as usize
			},
			24usize,
			concat!(
				"Offset of field: ",
				stringify!(AVHWAccel),
				"::",
				stringify!(alloc_frame)
			)
		);
	}
	test_field_alloc_frame();
	fn test_field_start_frame() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVHWAccel>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).start_frame) as usize - ptr as usize
			},
			32usize,
			concat!(
				"Offset of field: ",
				stringify!(AVHWAccel),
				"::",
				stringify!(start_frame)
			)
		);
	}
	test_field_start_frame();
	fn test_field_decode_params() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVHWAccel>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).decode_params) as usize - ptr as usize
			},
			40usize,
			concat!(
				"Offset of field: ",
				stringify!(AVHWAccel),
				"::",
				stringify!(decode_params)
			)
		);
	}
	test_field_decode_params();
	fn test_field_decode_slice() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVHWAccel>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).decode_slice) as usize - ptr as usize
			},
			48usize,
			concat!(
				"Offset of field: ",
				stringify!(AVHWAccel),
				"::",
				stringify!(decode_slice)
			)
		);
	}
	test_field_decode_slice();
	fn test_field_end_frame() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVHWAccel>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).end_frame) as usize - ptr as usize
			},
			56usize,
			concat!("Offset of field: ", stringify!(AVHWAccel), "::", stringify!(end_frame))
		);
	}
	test_field_end_frame();
	fn test_field_frame_priv_data_size() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVHWAccel>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).frame_priv_data_size) as usize - ptr as usize
			},
			64usize,
			concat!(
				"Offset of field: ",
				stringify!(AVHWAccel),
				"::",
				stringify!(frame_priv_data_size)
			)
		);
	}
	test_field_frame_priv_data_size();
	fn test_field_init() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVHWAccel>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).init) as usize - ptr as usize
			},
			72usize,
			concat!("Offset of field: ", stringify!(AVHWAccel), "::", stringify!(init))
		);
	}
	test_field_init();
	fn test_field_uninit() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVHWAccel>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).uninit) as usize - ptr as usize
			},
			80usize,
			concat!("Offset of field: ", stringify!(AVHWAccel), "::", stringify!(uninit))
		);
	}
	test_field_uninit();
	fn test_field_priv_data_size() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVHWAccel>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).priv_data_size) as usize - ptr as usize
			},
			88usize,
			concat!(
				"Offset of field: ",
				stringify!(AVHWAccel),
				"::",
				stringify!(priv_data_size)
			)
		);
	}
	test_field_priv_data_size();
	fn test_field_caps_internal() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVHWAccel>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).caps_internal) as usize - ptr as usize
			},
			92usize,
			concat!(
				"Offset of field: ",
				stringify!(AVHWAccel),
				"::",
				stringify!(caps_internal)
			)
		);
	}
	test_field_caps_internal();
	fn test_field_frame_params() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVHWAccel>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).frame_params) as usize - ptr as usize
			},
			96usize,
			concat!(
				"Offset of field: ",
				stringify!(AVHWAccel),
				"::",
				stringify!(frame_params)
			)
		);
	}
	test_field_frame_params();
}
pub const AVSubtitleType_SUBTITLE_NONE: AVSubtitleType = 0;
pub const AVSubtitleType_SUBTITLE_BITMAP: AVSubtitleType = 1;
pub const AVSubtitleType_SUBTITLE_TEXT: AVSubtitleType = 2;
pub const AVSubtitleType_SUBTITLE_ASS: AVSubtitleType = 3;
pub type AVSubtitleType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVSubtitleRect {
	pub x: ::std::os::raw::c_int,
	pub y: ::std::os::raw::c_int,
	pub w: ::std::os::raw::c_int,
	pub h: ::std::os::raw::c_int,
	pub nb_colors: ::std::os::raw::c_int,
	pub data: [*mut u8; 4usize],
	pub linesize: [::std::os::raw::c_int; 4usize],
	pub type_: AVSubtitleType,
	pub text: *mut ::std::os::raw::c_char,
	pub ass: *mut ::std::os::raw::c_char,
	pub flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_AVSubtitleRect() {
	assert_eq!(
		::std::mem::size_of::<AVSubtitleRect>(),
		104usize,
		concat!("Size of: ", stringify!(AVSubtitleRect))
	);
	assert_eq!(
		::std::mem::align_of::<AVSubtitleRect>(),
		8usize,
		concat!("Alignment of ", stringify!(AVSubtitleRect))
	);
	fn test_field_x() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVSubtitleRect>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
			},
			0usize,
			concat!("Offset of field: ", stringify!(AVSubtitleRect), "::", stringify!(x))
		);
	}
	test_field_x();
	fn test_field_y() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVSubtitleRect>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
			},
			4usize,
			concat!("Offset of field: ", stringify!(AVSubtitleRect), "::", stringify!(y))
		);
	}
	test_field_y();
	fn test_field_w() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVSubtitleRect>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize
			},
			8usize,
			concat!("Offset of field: ", stringify!(AVSubtitleRect), "::", stringify!(w))
		);
	}
	test_field_w();
	fn test_field_h() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVSubtitleRect>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).h) as usize - ptr as usize
			},
			12usize,
			concat!("Offset of field: ", stringify!(AVSubtitleRect), "::", stringify!(h))
		);
	}
	test_field_h();
	fn test_field_nb_colors() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVSubtitleRect>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).nb_colors) as usize - ptr as usize
			},
			16usize,
			concat!(
				"Offset of field: ",
				stringify!(AVSubtitleRect),
				"::",
				stringify!(nb_colors)
			)
		);
	}
	test_field_nb_colors();
	fn test_field_data() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVSubtitleRect>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
			},
			24usize,
			concat!("Offset of field: ", stringify!(AVSubtitleRect), "::", stringify!(data))
		);
	}
	test_field_data();
	fn test_field_linesize() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVSubtitleRect>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).linesize) as usize - ptr as usize
			},
			56usize,
			concat!(
				"Offset of field: ",
				stringify!(AVSubtitleRect),
				"::",
				stringify!(linesize)
			)
		);
	}
	test_field_linesize();
	fn test_field_type() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVSubtitleRect>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
			},
			72usize,
			concat!("Offset of field: ", stringify!(AVSubtitleRect), "::", stringify!(type_))
		);
	}
	test_field_type();
	fn test_field_text() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVSubtitleRect>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).text) as usize - ptr as usize
			},
			80usize,
			concat!("Offset of field: ", stringify!(AVSubtitleRect), "::", stringify!(text))
		);
	}
	test_field_text();
	fn test_field_ass() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVSubtitleRect>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).ass) as usize - ptr as usize
			},
			88usize,
			concat!("Offset of field: ", stringify!(AVSubtitleRect), "::", stringify!(ass))
		);
	}
	test_field_ass();
	fn test_field_flags() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVSubtitleRect>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
			},
			96usize,
			concat!("Offset of field: ", stringify!(AVSubtitleRect), "::", stringify!(flags))
		);
	}
	test_field_flags();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVSubtitle {
	pub format: u16,
	pub start_display_time: u32,
	pub end_display_time: u32,
	pub num_rects: ::std::os::raw::c_uint,
	pub rects: *mut *mut AVSubtitleRect,
	pub pts: i64,
}
#[test]
fn bindgen_test_layout_AVSubtitle() {
	assert_eq!(
		::std::mem::size_of::<AVSubtitle>(),
		32usize,
		concat!("Size of: ", stringify!(AVSubtitle))
	);
	assert_eq!(
		::std::mem::align_of::<AVSubtitle>(),
		8usize,
		concat!("Alignment of ", stringify!(AVSubtitle))
	);
	fn test_field_format() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVSubtitle>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize
			},
			0usize,
			concat!("Offset of field: ", stringify!(AVSubtitle), "::", stringify!(format))
		);
	}
	test_field_format();
	fn test_field_start_display_time() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVSubtitle>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).start_display_time) as usize - ptr as usize
			},
			4usize,
			concat!(
				"Offset of field: ",
				stringify!(AVSubtitle),
				"::",
				stringify!(start_display_time)
			)
		);
	}
	test_field_start_display_time();
	fn test_field_end_display_time() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVSubtitle>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).end_display_time) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(AVSubtitle),
				"::",
				stringify!(end_display_time)
			)
		);
	}
	test_field_end_display_time();
	fn test_field_num_rects() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVSubtitle>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).num_rects) as usize - ptr as usize
			},
			12usize,
			concat!("Offset of field: ", stringify!(AVSubtitle), "::", stringify!(num_rects))
		);
	}
	test_field_num_rects();
	fn test_field_rects() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVSubtitle>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).rects) as usize - ptr as usize
			},
			16usize,
			concat!("Offset of field: ", stringify!(AVSubtitle), "::", stringify!(rects))
		);
	}
	test_field_rects();
	fn test_field_pts() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVSubtitle>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).pts) as usize - ptr as usize
			},
			24usize,
			concat!("Offset of field: ", stringify!(AVSubtitle), "::", stringify!(pts))
		);
	}
	test_field_pts();
}
extern "C" {
	pub fn avcodec_version() -> ::std::os::raw::c_uint;
}
extern "C" {
	pub fn avcodec_configuration() -> *const ::std::os::raw::c_char;
}
extern "C" {
	pub fn avcodec_license() -> *const ::std::os::raw::c_char;
}
extern "C" {
	pub fn avcodec_alloc_context3(codec: *const AVCodec) -> *mut AVCodecContext;
}
extern "C" {
	pub fn avcodec_free_context(avctx: *mut *mut AVCodecContext);
}
extern "C" {
	pub fn avcodec_get_class() -> *const AVClass;
}
extern "C" {
	pub fn avcodec_get_frame_class() -> *const AVClass;
}
extern "C" {
	pub fn avcodec_get_subtitle_rect_class() -> *const AVClass;
}
extern "C" {
	pub fn avcodec_parameters_from_context(
		par: *mut AVCodecParameters,
		codec: *const AVCodecContext,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avcodec_parameters_to_context(
		codec: *mut AVCodecContext,
		par: *const AVCodecParameters,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avcodec_open2(
		avctx: *mut AVCodecContext,
		codec: *const AVCodec,
		options: *mut *mut AVDictionary,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avcodec_close(avctx: *mut AVCodecContext) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avsubtitle_free(sub: *mut AVSubtitle);
}
extern "C" {
	pub fn avcodec_default_get_buffer2(
		s: *mut AVCodecContext,
		frame: *mut AVFrame,
		flags: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avcodec_default_get_encode_buffer(
		s: *mut AVCodecContext,
		pkt: *mut AVPacket,
		flags: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avcodec_align_dimensions(
		s: *mut AVCodecContext,
		width: *mut ::std::os::raw::c_int,
		height: *mut ::std::os::raw::c_int,
	);
}
extern "C" {
	pub fn avcodec_align_dimensions2(
		s: *mut AVCodecContext,
		width: *mut ::std::os::raw::c_int,
		height: *mut ::std::os::raw::c_int,
		linesize_align: *mut ::std::os::raw::c_int,
	);
}
extern "C" {
	pub fn avcodec_enum_to_chroma_pos(
		xpos: *mut ::std::os::raw::c_int,
		ypos: *mut ::std::os::raw::c_int,
		pos: AVChromaLocation,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avcodec_chroma_pos_to_enum(xpos: ::std::os::raw::c_int, ypos: ::std::os::raw::c_int) -> AVChromaLocation;
}
extern "C" {
	pub fn avcodec_decode_subtitle2(
		avctx: *mut AVCodecContext,
		sub: *mut AVSubtitle,
		got_sub_ptr: *mut ::std::os::raw::c_int,
		avpkt: *mut AVPacket,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avcodec_send_packet(avctx: *mut AVCodecContext, avpkt: *const AVPacket) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avcodec_receive_frame(avctx: *mut AVCodecContext, frame: *mut AVFrame) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avcodec_send_frame(avctx: *mut AVCodecContext, frame: *const AVFrame) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avcodec_receive_packet(avctx: *mut AVCodecContext, avpkt: *mut AVPacket) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avcodec_get_hw_frames_parameters(
		avctx: *mut AVCodecContext,
		device_ref: *mut AVBufferRef,
		hw_pix_fmt: AVPixelFormat,
		out_frames_ref: *mut *mut AVBufferRef,
	) -> ::std::os::raw::c_int;
}
pub const AVPictureStructure_AV_PICTURE_STRUCTURE_UNKNOWN: AVPictureStructure = 0;
pub const AVPictureStructure_AV_PICTURE_STRUCTURE_TOP_FIELD: AVPictureStructure = 1;
pub const AVPictureStructure_AV_PICTURE_STRUCTURE_BOTTOM_FIELD: AVPictureStructure = 2;
pub const AVPictureStructure_AV_PICTURE_STRUCTURE_FRAME: AVPictureStructure = 3;
pub type AVPictureStructure = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVCodecParserContext {
	pub priv_data: *mut ::std::os::raw::c_void,
	pub parser: *const AVCodecParser,
	pub frame_offset: i64,
	pub cur_offset: i64,
	pub next_frame_offset: i64,
	pub pict_type: ::std::os::raw::c_int,
	pub repeat_pict: ::std::os::raw::c_int,
	pub pts: i64,
	pub dts: i64,
	pub last_pts: i64,
	pub last_dts: i64,
	pub fetch_timestamp: ::std::os::raw::c_int,
	pub cur_frame_start_index: ::std::os::raw::c_int,
	pub cur_frame_offset: [i64; 4usize],
	pub cur_frame_pts: [i64; 4usize],
	pub cur_frame_dts: [i64; 4usize],
	pub flags: ::std::os::raw::c_int,
	pub offset: i64,
	pub cur_frame_end: [i64; 4usize],
	pub key_frame: ::std::os::raw::c_int,
	pub dts_sync_point: ::std::os::raw::c_int,
	pub dts_ref_dts_delta: ::std::os::raw::c_int,
	pub pts_dts_delta: ::std::os::raw::c_int,
	pub cur_frame_pos: [i64; 4usize],
	pub pos: i64,
	pub last_pos: i64,
	pub duration: ::std::os::raw::c_int,
	pub field_order: AVFieldOrder,
	pub picture_structure: AVPictureStructure,
	pub output_picture_number: ::std::os::raw::c_int,
	pub width: ::std::os::raw::c_int,
	pub height: ::std::os::raw::c_int,
	pub coded_width: ::std::os::raw::c_int,
	pub coded_height: ::std::os::raw::c_int,
	pub format: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_AVCodecParserContext() {
	assert_eq!(
		::std::mem::size_of::<AVCodecParserContext>(),
		336usize,
		concat!("Size of: ", stringify!(AVCodecParserContext))
	);
	assert_eq!(
		::std::mem::align_of::<AVCodecParserContext>(),
		8usize,
		concat!("Alignment of ", stringify!(AVCodecParserContext))
	);
	fn test_field_priv_data() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParserContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).priv_data) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParserContext),
				"::",
				stringify!(priv_data)
			)
		);
	}
	test_field_priv_data();
	fn test_field_parser() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParserContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).parser) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParserContext),
				"::",
				stringify!(parser)
			)
		);
	}
	test_field_parser();
	fn test_field_frame_offset() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParserContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).frame_offset) as usize - ptr as usize
			},
			16usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParserContext),
				"::",
				stringify!(frame_offset)
			)
		);
	}
	test_field_frame_offset();
	fn test_field_cur_offset() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParserContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).cur_offset) as usize - ptr as usize
			},
			24usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParserContext),
				"::",
				stringify!(cur_offset)
			)
		);
	}
	test_field_cur_offset();
	fn test_field_next_frame_offset() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParserContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).next_frame_offset) as usize - ptr as usize
			},
			32usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParserContext),
				"::",
				stringify!(next_frame_offset)
			)
		);
	}
	test_field_next_frame_offset();
	fn test_field_pict_type() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParserContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).pict_type) as usize - ptr as usize
			},
			40usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParserContext),
				"::",
				stringify!(pict_type)
			)
		);
	}
	test_field_pict_type();
	fn test_field_repeat_pict() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParserContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).repeat_pict) as usize - ptr as usize
			},
			44usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParserContext),
				"::",
				stringify!(repeat_pict)
			)
		);
	}
	test_field_repeat_pict();
	fn test_field_pts() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParserContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).pts) as usize - ptr as usize
			},
			48usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParserContext),
				"::",
				stringify!(pts)
			)
		);
	}
	test_field_pts();
	fn test_field_dts() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParserContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).dts) as usize - ptr as usize
			},
			56usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParserContext),
				"::",
				stringify!(dts)
			)
		);
	}
	test_field_dts();
	fn test_field_last_pts() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParserContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).last_pts) as usize - ptr as usize
			},
			64usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParserContext),
				"::",
				stringify!(last_pts)
			)
		);
	}
	test_field_last_pts();
	fn test_field_last_dts() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParserContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).last_dts) as usize - ptr as usize
			},
			72usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParserContext),
				"::",
				stringify!(last_dts)
			)
		);
	}
	test_field_last_dts();
	fn test_field_fetch_timestamp() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParserContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).fetch_timestamp) as usize - ptr as usize
			},
			80usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParserContext),
				"::",
				stringify!(fetch_timestamp)
			)
		);
	}
	test_field_fetch_timestamp();
	fn test_field_cur_frame_start_index() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParserContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).cur_frame_start_index) as usize - ptr as usize
			},
			84usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParserContext),
				"::",
				stringify!(cur_frame_start_index)
			)
		);
	}
	test_field_cur_frame_start_index();
	fn test_field_cur_frame_offset() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParserContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).cur_frame_offset) as usize - ptr as usize
			},
			88usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParserContext),
				"::",
				stringify!(cur_frame_offset)
			)
		);
	}
	test_field_cur_frame_offset();
	fn test_field_cur_frame_pts() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParserContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).cur_frame_pts) as usize - ptr as usize
			},
			120usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParserContext),
				"::",
				stringify!(cur_frame_pts)
			)
		);
	}
	test_field_cur_frame_pts();
	fn test_field_cur_frame_dts() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParserContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).cur_frame_dts) as usize - ptr as usize
			},
			152usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParserContext),
				"::",
				stringify!(cur_frame_dts)
			)
		);
	}
	test_field_cur_frame_dts();
	fn test_field_flags() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParserContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
			},
			184usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParserContext),
				"::",
				stringify!(flags)
			)
		);
	}
	test_field_flags();
	fn test_field_offset() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParserContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize
			},
			192usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParserContext),
				"::",
				stringify!(offset)
			)
		);
	}
	test_field_offset();
	fn test_field_cur_frame_end() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParserContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).cur_frame_end) as usize - ptr as usize
			},
			200usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParserContext),
				"::",
				stringify!(cur_frame_end)
			)
		);
	}
	test_field_cur_frame_end();
	fn test_field_key_frame() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParserContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).key_frame) as usize - ptr as usize
			},
			232usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParserContext),
				"::",
				stringify!(key_frame)
			)
		);
	}
	test_field_key_frame();
	fn test_field_dts_sync_point() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParserContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).dts_sync_point) as usize - ptr as usize
			},
			236usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParserContext),
				"::",
				stringify!(dts_sync_point)
			)
		);
	}
	test_field_dts_sync_point();
	fn test_field_dts_ref_dts_delta() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParserContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).dts_ref_dts_delta) as usize - ptr as usize
			},
			240usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParserContext),
				"::",
				stringify!(dts_ref_dts_delta)
			)
		);
	}
	test_field_dts_ref_dts_delta();
	fn test_field_pts_dts_delta() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParserContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).pts_dts_delta) as usize - ptr as usize
			},
			244usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParserContext),
				"::",
				stringify!(pts_dts_delta)
			)
		);
	}
	test_field_pts_dts_delta();
	fn test_field_cur_frame_pos() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParserContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).cur_frame_pos) as usize - ptr as usize
			},
			248usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParserContext),
				"::",
				stringify!(cur_frame_pos)
			)
		);
	}
	test_field_cur_frame_pos();
	fn test_field_pos() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParserContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).pos) as usize - ptr as usize
			},
			280usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParserContext),
				"::",
				stringify!(pos)
			)
		);
	}
	test_field_pos();
	fn test_field_last_pos() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParserContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).last_pos) as usize - ptr as usize
			},
			288usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParserContext),
				"::",
				stringify!(last_pos)
			)
		);
	}
	test_field_last_pos();
	fn test_field_duration() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParserContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).duration) as usize - ptr as usize
			},
			296usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParserContext),
				"::",
				stringify!(duration)
			)
		);
	}
	test_field_duration();
	fn test_field_field_order() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParserContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).field_order) as usize - ptr as usize
			},
			300usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParserContext),
				"::",
				stringify!(field_order)
			)
		);
	}
	test_field_field_order();
	fn test_field_picture_structure() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParserContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).picture_structure) as usize - ptr as usize
			},
			304usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParserContext),
				"::",
				stringify!(picture_structure)
			)
		);
	}
	test_field_picture_structure();
	fn test_field_output_picture_number() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParserContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).output_picture_number) as usize - ptr as usize
			},
			308usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParserContext),
				"::",
				stringify!(output_picture_number)
			)
		);
	}
	test_field_output_picture_number();
	fn test_field_width() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParserContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize
			},
			312usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParserContext),
				"::",
				stringify!(width)
			)
		);
	}
	test_field_width();
	fn test_field_height() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParserContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize
			},
			316usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParserContext),
				"::",
				stringify!(height)
			)
		);
	}
	test_field_height();
	fn test_field_coded_width() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParserContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).coded_width) as usize - ptr as usize
			},
			320usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParserContext),
				"::",
				stringify!(coded_width)
			)
		);
	}
	test_field_coded_width();
	fn test_field_coded_height() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParserContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).coded_height) as usize - ptr as usize
			},
			324usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParserContext),
				"::",
				stringify!(coded_height)
			)
		);
	}
	test_field_coded_height();
	fn test_field_format() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParserContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize
			},
			328usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParserContext),
				"::",
				stringify!(format)
			)
		);
	}
	test_field_format();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVCodecParser {
	pub codec_ids: [::std::os::raw::c_int; 7usize],
	pub priv_data_size: ::std::os::raw::c_int,
	pub parser_init: ::std::option::Option<unsafe extern "C" fn(s: *mut AVCodecParserContext) -> ::std::os::raw::c_int>,
	pub parser_parse: ::std::option::Option<
		unsafe extern "C" fn(
			s: *mut AVCodecParserContext,
			avctx: *mut AVCodecContext,
			poutbuf: *mut *const u8,
			poutbuf_size: *mut ::std::os::raw::c_int,
			buf: *const u8,
			buf_size: ::std::os::raw::c_int,
		) -> ::std::os::raw::c_int,
	>,
	pub parser_close: ::std::option::Option<unsafe extern "C" fn(s: *mut AVCodecParserContext)>,
	pub split: ::std::option::Option<
		unsafe extern "C" fn(
			avctx: *mut AVCodecContext,
			buf: *const u8,
			buf_size: ::std::os::raw::c_int,
		) -> ::std::os::raw::c_int,
	>,
}
#[test]
fn bindgen_test_layout_AVCodecParser() {
	assert_eq!(
		::std::mem::size_of::<AVCodecParser>(),
		64usize,
		concat!("Size of: ", stringify!(AVCodecParser))
	);
	assert_eq!(
		::std::mem::align_of::<AVCodecParser>(),
		8usize,
		concat!("Alignment of ", stringify!(AVCodecParser))
	);
	fn test_field_codec_ids() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParser>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).codec_ids) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParser),
				"::",
				stringify!(codec_ids)
			)
		);
	}
	test_field_codec_ids();
	fn test_field_priv_data_size() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParser>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).priv_data_size) as usize - ptr as usize
			},
			28usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParser),
				"::",
				stringify!(priv_data_size)
			)
		);
	}
	test_field_priv_data_size();
	fn test_field_parser_init() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParser>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).parser_init) as usize - ptr as usize
			},
			32usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParser),
				"::",
				stringify!(parser_init)
			)
		);
	}
	test_field_parser_init();
	fn test_field_parser_parse() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParser>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).parser_parse) as usize - ptr as usize
			},
			40usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParser),
				"::",
				stringify!(parser_parse)
			)
		);
	}
	test_field_parser_parse();
	fn test_field_parser_close() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParser>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).parser_close) as usize - ptr as usize
			},
			48usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCodecParser),
				"::",
				stringify!(parser_close)
			)
		);
	}
	test_field_parser_close();
	fn test_field_split() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCodecParser>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).split) as usize - ptr as usize
			},
			56usize,
			concat!("Offset of field: ", stringify!(AVCodecParser), "::", stringify!(split))
		);
	}
	test_field_split();
}
extern "C" {
	pub fn av_parser_iterate(opaque: *mut *mut ::std::os::raw::c_void) -> *const AVCodecParser;
}
extern "C" {
	pub fn av_parser_init(codec_id: ::std::os::raw::c_int) -> *mut AVCodecParserContext;
}
extern "C" {
	pub fn av_parser_parse2(
		s: *mut AVCodecParserContext,
		avctx: *mut AVCodecContext,
		poutbuf: *mut *mut u8,
		poutbuf_size: *mut ::std::os::raw::c_int,
		buf: *const u8,
		buf_size: ::std::os::raw::c_int,
		pts: i64,
		dts: i64,
		pos: i64,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_parser_close(s: *mut AVCodecParserContext);
}
extern "C" {
	pub fn avcodec_encode_subtitle(
		avctx: *mut AVCodecContext,
		buf: *mut u8,
		buf_size: ::std::os::raw::c_int,
		sub: *const AVSubtitle,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avcodec_pix_fmt_to_codec_tag(pix_fmt: AVPixelFormat) -> ::std::os::raw::c_uint;
}
extern "C" {
	pub fn avcodec_find_best_pix_fmt_of_list(
		pix_fmt_list: *const AVPixelFormat,
		src_pix_fmt: AVPixelFormat,
		has_alpha: ::std::os::raw::c_int,
		loss_ptr: *mut ::std::os::raw::c_int,
	) -> AVPixelFormat;
}
extern "C" {
	pub fn avcodec_default_get_format(s: *mut AVCodecContext, fmt: *const AVPixelFormat) -> AVPixelFormat;
}
extern "C" {
	pub fn avcodec_string(
		buf: *mut ::std::os::raw::c_char,
		buf_size: ::std::os::raw::c_int,
		enc: *mut AVCodecContext,
		encode: ::std::os::raw::c_int,
	);
}
extern "C" {
	pub fn avcodec_default_execute(
		c: *mut AVCodecContext,
		func: ::std::option::Option<
			unsafe extern "C" fn(c2: *mut AVCodecContext, arg2: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
		>,
		arg: *mut ::std::os::raw::c_void,
		ret: *mut ::std::os::raw::c_int,
		count: ::std::os::raw::c_int,
		size: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avcodec_default_execute2(
		c: *mut AVCodecContext,
		func: ::std::option::Option<
			unsafe extern "C" fn(
				c2: *mut AVCodecContext,
				arg2: *mut ::std::os::raw::c_void,
				arg1: ::std::os::raw::c_int,
				arg2: ::std::os::raw::c_int,
			) -> ::std::os::raw::c_int,
		>,
		arg: *mut ::std::os::raw::c_void,
		ret: *mut ::std::os::raw::c_int,
		count: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avcodec_fill_audio_frame(
		frame: *mut AVFrame,
		nb_channels: ::std::os::raw::c_int,
		sample_fmt: AVSampleFormat,
		buf: *const u8,
		buf_size: ::std::os::raw::c_int,
		align: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avcodec_flush_buffers(avctx: *mut AVCodecContext);
}
extern "C" {
	pub fn av_get_audio_frame_duration(
		avctx: *mut AVCodecContext,
		frame_bytes: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_fast_padded_malloc(ptr: *mut ::std::os::raw::c_void, size: *mut ::std::os::raw::c_uint, min_size: size_t);
}
extern "C" {
	pub fn av_fast_padded_mallocz(
		ptr: *mut ::std::os::raw::c_void,
		size: *mut ::std::os::raw::c_uint,
		min_size: size_t,
	);
}
extern "C" {
	pub fn avcodec_is_open(s: *mut AVCodecContext) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVIOInterruptCB {
	pub callback:
		::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int>,
	pub opaque: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_AVIOInterruptCB() {
	assert_eq!(
		::std::mem::size_of::<AVIOInterruptCB>(),
		16usize,
		concat!("Size of: ", stringify!(AVIOInterruptCB))
	);
	assert_eq!(
		::std::mem::align_of::<AVIOInterruptCB>(),
		8usize,
		concat!("Alignment of ", stringify!(AVIOInterruptCB))
	);
	fn test_field_callback() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVIOInterruptCB>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).callback) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(AVIOInterruptCB),
				"::",
				stringify!(callback)
			)
		);
	}
	test_field_callback();
	fn test_field_opaque() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVIOInterruptCB>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).opaque) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(AVIOInterruptCB),
				"::",
				stringify!(opaque)
			)
		);
	}
	test_field_opaque();
}
pub const AVIODirEntryType_AVIO_ENTRY_UNKNOWN: AVIODirEntryType = 0;
pub const AVIODirEntryType_AVIO_ENTRY_BLOCK_DEVICE: AVIODirEntryType = 1;
pub const AVIODirEntryType_AVIO_ENTRY_CHARACTER_DEVICE: AVIODirEntryType = 2;
pub const AVIODirEntryType_AVIO_ENTRY_DIRECTORY: AVIODirEntryType = 3;
pub const AVIODirEntryType_AVIO_ENTRY_NAMED_PIPE: AVIODirEntryType = 4;
pub const AVIODirEntryType_AVIO_ENTRY_SYMBOLIC_LINK: AVIODirEntryType = 5;
pub const AVIODirEntryType_AVIO_ENTRY_SOCKET: AVIODirEntryType = 6;
pub const AVIODirEntryType_AVIO_ENTRY_FILE: AVIODirEntryType = 7;
pub const AVIODirEntryType_AVIO_ENTRY_SERVER: AVIODirEntryType = 8;
pub const AVIODirEntryType_AVIO_ENTRY_SHARE: AVIODirEntryType = 9;
pub const AVIODirEntryType_AVIO_ENTRY_WORKGROUP: AVIODirEntryType = 10;
pub type AVIODirEntryType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVIODirEntry {
	pub name: *mut ::std::os::raw::c_char,
	pub type_: ::std::os::raw::c_int,
	pub utf8: ::std::os::raw::c_int,
	pub size: i64,
	pub modification_timestamp: i64,
	pub access_timestamp: i64,
	pub status_change_timestamp: i64,
	pub user_id: i64,
	pub group_id: i64,
	pub filemode: i64,
}
#[test]
fn bindgen_test_layout_AVIODirEntry() {
	assert_eq!(
		::std::mem::size_of::<AVIODirEntry>(),
		72usize,
		concat!("Size of: ", stringify!(AVIODirEntry))
	);
	assert_eq!(
		::std::mem::align_of::<AVIODirEntry>(),
		8usize,
		concat!("Alignment of ", stringify!(AVIODirEntry))
	);
	fn test_field_name() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVIODirEntry>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
			},
			0usize,
			concat!("Offset of field: ", stringify!(AVIODirEntry), "::", stringify!(name))
		);
	}
	test_field_name();
	fn test_field_type() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVIODirEntry>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
			},
			8usize,
			concat!("Offset of field: ", stringify!(AVIODirEntry), "::", stringify!(type_))
		);
	}
	test_field_type();
	fn test_field_utf8() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVIODirEntry>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).utf8) as usize - ptr as usize
			},
			12usize,
			concat!("Offset of field: ", stringify!(AVIODirEntry), "::", stringify!(utf8))
		);
	}
	test_field_utf8();
	fn test_field_size() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVIODirEntry>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
			},
			16usize,
			concat!("Offset of field: ", stringify!(AVIODirEntry), "::", stringify!(size))
		);
	}
	test_field_size();
	fn test_field_modification_timestamp() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVIODirEntry>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).modification_timestamp) as usize - ptr as usize
			},
			24usize,
			concat!(
				"Offset of field: ",
				stringify!(AVIODirEntry),
				"::",
				stringify!(modification_timestamp)
			)
		);
	}
	test_field_modification_timestamp();
	fn test_field_access_timestamp() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVIODirEntry>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).access_timestamp) as usize - ptr as usize
			},
			32usize,
			concat!(
				"Offset of field: ",
				stringify!(AVIODirEntry),
				"::",
				stringify!(access_timestamp)
			)
		);
	}
	test_field_access_timestamp();
	fn test_field_status_change_timestamp() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVIODirEntry>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).status_change_timestamp) as usize - ptr as usize
			},
			40usize,
			concat!(
				"Offset of field: ",
				stringify!(AVIODirEntry),
				"::",
				stringify!(status_change_timestamp)
			)
		);
	}
	test_field_status_change_timestamp();
	fn test_field_user_id() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVIODirEntry>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).user_id) as usize - ptr as usize
			},
			48usize,
			concat!("Offset of field: ", stringify!(AVIODirEntry), "::", stringify!(user_id))
		);
	}
	test_field_user_id();
	fn test_field_group_id() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVIODirEntry>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).group_id) as usize - ptr as usize
			},
			56usize,
			concat!(
				"Offset of field: ",
				stringify!(AVIODirEntry),
				"::",
				stringify!(group_id)
			)
		);
	}
	test_field_group_id();
	fn test_field_filemode() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVIODirEntry>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).filemode) as usize - ptr as usize
			},
			64usize,
			concat!(
				"Offset of field: ",
				stringify!(AVIODirEntry),
				"::",
				stringify!(filemode)
			)
		);
	}
	test_field_filemode();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVIODirContext {
	pub url_context: *mut URLContext,
}
#[test]
fn bindgen_test_layout_AVIODirContext() {
	assert_eq!(
		::std::mem::size_of::<AVIODirContext>(),
		8usize,
		concat!("Size of: ", stringify!(AVIODirContext))
	);
	assert_eq!(
		::std::mem::align_of::<AVIODirContext>(),
		8usize,
		concat!("Alignment of ", stringify!(AVIODirContext))
	);
	fn test_field_url_context() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVIODirContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).url_context) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(AVIODirContext),
				"::",
				stringify!(url_context)
			)
		);
	}
	test_field_url_context();
}
pub const AVIODataMarkerType_AVIO_DATA_MARKER_HEADER: AVIODataMarkerType = 0;
pub const AVIODataMarkerType_AVIO_DATA_MARKER_SYNC_POINT: AVIODataMarkerType = 1;
pub const AVIODataMarkerType_AVIO_DATA_MARKER_BOUNDARY_POINT: AVIODataMarkerType = 2;
pub const AVIODataMarkerType_AVIO_DATA_MARKER_UNKNOWN: AVIODataMarkerType = 3;
pub const AVIODataMarkerType_AVIO_DATA_MARKER_TRAILER: AVIODataMarkerType = 4;
pub const AVIODataMarkerType_AVIO_DATA_MARKER_FLUSH_POINT: AVIODataMarkerType = 5;
pub type AVIODataMarkerType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVIOContext {
	pub av_class: *const AVClass,
	pub buffer: *mut ::std::os::raw::c_uchar,
	pub buffer_size: ::std::os::raw::c_int,
	pub buf_ptr: *mut ::std::os::raw::c_uchar,
	pub buf_end: *mut ::std::os::raw::c_uchar,
	pub opaque: *mut ::std::os::raw::c_void,
	pub read_packet: ::std::option::Option<
		unsafe extern "C" fn(
			opaque: *mut ::std::os::raw::c_void,
			buf: *mut u8,
			buf_size: ::std::os::raw::c_int,
		) -> ::std::os::raw::c_int,
	>,
	pub write_packet: ::std::option::Option<
		unsafe extern "C" fn(
			opaque: *mut ::std::os::raw::c_void,
			buf: *mut u8,
			buf_size: ::std::os::raw::c_int,
		) -> ::std::os::raw::c_int,
	>,
	pub seek: ::std::option::Option<
		unsafe extern "C" fn(opaque: *mut ::std::os::raw::c_void, offset: i64, whence: ::std::os::raw::c_int) -> i64,
	>,
	pub pos: i64,
	pub eof_reached: ::std::os::raw::c_int,
	pub error: ::std::os::raw::c_int,
	pub write_flag: ::std::os::raw::c_int,
	pub max_packet_size: ::std::os::raw::c_int,
	pub min_packet_size: ::std::os::raw::c_int,
	pub checksum: ::std::os::raw::c_ulong,
	pub checksum_ptr: *mut ::std::os::raw::c_uchar,
	pub update_checksum: ::std::option::Option<
		unsafe extern "C" fn(
			checksum: ::std::os::raw::c_ulong,
			buf: *const u8,
			size: ::std::os::raw::c_uint,
		) -> ::std::os::raw::c_ulong,
	>,
	pub read_pause: ::std::option::Option<
		unsafe extern "C" fn(
			opaque: *mut ::std::os::raw::c_void,
			pause: ::std::os::raw::c_int,
		) -> ::std::os::raw::c_int,
	>,
	pub read_seek: ::std::option::Option<
		unsafe extern "C" fn(
			opaque: *mut ::std::os::raw::c_void,
			stream_index: ::std::os::raw::c_int,
			timestamp: i64,
			flags: ::std::os::raw::c_int,
		) -> i64,
	>,
	pub seekable: ::std::os::raw::c_int,
	pub direct: ::std::os::raw::c_int,
	pub protocol_whitelist: *const ::std::os::raw::c_char,
	pub protocol_blacklist: *const ::std::os::raw::c_char,
	pub write_data_type: ::std::option::Option<
		unsafe extern "C" fn(
			opaque: *mut ::std::os::raw::c_void,
			buf: *mut u8,
			buf_size: ::std::os::raw::c_int,
			type_: AVIODataMarkerType,
			time: i64,
		) -> ::std::os::raw::c_int,
	>,
	pub ignore_boundary_point: ::std::os::raw::c_int,
	pub written: i64,
	pub buf_ptr_max: *mut ::std::os::raw::c_uchar,
	pub bytes_read: i64,
	pub bytes_written: i64,
}
#[test]
fn bindgen_test_layout_AVIOContext() {
	assert_eq!(
		::std::mem::size_of::<AVIOContext>(),
		216usize,
		concat!("Size of: ", stringify!(AVIOContext))
	);
	assert_eq!(
		::std::mem::align_of::<AVIOContext>(),
		8usize,
		concat!("Alignment of ", stringify!(AVIOContext))
	);
	fn test_field_av_class() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVIOContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).av_class) as usize - ptr as usize
			},
			0usize,
			concat!("Offset of field: ", stringify!(AVIOContext), "::", stringify!(av_class))
		);
	}
	test_field_av_class();
	fn test_field_buffer() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVIOContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize
			},
			8usize,
			concat!("Offset of field: ", stringify!(AVIOContext), "::", stringify!(buffer))
		);
	}
	test_field_buffer();
	fn test_field_buffer_size() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVIOContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).buffer_size) as usize - ptr as usize
			},
			16usize,
			concat!(
				"Offset of field: ",
				stringify!(AVIOContext),
				"::",
				stringify!(buffer_size)
			)
		);
	}
	test_field_buffer_size();
	fn test_field_buf_ptr() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVIOContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).buf_ptr) as usize - ptr as usize
			},
			24usize,
			concat!("Offset of field: ", stringify!(AVIOContext), "::", stringify!(buf_ptr))
		);
	}
	test_field_buf_ptr();
	fn test_field_buf_end() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVIOContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).buf_end) as usize - ptr as usize
			},
			32usize,
			concat!("Offset of field: ", stringify!(AVIOContext), "::", stringify!(buf_end))
		);
	}
	test_field_buf_end();
	fn test_field_opaque() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVIOContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).opaque) as usize - ptr as usize
			},
			40usize,
			concat!("Offset of field: ", stringify!(AVIOContext), "::", stringify!(opaque))
		);
	}
	test_field_opaque();
	fn test_field_read_packet() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVIOContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).read_packet) as usize - ptr as usize
			},
			48usize,
			concat!(
				"Offset of field: ",
				stringify!(AVIOContext),
				"::",
				stringify!(read_packet)
			)
		);
	}
	test_field_read_packet();
	fn test_field_write_packet() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVIOContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).write_packet) as usize - ptr as usize
			},
			56usize,
			concat!(
				"Offset of field: ",
				stringify!(AVIOContext),
				"::",
				stringify!(write_packet)
			)
		);
	}
	test_field_write_packet();
	fn test_field_seek() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVIOContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).seek) as usize - ptr as usize
			},
			64usize,
			concat!("Offset of field: ", stringify!(AVIOContext), "::", stringify!(seek))
		);
	}
	test_field_seek();
	fn test_field_pos() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVIOContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).pos) as usize - ptr as usize
			},
			72usize,
			concat!("Offset of field: ", stringify!(AVIOContext), "::", stringify!(pos))
		);
	}
	test_field_pos();
	fn test_field_eof_reached() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVIOContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).eof_reached) as usize - ptr as usize
			},
			80usize,
			concat!(
				"Offset of field: ",
				stringify!(AVIOContext),
				"::",
				stringify!(eof_reached)
			)
		);
	}
	test_field_eof_reached();
	fn test_field_error() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVIOContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize
			},
			84usize,
			concat!("Offset of field: ", stringify!(AVIOContext), "::", stringify!(error))
		);
	}
	test_field_error();
	fn test_field_write_flag() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVIOContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).write_flag) as usize - ptr as usize
			},
			88usize,
			concat!(
				"Offset of field: ",
				stringify!(AVIOContext),
				"::",
				stringify!(write_flag)
			)
		);
	}
	test_field_write_flag();
	fn test_field_max_packet_size() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVIOContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).max_packet_size) as usize - ptr as usize
			},
			92usize,
			concat!(
				"Offset of field: ",
				stringify!(AVIOContext),
				"::",
				stringify!(max_packet_size)
			)
		);
	}
	test_field_max_packet_size();
	fn test_field_min_packet_size() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVIOContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).min_packet_size) as usize - ptr as usize
			},
			96usize,
			concat!(
				"Offset of field: ",
				stringify!(AVIOContext),
				"::",
				stringify!(min_packet_size)
			)
		);
	}
	test_field_min_packet_size();
	fn test_field_checksum() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVIOContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).checksum) as usize - ptr as usize
			},
			104usize,
			concat!("Offset of field: ", stringify!(AVIOContext), "::", stringify!(checksum))
		);
	}
	test_field_checksum();
	fn test_field_checksum_ptr() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVIOContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).checksum_ptr) as usize - ptr as usize
			},
			112usize,
			concat!(
				"Offset of field: ",
				stringify!(AVIOContext),
				"::",
				stringify!(checksum_ptr)
			)
		);
	}
	test_field_checksum_ptr();
	fn test_field_update_checksum() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVIOContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).update_checksum) as usize - ptr as usize
			},
			120usize,
			concat!(
				"Offset of field: ",
				stringify!(AVIOContext),
				"::",
				stringify!(update_checksum)
			)
		);
	}
	test_field_update_checksum();
	fn test_field_read_pause() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVIOContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).read_pause) as usize - ptr as usize
			},
			128usize,
			concat!(
				"Offset of field: ",
				stringify!(AVIOContext),
				"::",
				stringify!(read_pause)
			)
		);
	}
	test_field_read_pause();
	fn test_field_read_seek() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVIOContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).read_seek) as usize - ptr as usize
			},
			136usize,
			concat!(
				"Offset of field: ",
				stringify!(AVIOContext),
				"::",
				stringify!(read_seek)
			)
		);
	}
	test_field_read_seek();
	fn test_field_seekable() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVIOContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).seekable) as usize - ptr as usize
			},
			144usize,
			concat!("Offset of field: ", stringify!(AVIOContext), "::", stringify!(seekable))
		);
	}
	test_field_seekable();
	fn test_field_direct() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVIOContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).direct) as usize - ptr as usize
			},
			148usize,
			concat!("Offset of field: ", stringify!(AVIOContext), "::", stringify!(direct))
		);
	}
	test_field_direct();
	fn test_field_protocol_whitelist() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVIOContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).protocol_whitelist) as usize - ptr as usize
			},
			152usize,
			concat!(
				"Offset of field: ",
				stringify!(AVIOContext),
				"::",
				stringify!(protocol_whitelist)
			)
		);
	}
	test_field_protocol_whitelist();
	fn test_field_protocol_blacklist() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVIOContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).protocol_blacklist) as usize - ptr as usize
			},
			160usize,
			concat!(
				"Offset of field: ",
				stringify!(AVIOContext),
				"::",
				stringify!(protocol_blacklist)
			)
		);
	}
	test_field_protocol_blacklist();
	fn test_field_write_data_type() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVIOContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).write_data_type) as usize - ptr as usize
			},
			168usize,
			concat!(
				"Offset of field: ",
				stringify!(AVIOContext),
				"::",
				stringify!(write_data_type)
			)
		);
	}
	test_field_write_data_type();
	fn test_field_ignore_boundary_point() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVIOContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).ignore_boundary_point) as usize - ptr as usize
			},
			176usize,
			concat!(
				"Offset of field: ",
				stringify!(AVIOContext),
				"::",
				stringify!(ignore_boundary_point)
			)
		);
	}
	test_field_ignore_boundary_point();
	fn test_field_written() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVIOContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).written) as usize - ptr as usize
			},
			184usize,
			concat!("Offset of field: ", stringify!(AVIOContext), "::", stringify!(written))
		);
	}
	test_field_written();
	fn test_field_buf_ptr_max() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVIOContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).buf_ptr_max) as usize - ptr as usize
			},
			192usize,
			concat!(
				"Offset of field: ",
				stringify!(AVIOContext),
				"::",
				stringify!(buf_ptr_max)
			)
		);
	}
	test_field_buf_ptr_max();
	fn test_field_bytes_read() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVIOContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).bytes_read) as usize - ptr as usize
			},
			200usize,
			concat!(
				"Offset of field: ",
				stringify!(AVIOContext),
				"::",
				stringify!(bytes_read)
			)
		);
	}
	test_field_bytes_read();
	fn test_field_bytes_written() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVIOContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).bytes_written) as usize - ptr as usize
			},
			208usize,
			concat!(
				"Offset of field: ",
				stringify!(AVIOContext),
				"::",
				stringify!(bytes_written)
			)
		);
	}
	test_field_bytes_written();
}
extern "C" {
	pub fn avio_find_protocol_name(url: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
}
extern "C" {
	pub fn avio_check(url: *const ::std::os::raw::c_char, flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avio_open_dir(
		s: *mut *mut AVIODirContext,
		url: *const ::std::os::raw::c_char,
		options: *mut *mut AVDictionary,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avio_read_dir(s: *mut AVIODirContext, next: *mut *mut AVIODirEntry) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avio_close_dir(s: *mut *mut AVIODirContext) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avio_free_directory_entry(entry: *mut *mut AVIODirEntry);
}
extern "C" {
	pub fn avio_alloc_context(
		buffer: *mut ::std::os::raw::c_uchar,
		buffer_size: ::std::os::raw::c_int,
		write_flag: ::std::os::raw::c_int,
		opaque: *mut ::std::os::raw::c_void,
		read_packet: ::std::option::Option<
			unsafe extern "C" fn(
				opaque: *mut ::std::os::raw::c_void,
				buf: *mut u8,
				buf_size: ::std::os::raw::c_int,
			) -> ::std::os::raw::c_int,
		>,
		write_packet: ::std::option::Option<
			unsafe extern "C" fn(
				opaque: *mut ::std::os::raw::c_void,
				buf: *mut u8,
				buf_size: ::std::os::raw::c_int,
			) -> ::std::os::raw::c_int,
		>,
		seek: ::std::option::Option<
			unsafe extern "C" fn(
				opaque: *mut ::std::os::raw::c_void,
				offset: i64,
				whence: ::std::os::raw::c_int,
			) -> i64,
		>,
	) -> *mut AVIOContext;
}
extern "C" {
	pub fn avio_context_free(s: *mut *mut AVIOContext);
}
extern "C" {
	pub fn avio_w8(s: *mut AVIOContext, b: ::std::os::raw::c_int);
}
extern "C" {
	pub fn avio_write(s: *mut AVIOContext, buf: *const ::std::os::raw::c_uchar, size: ::std::os::raw::c_int);
}
extern "C" {
	pub fn avio_wl64(s: *mut AVIOContext, val: u64);
}
extern "C" {
	pub fn avio_wb64(s: *mut AVIOContext, val: u64);
}
extern "C" {
	pub fn avio_wl32(s: *mut AVIOContext, val: ::std::os::raw::c_uint);
}
extern "C" {
	pub fn avio_wb32(s: *mut AVIOContext, val: ::std::os::raw::c_uint);
}
extern "C" {
	pub fn avio_wl24(s: *mut AVIOContext, val: ::std::os::raw::c_uint);
}
extern "C" {
	pub fn avio_wb24(s: *mut AVIOContext, val: ::std::os::raw::c_uint);
}
extern "C" {
	pub fn avio_wl16(s: *mut AVIOContext, val: ::std::os::raw::c_uint);
}
extern "C" {
	pub fn avio_wb16(s: *mut AVIOContext, val: ::std::os::raw::c_uint);
}
extern "C" {
	pub fn avio_put_str(s: *mut AVIOContext, str_: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avio_put_str16le(s: *mut AVIOContext, str_: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avio_put_str16be(s: *mut AVIOContext, str_: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avio_write_marker(s: *mut AVIOContext, time: i64, type_: AVIODataMarkerType);
}
extern "C" {
	pub fn avio_seek(s: *mut AVIOContext, offset: i64, whence: ::std::os::raw::c_int) -> i64;
}
extern "C" {
	pub fn avio_skip(s: *mut AVIOContext, offset: i64) -> i64;
}
extern "C" {
	pub fn avio_size(s: *mut AVIOContext) -> i64;
}
extern "C" {
	pub fn avio_feof(s: *mut AVIOContext) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avio_vprintf(
		s: *mut AVIOContext,
		fmt: *const ::std::os::raw::c_char,
		ap: *mut __va_list_tag,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avio_printf(s: *mut AVIOContext, fmt: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avio_print_string_array(s: *mut AVIOContext, strings: *mut *const ::std::os::raw::c_char);
}
extern "C" {
	pub fn avio_flush(s: *mut AVIOContext);
}
extern "C" {
	pub fn avio_read(
		s: *mut AVIOContext,
		buf: *mut ::std::os::raw::c_uchar,
		size: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avio_read_partial(
		s: *mut AVIOContext,
		buf: *mut ::std::os::raw::c_uchar,
		size: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avio_r8(s: *mut AVIOContext) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avio_rl16(s: *mut AVIOContext) -> ::std::os::raw::c_uint;
}
extern "C" {
	pub fn avio_rl24(s: *mut AVIOContext) -> ::std::os::raw::c_uint;
}
extern "C" {
	pub fn avio_rl32(s: *mut AVIOContext) -> ::std::os::raw::c_uint;
}
extern "C" {
	pub fn avio_rl64(s: *mut AVIOContext) -> u64;
}
extern "C" {
	pub fn avio_rb16(s: *mut AVIOContext) -> ::std::os::raw::c_uint;
}
extern "C" {
	pub fn avio_rb24(s: *mut AVIOContext) -> ::std::os::raw::c_uint;
}
extern "C" {
	pub fn avio_rb32(s: *mut AVIOContext) -> ::std::os::raw::c_uint;
}
extern "C" {
	pub fn avio_rb64(s: *mut AVIOContext) -> u64;
}
extern "C" {
	pub fn avio_get_str(
		pb: *mut AVIOContext,
		maxlen: ::std::os::raw::c_int,
		buf: *mut ::std::os::raw::c_char,
		buflen: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avio_get_str16le(
		pb: *mut AVIOContext,
		maxlen: ::std::os::raw::c_int,
		buf: *mut ::std::os::raw::c_char,
		buflen: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avio_get_str16be(
		pb: *mut AVIOContext,
		maxlen: ::std::os::raw::c_int,
		buf: *mut ::std::os::raw::c_char,
		buflen: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avio_open(
		s: *mut *mut AVIOContext,
		url: *const ::std::os::raw::c_char,
		flags: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avio_open2(
		s: *mut *mut AVIOContext,
		url: *const ::std::os::raw::c_char,
		flags: ::std::os::raw::c_int,
		int_cb: *const AVIOInterruptCB,
		options: *mut *mut AVDictionary,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avio_close(s: *mut AVIOContext) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avio_closep(s: *mut *mut AVIOContext) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avio_open_dyn_buf(s: *mut *mut AVIOContext) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avio_get_dyn_buf(s: *mut AVIOContext, pbuffer: *mut *mut u8) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avio_close_dyn_buf(s: *mut AVIOContext, pbuffer: *mut *mut u8) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avio_enum_protocols(
		opaque: *mut *mut ::std::os::raw::c_void,
		output: ::std::os::raw::c_int,
	) -> *const ::std::os::raw::c_char;
}
extern "C" {
	pub fn avio_protocol_get_class(name: *const ::std::os::raw::c_char) -> *const AVClass;
}
extern "C" {
	pub fn avio_pause(h: *mut AVIOContext, pause: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avio_seek_time(
		h: *mut AVIOContext,
		stream_index: ::std::os::raw::c_int,
		timestamp: i64,
		flags: ::std::os::raw::c_int,
	) -> i64;
}
extern "C" {
	pub fn avio_read_to_bprint(h: *mut AVIOContext, pb: *mut AVBPrint, max_size: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avio_accept(s: *mut AVIOContext, c: *mut *mut AVIOContext) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avio_handshake(c: *mut AVIOContext) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVDeviceInfoList {
	_unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVDeviceCapabilitiesQuery {
	_unused: [u8; 0],
}
extern "C" {
	pub fn av_get_packet(s: *mut AVIOContext, pkt: *mut AVPacket, size: ::std::os::raw::c_int)
		-> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_append_packet(
		s: *mut AVIOContext,
		pkt: *mut AVPacket,
		size: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVCodecTag {
	_unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVProbeData {
	pub filename: *const ::std::os::raw::c_char,
	pub buf: *mut ::std::os::raw::c_uchar,
	pub buf_size: ::std::os::raw::c_int,
	pub mime_type: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_AVProbeData() {
	assert_eq!(
		::std::mem::size_of::<AVProbeData>(),
		32usize,
		concat!("Size of: ", stringify!(AVProbeData))
	);
	assert_eq!(
		::std::mem::align_of::<AVProbeData>(),
		8usize,
		concat!("Alignment of ", stringify!(AVProbeData))
	);
	fn test_field_filename() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVProbeData>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).filename) as usize - ptr as usize
			},
			0usize,
			concat!("Offset of field: ", stringify!(AVProbeData), "::", stringify!(filename))
		);
	}
	test_field_filename();
	fn test_field_buf() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVProbeData>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize
			},
			8usize,
			concat!("Offset of field: ", stringify!(AVProbeData), "::", stringify!(buf))
		);
	}
	test_field_buf();
	fn test_field_buf_size() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVProbeData>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).buf_size) as usize - ptr as usize
			},
			16usize,
			concat!("Offset of field: ", stringify!(AVProbeData), "::", stringify!(buf_size))
		);
	}
	test_field_buf_size();
	fn test_field_mime_type() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVProbeData>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).mime_type) as usize - ptr as usize
			},
			24usize,
			concat!(
				"Offset of field: ",
				stringify!(AVProbeData),
				"::",
				stringify!(mime_type)
			)
		);
	}
	test_field_mime_type();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVOutputFormat {
	pub name: *const ::std::os::raw::c_char,
	pub long_name: *const ::std::os::raw::c_char,
	pub mime_type: *const ::std::os::raw::c_char,
	pub extensions: *const ::std::os::raw::c_char,
	pub audio_codec: AVCodecID,
	pub video_codec: AVCodecID,
	pub subtitle_codec: AVCodecID,
	pub flags: ::std::os::raw::c_int,
	pub codec_tag: *const *const AVCodecTag,
	pub priv_class: *const AVClass,
	pub priv_data_size: ::std::os::raw::c_int,
	pub flags_internal: ::std::os::raw::c_int,
	pub write_header: ::std::option::Option<unsafe extern "C" fn(arg1: *mut AVFormatContext) -> ::std::os::raw::c_int>,
	pub write_packet: ::std::option::Option<
		unsafe extern "C" fn(arg1: *mut AVFormatContext, pkt: *mut AVPacket) -> ::std::os::raw::c_int,
	>,
	pub write_trailer: ::std::option::Option<unsafe extern "C" fn(arg1: *mut AVFormatContext) -> ::std::os::raw::c_int>,
	pub interleave_packet: ::std::option::Option<
		unsafe extern "C" fn(
			s: *mut AVFormatContext,
			pkt: *mut AVPacket,
			flush: ::std::os::raw::c_int,
			has_packet: ::std::os::raw::c_int,
		) -> ::std::os::raw::c_int,
	>,
	pub query_codec: ::std::option::Option<
		unsafe extern "C" fn(id: AVCodecID, std_compliance: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
	>,
	pub get_output_timestamp: ::std::option::Option<
		unsafe extern "C" fn(s: *mut AVFormatContext, stream: ::std::os::raw::c_int, dts: *mut i64, wall: *mut i64),
	>,
	pub control_message: ::std::option::Option<
		unsafe extern "C" fn(
			s: *mut AVFormatContext,
			type_: ::std::os::raw::c_int,
			data: *mut ::std::os::raw::c_void,
			data_size: size_t,
		) -> ::std::os::raw::c_int,
	>,
	pub write_uncoded_frame: ::std::option::Option<
		unsafe extern "C" fn(
			arg1: *mut AVFormatContext,
			stream_index: ::std::os::raw::c_int,
			frame: *mut *mut AVFrame,
			flags: ::std::os::raw::c_uint,
		) -> ::std::os::raw::c_int,
	>,
	pub get_device_list: ::std::option::Option<
		unsafe extern "C" fn(s: *mut AVFormatContext, device_list: *mut AVDeviceInfoList) -> ::std::os::raw::c_int,
	>,
	pub data_codec: AVCodecID,
	pub init: ::std::option::Option<unsafe extern "C" fn(arg1: *mut AVFormatContext) -> ::std::os::raw::c_int>,
	pub deinit: ::std::option::Option<unsafe extern "C" fn(arg1: *mut AVFormatContext)>,
	pub check_bitstream: ::std::option::Option<
		unsafe extern "C" fn(s: *mut AVFormatContext, st: *mut AVStream, pkt: *const AVPacket) -> ::std::os::raw::c_int,
	>,
}
#[test]
fn bindgen_test_layout_AVOutputFormat() {
	assert_eq!(
		::std::mem::size_of::<AVOutputFormat>(),
		176usize,
		concat!("Size of: ", stringify!(AVOutputFormat))
	);
	assert_eq!(
		::std::mem::align_of::<AVOutputFormat>(),
		8usize,
		concat!("Alignment of ", stringify!(AVOutputFormat))
	);
	fn test_field_name() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVOutputFormat>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
			},
			0usize,
			concat!("Offset of field: ", stringify!(AVOutputFormat), "::", stringify!(name))
		);
	}
	test_field_name();
	fn test_field_long_name() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVOutputFormat>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).long_name) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(AVOutputFormat),
				"::",
				stringify!(long_name)
			)
		);
	}
	test_field_long_name();
	fn test_field_mime_type() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVOutputFormat>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).mime_type) as usize - ptr as usize
			},
			16usize,
			concat!(
				"Offset of field: ",
				stringify!(AVOutputFormat),
				"::",
				stringify!(mime_type)
			)
		);
	}
	test_field_mime_type();
	fn test_field_extensions() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVOutputFormat>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).extensions) as usize - ptr as usize
			},
			24usize,
			concat!(
				"Offset of field: ",
				stringify!(AVOutputFormat),
				"::",
				stringify!(extensions)
			)
		);
	}
	test_field_extensions();
	fn test_field_audio_codec() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVOutputFormat>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).audio_codec) as usize - ptr as usize
			},
			32usize,
			concat!(
				"Offset of field: ",
				stringify!(AVOutputFormat),
				"::",
				stringify!(audio_codec)
			)
		);
	}
	test_field_audio_codec();
	fn test_field_video_codec() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVOutputFormat>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).video_codec) as usize - ptr as usize
			},
			36usize,
			concat!(
				"Offset of field: ",
				stringify!(AVOutputFormat),
				"::",
				stringify!(video_codec)
			)
		);
	}
	test_field_video_codec();
	fn test_field_subtitle_codec() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVOutputFormat>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).subtitle_codec) as usize - ptr as usize
			},
			40usize,
			concat!(
				"Offset of field: ",
				stringify!(AVOutputFormat),
				"::",
				stringify!(subtitle_codec)
			)
		);
	}
	test_field_subtitle_codec();
	fn test_field_flags() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVOutputFormat>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
			},
			44usize,
			concat!("Offset of field: ", stringify!(AVOutputFormat), "::", stringify!(flags))
		);
	}
	test_field_flags();
	fn test_field_codec_tag() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVOutputFormat>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).codec_tag) as usize - ptr as usize
			},
			48usize,
			concat!(
				"Offset of field: ",
				stringify!(AVOutputFormat),
				"::",
				stringify!(codec_tag)
			)
		);
	}
	test_field_codec_tag();
	fn test_field_priv_class() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVOutputFormat>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).priv_class) as usize - ptr as usize
			},
			56usize,
			concat!(
				"Offset of field: ",
				stringify!(AVOutputFormat),
				"::",
				stringify!(priv_class)
			)
		);
	}
	test_field_priv_class();
	fn test_field_priv_data_size() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVOutputFormat>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).priv_data_size) as usize - ptr as usize
			},
			64usize,
			concat!(
				"Offset of field: ",
				stringify!(AVOutputFormat),
				"::",
				stringify!(priv_data_size)
			)
		);
	}
	test_field_priv_data_size();
	fn test_field_flags_internal() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVOutputFormat>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).flags_internal) as usize - ptr as usize
			},
			68usize,
			concat!(
				"Offset of field: ",
				stringify!(AVOutputFormat),
				"::",
				stringify!(flags_internal)
			)
		);
	}
	test_field_flags_internal();
	fn test_field_write_header() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVOutputFormat>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).write_header) as usize - ptr as usize
			},
			72usize,
			concat!(
				"Offset of field: ",
				stringify!(AVOutputFormat),
				"::",
				stringify!(write_header)
			)
		);
	}
	test_field_write_header();
	fn test_field_write_packet() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVOutputFormat>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).write_packet) as usize - ptr as usize
			},
			80usize,
			concat!(
				"Offset of field: ",
				stringify!(AVOutputFormat),
				"::",
				stringify!(write_packet)
			)
		);
	}
	test_field_write_packet();
	fn test_field_write_trailer() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVOutputFormat>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).write_trailer) as usize - ptr as usize
			},
			88usize,
			concat!(
				"Offset of field: ",
				stringify!(AVOutputFormat),
				"::",
				stringify!(write_trailer)
			)
		);
	}
	test_field_write_trailer();
	fn test_field_interleave_packet() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVOutputFormat>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).interleave_packet) as usize - ptr as usize
			},
			96usize,
			concat!(
				"Offset of field: ",
				stringify!(AVOutputFormat),
				"::",
				stringify!(interleave_packet)
			)
		);
	}
	test_field_interleave_packet();
	fn test_field_query_codec() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVOutputFormat>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).query_codec) as usize - ptr as usize
			},
			104usize,
			concat!(
				"Offset of field: ",
				stringify!(AVOutputFormat),
				"::",
				stringify!(query_codec)
			)
		);
	}
	test_field_query_codec();
	fn test_field_get_output_timestamp() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVOutputFormat>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).get_output_timestamp) as usize - ptr as usize
			},
			112usize,
			concat!(
				"Offset of field: ",
				stringify!(AVOutputFormat),
				"::",
				stringify!(get_output_timestamp)
			)
		);
	}
	test_field_get_output_timestamp();
	fn test_field_control_message() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVOutputFormat>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).control_message) as usize - ptr as usize
			},
			120usize,
			concat!(
				"Offset of field: ",
				stringify!(AVOutputFormat),
				"::",
				stringify!(control_message)
			)
		);
	}
	test_field_control_message();
	fn test_field_write_uncoded_frame() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVOutputFormat>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).write_uncoded_frame) as usize - ptr as usize
			},
			128usize,
			concat!(
				"Offset of field: ",
				stringify!(AVOutputFormat),
				"::",
				stringify!(write_uncoded_frame)
			)
		);
	}
	test_field_write_uncoded_frame();
	fn test_field_get_device_list() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVOutputFormat>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).get_device_list) as usize - ptr as usize
			},
			136usize,
			concat!(
				"Offset of field: ",
				stringify!(AVOutputFormat),
				"::",
				stringify!(get_device_list)
			)
		);
	}
	test_field_get_device_list();
	fn test_field_data_codec() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVOutputFormat>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).data_codec) as usize - ptr as usize
			},
			144usize,
			concat!(
				"Offset of field: ",
				stringify!(AVOutputFormat),
				"::",
				stringify!(data_codec)
			)
		);
	}
	test_field_data_codec();
	fn test_field_init() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVOutputFormat>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).init) as usize - ptr as usize
			},
			152usize,
			concat!("Offset of field: ", stringify!(AVOutputFormat), "::", stringify!(init))
		);
	}
	test_field_init();
	fn test_field_deinit() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVOutputFormat>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).deinit) as usize - ptr as usize
			},
			160usize,
			concat!(
				"Offset of field: ",
				stringify!(AVOutputFormat),
				"::",
				stringify!(deinit)
			)
		);
	}
	test_field_deinit();
	fn test_field_check_bitstream() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVOutputFormat>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).check_bitstream) as usize - ptr as usize
			},
			168usize,
			concat!(
				"Offset of field: ",
				stringify!(AVOutputFormat),
				"::",
				stringify!(check_bitstream)
			)
		);
	}
	test_field_check_bitstream();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVInputFormat {
	pub name: *const ::std::os::raw::c_char,
	pub long_name: *const ::std::os::raw::c_char,
	pub flags: ::std::os::raw::c_int,
	pub extensions: *const ::std::os::raw::c_char,
	pub codec_tag: *const *const AVCodecTag,
	pub priv_class: *const AVClass,
	pub mime_type: *const ::std::os::raw::c_char,
	pub raw_codec_id: ::std::os::raw::c_int,
	pub priv_data_size: ::std::os::raw::c_int,
	pub flags_internal: ::std::os::raw::c_int,
	pub read_probe: ::std::option::Option<unsafe extern "C" fn(arg1: *const AVProbeData) -> ::std::os::raw::c_int>,
	pub read_header: ::std::option::Option<unsafe extern "C" fn(arg1: *mut AVFormatContext) -> ::std::os::raw::c_int>,
	pub read_packet: ::std::option::Option<
		unsafe extern "C" fn(arg1: *mut AVFormatContext, pkt: *mut AVPacket) -> ::std::os::raw::c_int,
	>,
	pub read_close: ::std::option::Option<unsafe extern "C" fn(arg1: *mut AVFormatContext) -> ::std::os::raw::c_int>,
	pub read_seek: ::std::option::Option<
		unsafe extern "C" fn(
			arg1: *mut AVFormatContext,
			stream_index: ::std::os::raw::c_int,
			timestamp: i64,
			flags: ::std::os::raw::c_int,
		) -> ::std::os::raw::c_int,
	>,
	pub read_timestamp: ::std::option::Option<
		unsafe extern "C" fn(
			s: *mut AVFormatContext,
			stream_index: ::std::os::raw::c_int,
			pos: *mut i64,
			pos_limit: i64,
		) -> i64,
	>,
	pub read_play: ::std::option::Option<unsafe extern "C" fn(arg1: *mut AVFormatContext) -> ::std::os::raw::c_int>,
	pub read_pause: ::std::option::Option<unsafe extern "C" fn(arg1: *mut AVFormatContext) -> ::std::os::raw::c_int>,
	pub read_seek2: ::std::option::Option<
		unsafe extern "C" fn(
			s: *mut AVFormatContext,
			stream_index: ::std::os::raw::c_int,
			min_ts: i64,
			ts: i64,
			max_ts: i64,
			flags: ::std::os::raw::c_int,
		) -> ::std::os::raw::c_int,
	>,
	pub get_device_list: ::std::option::Option<
		unsafe extern "C" fn(s: *mut AVFormatContext, device_list: *mut AVDeviceInfoList) -> ::std::os::raw::c_int,
	>,
}
#[test]
fn bindgen_test_layout_AVInputFormat() {
	assert_eq!(
		::std::mem::size_of::<AVInputFormat>(),
		152usize,
		concat!("Size of: ", stringify!(AVInputFormat))
	);
	assert_eq!(
		::std::mem::align_of::<AVInputFormat>(),
		8usize,
		concat!("Alignment of ", stringify!(AVInputFormat))
	);
	fn test_field_name() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVInputFormat>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
			},
			0usize,
			concat!("Offset of field: ", stringify!(AVInputFormat), "::", stringify!(name))
		);
	}
	test_field_name();
	fn test_field_long_name() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVInputFormat>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).long_name) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(AVInputFormat),
				"::",
				stringify!(long_name)
			)
		);
	}
	test_field_long_name();
	fn test_field_flags() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVInputFormat>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
			},
			16usize,
			concat!("Offset of field: ", stringify!(AVInputFormat), "::", stringify!(flags))
		);
	}
	test_field_flags();
	fn test_field_extensions() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVInputFormat>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).extensions) as usize - ptr as usize
			},
			24usize,
			concat!(
				"Offset of field: ",
				stringify!(AVInputFormat),
				"::",
				stringify!(extensions)
			)
		);
	}
	test_field_extensions();
	fn test_field_codec_tag() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVInputFormat>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).codec_tag) as usize - ptr as usize
			},
			32usize,
			concat!(
				"Offset of field: ",
				stringify!(AVInputFormat),
				"::",
				stringify!(codec_tag)
			)
		);
	}
	test_field_codec_tag();
	fn test_field_priv_class() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVInputFormat>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).priv_class) as usize - ptr as usize
			},
			40usize,
			concat!(
				"Offset of field: ",
				stringify!(AVInputFormat),
				"::",
				stringify!(priv_class)
			)
		);
	}
	test_field_priv_class();
	fn test_field_mime_type() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVInputFormat>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).mime_type) as usize - ptr as usize
			},
			48usize,
			concat!(
				"Offset of field: ",
				stringify!(AVInputFormat),
				"::",
				stringify!(mime_type)
			)
		);
	}
	test_field_mime_type();
	fn test_field_raw_codec_id() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVInputFormat>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).raw_codec_id) as usize - ptr as usize
			},
			56usize,
			concat!(
				"Offset of field: ",
				stringify!(AVInputFormat),
				"::",
				stringify!(raw_codec_id)
			)
		);
	}
	test_field_raw_codec_id();
	fn test_field_priv_data_size() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVInputFormat>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).priv_data_size) as usize - ptr as usize
			},
			60usize,
			concat!(
				"Offset of field: ",
				stringify!(AVInputFormat),
				"::",
				stringify!(priv_data_size)
			)
		);
	}
	test_field_priv_data_size();
	fn test_field_flags_internal() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVInputFormat>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).flags_internal) as usize - ptr as usize
			},
			64usize,
			concat!(
				"Offset of field: ",
				stringify!(AVInputFormat),
				"::",
				stringify!(flags_internal)
			)
		);
	}
	test_field_flags_internal();
	fn test_field_read_probe() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVInputFormat>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).read_probe) as usize - ptr as usize
			},
			72usize,
			concat!(
				"Offset of field: ",
				stringify!(AVInputFormat),
				"::",
				stringify!(read_probe)
			)
		);
	}
	test_field_read_probe();
	fn test_field_read_header() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVInputFormat>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).read_header) as usize - ptr as usize
			},
			80usize,
			concat!(
				"Offset of field: ",
				stringify!(AVInputFormat),
				"::",
				stringify!(read_header)
			)
		);
	}
	test_field_read_header();
	fn test_field_read_packet() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVInputFormat>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).read_packet) as usize - ptr as usize
			},
			88usize,
			concat!(
				"Offset of field: ",
				stringify!(AVInputFormat),
				"::",
				stringify!(read_packet)
			)
		);
	}
	test_field_read_packet();
	fn test_field_read_close() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVInputFormat>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).read_close) as usize - ptr as usize
			},
			96usize,
			concat!(
				"Offset of field: ",
				stringify!(AVInputFormat),
				"::",
				stringify!(read_close)
			)
		);
	}
	test_field_read_close();
	fn test_field_read_seek() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVInputFormat>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).read_seek) as usize - ptr as usize
			},
			104usize,
			concat!(
				"Offset of field: ",
				stringify!(AVInputFormat),
				"::",
				stringify!(read_seek)
			)
		);
	}
	test_field_read_seek();
	fn test_field_read_timestamp() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVInputFormat>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).read_timestamp) as usize - ptr as usize
			},
			112usize,
			concat!(
				"Offset of field: ",
				stringify!(AVInputFormat),
				"::",
				stringify!(read_timestamp)
			)
		);
	}
	test_field_read_timestamp();
	fn test_field_read_play() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVInputFormat>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).read_play) as usize - ptr as usize
			},
			120usize,
			concat!(
				"Offset of field: ",
				stringify!(AVInputFormat),
				"::",
				stringify!(read_play)
			)
		);
	}
	test_field_read_play();
	fn test_field_read_pause() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVInputFormat>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).read_pause) as usize - ptr as usize
			},
			128usize,
			concat!(
				"Offset of field: ",
				stringify!(AVInputFormat),
				"::",
				stringify!(read_pause)
			)
		);
	}
	test_field_read_pause();
	fn test_field_read_seek2() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVInputFormat>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).read_seek2) as usize - ptr as usize
			},
			136usize,
			concat!(
				"Offset of field: ",
				stringify!(AVInputFormat),
				"::",
				stringify!(read_seek2)
			)
		);
	}
	test_field_read_seek2();
	fn test_field_get_device_list() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVInputFormat>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).get_device_list) as usize - ptr as usize
			},
			144usize,
			concat!(
				"Offset of field: ",
				stringify!(AVInputFormat),
				"::",
				stringify!(get_device_list)
			)
		);
	}
	test_field_get_device_list();
}
pub const AVStreamParseType_AVSTREAM_PARSE_NONE: AVStreamParseType = 0;
pub const AVStreamParseType_AVSTREAM_PARSE_FULL: AVStreamParseType = 1;
pub const AVStreamParseType_AVSTREAM_PARSE_HEADERS: AVStreamParseType = 2;
pub const AVStreamParseType_AVSTREAM_PARSE_TIMESTAMPS: AVStreamParseType = 3;
pub const AVStreamParseType_AVSTREAM_PARSE_FULL_ONCE: AVStreamParseType = 4;
pub const AVStreamParseType_AVSTREAM_PARSE_FULL_RAW: AVStreamParseType = 5;
pub type AVStreamParseType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVIndexEntry {
	pub pos: i64,
	pub timestamp: i64,
	pub _bitfield_align_1: [u32; 0],
	pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
	pub min_distance: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_AVIndexEntry() {
	assert_eq!(
		::std::mem::size_of::<AVIndexEntry>(),
		24usize,
		concat!("Size of: ", stringify!(AVIndexEntry))
	);
	assert_eq!(
		::std::mem::align_of::<AVIndexEntry>(),
		8usize,
		concat!("Alignment of ", stringify!(AVIndexEntry))
	);
	fn test_field_pos() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVIndexEntry>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).pos) as usize - ptr as usize
			},
			0usize,
			concat!("Offset of field: ", stringify!(AVIndexEntry), "::", stringify!(pos))
		);
	}
	test_field_pos();
	fn test_field_timestamp() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVIndexEntry>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(AVIndexEntry),
				"::",
				stringify!(timestamp)
			)
		);
	}
	test_field_timestamp();
	fn test_field_min_distance() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVIndexEntry>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).min_distance) as usize - ptr as usize
			},
			20usize,
			concat!(
				"Offset of field: ",
				stringify!(AVIndexEntry),
				"::",
				stringify!(min_distance)
			)
		);
	}
	test_field_min_distance();
}
impl AVIndexEntry {
	#[inline]
	pub fn flags(&self) -> ::std::os::raw::c_int {
		unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
	}

	#[inline]
	pub fn set_flags(&mut self, val: ::std::os::raw::c_int) {
		unsafe {
			let val: u32 = ::std::mem::transmute(val);
			self._bitfield_1.set(0usize, 2u8, val as u64)
		}
	}

	#[inline]
	pub fn size(&self) -> ::std::os::raw::c_int {
		unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
	}

	#[inline]
	pub fn set_size(&mut self, val: ::std::os::raw::c_int) {
		unsafe {
			let val: u32 = ::std::mem::transmute(val);
			self._bitfield_1.set(2usize, 30u8, val as u64)
		}
	}

	#[inline]
	pub fn new_bitfield_1(
		flags: ::std::os::raw::c_int,
		size: ::std::os::raw::c_int,
	) -> __BindgenBitfieldUnit<[u8; 4usize]> {
		let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
		__bindgen_bitfield_unit.set(0usize, 2u8, {
			let flags: u32 = unsafe { ::std::mem::transmute(flags) };
			flags as u64
		});
		__bindgen_bitfield_unit.set(2usize, 30u8, {
			let size: u32 = unsafe { ::std::mem::transmute(size) };
			size as u64
		});
		__bindgen_bitfield_unit
	}
}
extern "C" {
	pub fn av_disposition_from_string(disp: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_disposition_to_string(disposition: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVStream {
	pub index: ::std::os::raw::c_int,
	pub id: ::std::os::raw::c_int,
	pub priv_data: *mut ::std::os::raw::c_void,
	pub time_base: AVRational,
	pub start_time: i64,
	pub duration: i64,
	pub nb_frames: i64,
	pub disposition: ::std::os::raw::c_int,
	pub discard: AVDiscard,
	pub sample_aspect_ratio: AVRational,
	pub metadata: *mut AVDictionary,
	pub avg_frame_rate: AVRational,
	pub attached_pic: AVPacket,
	pub side_data: *mut AVPacketSideData,
	pub nb_side_data: ::std::os::raw::c_int,
	pub event_flags: ::std::os::raw::c_int,
	pub r_frame_rate: AVRational,
	pub codecpar: *mut AVCodecParameters,
	pub pts_wrap_bits: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_AVStream() {
	assert_eq!(
		::std::mem::size_of::<AVStream>(),
		224usize,
		concat!("Size of: ", stringify!(AVStream))
	);
	assert_eq!(
		::std::mem::align_of::<AVStream>(),
		8usize,
		concat!("Alignment of ", stringify!(AVStream))
	);
	fn test_field_index() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVStream>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize
			},
			0usize,
			concat!("Offset of field: ", stringify!(AVStream), "::", stringify!(index))
		);
	}
	test_field_index();
	fn test_field_id() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVStream>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize
			},
			4usize,
			concat!("Offset of field: ", stringify!(AVStream), "::", stringify!(id))
		);
	}
	test_field_id();
	fn test_field_priv_data() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVStream>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).priv_data) as usize - ptr as usize
			},
			8usize,
			concat!("Offset of field: ", stringify!(AVStream), "::", stringify!(priv_data))
		);
	}
	test_field_priv_data();
	fn test_field_time_base() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVStream>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).time_base) as usize - ptr as usize
			},
			16usize,
			concat!("Offset of field: ", stringify!(AVStream), "::", stringify!(time_base))
		);
	}
	test_field_time_base();
	fn test_field_start_time() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVStream>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).start_time) as usize - ptr as usize
			},
			24usize,
			concat!("Offset of field: ", stringify!(AVStream), "::", stringify!(start_time))
		);
	}
	test_field_start_time();
	fn test_field_duration() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVStream>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).duration) as usize - ptr as usize
			},
			32usize,
			concat!("Offset of field: ", stringify!(AVStream), "::", stringify!(duration))
		);
	}
	test_field_duration();
	fn test_field_nb_frames() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVStream>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).nb_frames) as usize - ptr as usize
			},
			40usize,
			concat!("Offset of field: ", stringify!(AVStream), "::", stringify!(nb_frames))
		);
	}
	test_field_nb_frames();
	fn test_field_disposition() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVStream>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).disposition) as usize - ptr as usize
			},
			48usize,
			concat!("Offset of field: ", stringify!(AVStream), "::", stringify!(disposition))
		);
	}
	test_field_disposition();
	fn test_field_discard() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVStream>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).discard) as usize - ptr as usize
			},
			52usize,
			concat!("Offset of field: ", stringify!(AVStream), "::", stringify!(discard))
		);
	}
	test_field_discard();
	fn test_field_sample_aspect_ratio() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVStream>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).sample_aspect_ratio) as usize - ptr as usize
			},
			56usize,
			concat!(
				"Offset of field: ",
				stringify!(AVStream),
				"::",
				stringify!(sample_aspect_ratio)
			)
		);
	}
	test_field_sample_aspect_ratio();
	fn test_field_metadata() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVStream>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).metadata) as usize - ptr as usize
			},
			64usize,
			concat!("Offset of field: ", stringify!(AVStream), "::", stringify!(metadata))
		);
	}
	test_field_metadata();
	fn test_field_avg_frame_rate() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVStream>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).avg_frame_rate) as usize - ptr as usize
			},
			72usize,
			concat!(
				"Offset of field: ",
				stringify!(AVStream),
				"::",
				stringify!(avg_frame_rate)
			)
		);
	}
	test_field_avg_frame_rate();
	fn test_field_attached_pic() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVStream>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).attached_pic) as usize - ptr as usize
			},
			80usize,
			concat!(
				"Offset of field: ",
				stringify!(AVStream),
				"::",
				stringify!(attached_pic)
			)
		);
	}
	test_field_attached_pic();
	fn test_field_side_data() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVStream>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).side_data) as usize - ptr as usize
			},
			184usize,
			concat!("Offset of field: ", stringify!(AVStream), "::", stringify!(side_data))
		);
	}
	test_field_side_data();
	fn test_field_nb_side_data() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVStream>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).nb_side_data) as usize - ptr as usize
			},
			192usize,
			concat!(
				"Offset of field: ",
				stringify!(AVStream),
				"::",
				stringify!(nb_side_data)
			)
		);
	}
	test_field_nb_side_data();
	fn test_field_event_flags() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVStream>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).event_flags) as usize - ptr as usize
			},
			196usize,
			concat!("Offset of field: ", stringify!(AVStream), "::", stringify!(event_flags))
		);
	}
	test_field_event_flags();
	fn test_field_r_frame_rate() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVStream>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).r_frame_rate) as usize - ptr as usize
			},
			200usize,
			concat!(
				"Offset of field: ",
				stringify!(AVStream),
				"::",
				stringify!(r_frame_rate)
			)
		);
	}
	test_field_r_frame_rate();
	fn test_field_codecpar() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVStream>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).codecpar) as usize - ptr as usize
			},
			208usize,
			concat!("Offset of field: ", stringify!(AVStream), "::", stringify!(codecpar))
		);
	}
	test_field_codecpar();
	fn test_field_pts_wrap_bits() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVStream>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).pts_wrap_bits) as usize - ptr as usize
			},
			216usize,
			concat!(
				"Offset of field: ",
				stringify!(AVStream),
				"::",
				stringify!(pts_wrap_bits)
			)
		);
	}
	test_field_pts_wrap_bits();
}
extern "C" {
	pub fn av_stream_get_parser(s: *const AVStream) -> *mut AVCodecParserContext;
}
extern "C" {
	pub fn av_stream_get_end_pts(st: *const AVStream) -> i64;
}
extern "C" {
	pub fn av_stream_get_first_dts(st: *const AVStream) -> i64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVProgram {
	pub id: ::std::os::raw::c_int,
	pub flags: ::std::os::raw::c_int,
	pub discard: AVDiscard,
	pub stream_index: *mut ::std::os::raw::c_uint,
	pub nb_stream_indexes: ::std::os::raw::c_uint,
	pub metadata: *mut AVDictionary,
	pub program_num: ::std::os::raw::c_int,
	pub pmt_pid: ::std::os::raw::c_int,
	pub pcr_pid: ::std::os::raw::c_int,
	pub pmt_version: ::std::os::raw::c_int,
	pub start_time: i64,
	pub end_time: i64,
	pub pts_wrap_reference: i64,
	pub pts_wrap_behavior: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_AVProgram() {
	assert_eq!(
		::std::mem::size_of::<AVProgram>(),
		88usize,
		concat!("Size of: ", stringify!(AVProgram))
	);
	assert_eq!(
		::std::mem::align_of::<AVProgram>(),
		8usize,
		concat!("Alignment of ", stringify!(AVProgram))
	);
	fn test_field_id() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVProgram>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize
			},
			0usize,
			concat!("Offset of field: ", stringify!(AVProgram), "::", stringify!(id))
		);
	}
	test_field_id();
	fn test_field_flags() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVProgram>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
			},
			4usize,
			concat!("Offset of field: ", stringify!(AVProgram), "::", stringify!(flags))
		);
	}
	test_field_flags();
	fn test_field_discard() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVProgram>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).discard) as usize - ptr as usize
			},
			8usize,
			concat!("Offset of field: ", stringify!(AVProgram), "::", stringify!(discard))
		);
	}
	test_field_discard();
	fn test_field_stream_index() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVProgram>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).stream_index) as usize - ptr as usize
			},
			16usize,
			concat!(
				"Offset of field: ",
				stringify!(AVProgram),
				"::",
				stringify!(stream_index)
			)
		);
	}
	test_field_stream_index();
	fn test_field_nb_stream_indexes() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVProgram>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).nb_stream_indexes) as usize - ptr as usize
			},
			24usize,
			concat!(
				"Offset of field: ",
				stringify!(AVProgram),
				"::",
				stringify!(nb_stream_indexes)
			)
		);
	}
	test_field_nb_stream_indexes();
	fn test_field_metadata() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVProgram>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).metadata) as usize - ptr as usize
			},
			32usize,
			concat!("Offset of field: ", stringify!(AVProgram), "::", stringify!(metadata))
		);
	}
	test_field_metadata();
	fn test_field_program_num() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVProgram>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).program_num) as usize - ptr as usize
			},
			40usize,
			concat!(
				"Offset of field: ",
				stringify!(AVProgram),
				"::",
				stringify!(program_num)
			)
		);
	}
	test_field_program_num();
	fn test_field_pmt_pid() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVProgram>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).pmt_pid) as usize - ptr as usize
			},
			44usize,
			concat!("Offset of field: ", stringify!(AVProgram), "::", stringify!(pmt_pid))
		);
	}
	test_field_pmt_pid();
	fn test_field_pcr_pid() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVProgram>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).pcr_pid) as usize - ptr as usize
			},
			48usize,
			concat!("Offset of field: ", stringify!(AVProgram), "::", stringify!(pcr_pid))
		);
	}
	test_field_pcr_pid();
	fn test_field_pmt_version() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVProgram>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).pmt_version) as usize - ptr as usize
			},
			52usize,
			concat!(
				"Offset of field: ",
				stringify!(AVProgram),
				"::",
				stringify!(pmt_version)
			)
		);
	}
	test_field_pmt_version();
	fn test_field_start_time() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVProgram>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).start_time) as usize - ptr as usize
			},
			56usize,
			concat!("Offset of field: ", stringify!(AVProgram), "::", stringify!(start_time))
		);
	}
	test_field_start_time();
	fn test_field_end_time() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVProgram>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).end_time) as usize - ptr as usize
			},
			64usize,
			concat!("Offset of field: ", stringify!(AVProgram), "::", stringify!(end_time))
		);
	}
	test_field_end_time();
	fn test_field_pts_wrap_reference() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVProgram>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).pts_wrap_reference) as usize - ptr as usize
			},
			72usize,
			concat!(
				"Offset of field: ",
				stringify!(AVProgram),
				"::",
				stringify!(pts_wrap_reference)
			)
		);
	}
	test_field_pts_wrap_reference();
	fn test_field_pts_wrap_behavior() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVProgram>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).pts_wrap_behavior) as usize - ptr as usize
			},
			80usize,
			concat!(
				"Offset of field: ",
				stringify!(AVProgram),
				"::",
				stringify!(pts_wrap_behavior)
			)
		);
	}
	test_field_pts_wrap_behavior();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVChapter {
	pub id: i64,
	pub time_base: AVRational,
	pub start: i64,
	pub end: i64,
	pub metadata: *mut AVDictionary,
}
#[test]
fn bindgen_test_layout_AVChapter() {
	assert_eq!(
		::std::mem::size_of::<AVChapter>(),
		40usize,
		concat!("Size of: ", stringify!(AVChapter))
	);
	assert_eq!(
		::std::mem::align_of::<AVChapter>(),
		8usize,
		concat!("Alignment of ", stringify!(AVChapter))
	);
	fn test_field_id() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVChapter>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize
			},
			0usize,
			concat!("Offset of field: ", stringify!(AVChapter), "::", stringify!(id))
		);
	}
	test_field_id();
	fn test_field_time_base() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVChapter>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).time_base) as usize - ptr as usize
			},
			8usize,
			concat!("Offset of field: ", stringify!(AVChapter), "::", stringify!(time_base))
		);
	}
	test_field_time_base();
	fn test_field_start() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVChapter>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize
			},
			16usize,
			concat!("Offset of field: ", stringify!(AVChapter), "::", stringify!(start))
		);
	}
	test_field_start();
	fn test_field_end() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVChapter>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize
			},
			24usize,
			concat!("Offset of field: ", stringify!(AVChapter), "::", stringify!(end))
		);
	}
	test_field_end();
	fn test_field_metadata() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVChapter>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).metadata) as usize - ptr as usize
			},
			32usize,
			concat!("Offset of field: ", stringify!(AVChapter), "::", stringify!(metadata))
		);
	}
	test_field_metadata();
}
pub type av_format_control_message = ::std::option::Option<
	unsafe extern "C" fn(
		s: *mut AVFormatContext,
		type_: ::std::os::raw::c_int,
		data: *mut ::std::os::raw::c_void,
		data_size: size_t,
	) -> ::std::os::raw::c_int,
>;
pub type AVOpenCallback = ::std::option::Option<
	unsafe extern "C" fn(
		s: *mut AVFormatContext,
		pb: *mut *mut AVIOContext,
		url: *const ::std::os::raw::c_char,
		flags: ::std::os::raw::c_int,
		int_cb: *const AVIOInterruptCB,
		options: *mut *mut AVDictionary,
	) -> ::std::os::raw::c_int,
>;
pub const AVDurationEstimationMethod_AVFMT_DURATION_FROM_PTS: AVDurationEstimationMethod = 0;
pub const AVDurationEstimationMethod_AVFMT_DURATION_FROM_STREAM: AVDurationEstimationMethod = 1;
pub const AVDurationEstimationMethod_AVFMT_DURATION_FROM_BITRATE: AVDurationEstimationMethod = 2;
pub type AVDurationEstimationMethod = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVFormatContext {
	pub av_class: *const AVClass,
	pub iformat: *const AVInputFormat,
	pub oformat: *const AVOutputFormat,
	pub priv_data: *mut ::std::os::raw::c_void,
	pub pb: *mut AVIOContext,
	pub ctx_flags: ::std::os::raw::c_int,
	pub nb_streams: ::std::os::raw::c_uint,
	pub streams: *mut *mut AVStream,
	pub url: *mut ::std::os::raw::c_char,
	pub start_time: i64,
	pub duration: i64,
	pub bit_rate: i64,
	pub packet_size: ::std::os::raw::c_uint,
	pub max_delay: ::std::os::raw::c_int,
	pub flags: ::std::os::raw::c_int,
	pub probesize: i64,
	pub max_analyze_duration: i64,
	pub key: *const u8,
	pub keylen: ::std::os::raw::c_int,
	pub nb_programs: ::std::os::raw::c_uint,
	pub programs: *mut *mut AVProgram,
	pub video_codec_id: AVCodecID,
	pub audio_codec_id: AVCodecID,
	pub subtitle_codec_id: AVCodecID,
	pub max_index_size: ::std::os::raw::c_uint,
	pub max_picture_buffer: ::std::os::raw::c_uint,
	pub nb_chapters: ::std::os::raw::c_uint,
	pub chapters: *mut *mut AVChapter,
	pub metadata: *mut AVDictionary,
	pub start_time_realtime: i64,
	pub fps_probe_size: ::std::os::raw::c_int,
	pub error_recognition: ::std::os::raw::c_int,
	pub interrupt_callback: AVIOInterruptCB,
	pub debug: ::std::os::raw::c_int,
	pub max_interleave_delta: i64,
	pub strict_std_compliance: ::std::os::raw::c_int,
	pub event_flags: ::std::os::raw::c_int,
	pub max_ts_probe: ::std::os::raw::c_int,
	pub avoid_negative_ts: ::std::os::raw::c_int,
	pub ts_id: ::std::os::raw::c_int,
	pub audio_preload: ::std::os::raw::c_int,
	pub max_chunk_duration: ::std::os::raw::c_int,
	pub max_chunk_size: ::std::os::raw::c_int,
	pub use_wallclock_as_timestamps: ::std::os::raw::c_int,
	pub avio_flags: ::std::os::raw::c_int,
	pub duration_estimation_method: AVDurationEstimationMethod,
	pub skip_initial_bytes: i64,
	pub correct_ts_overflow: ::std::os::raw::c_uint,
	pub seek2any: ::std::os::raw::c_int,
	pub flush_packets: ::std::os::raw::c_int,
	pub probe_score: ::std::os::raw::c_int,
	pub format_probesize: ::std::os::raw::c_int,
	pub codec_whitelist: *mut ::std::os::raw::c_char,
	pub format_whitelist: *mut ::std::os::raw::c_char,
	pub io_repositioned: ::std::os::raw::c_int,
	pub video_codec: *const AVCodec,
	pub audio_codec: *const AVCodec,
	pub subtitle_codec: *const AVCodec,
	pub data_codec: *const AVCodec,
	pub metadata_header_padding: ::std::os::raw::c_int,
	pub opaque: *mut ::std::os::raw::c_void,
	pub control_message_cb: av_format_control_message,
	pub output_ts_offset: i64,
	pub dump_separator: *mut u8,
	pub data_codec_id: AVCodecID,
	pub protocol_whitelist: *mut ::std::os::raw::c_char,
	pub io_open: ::std::option::Option<
		unsafe extern "C" fn(
			s: *mut AVFormatContext,
			pb: *mut *mut AVIOContext,
			url: *const ::std::os::raw::c_char,
			flags: ::std::os::raw::c_int,
			options: *mut *mut AVDictionary,
		) -> ::std::os::raw::c_int,
	>,
	pub io_close: ::std::option::Option<unsafe extern "C" fn(s: *mut AVFormatContext, pb: *mut AVIOContext)>,
	pub protocol_blacklist: *mut ::std::os::raw::c_char,
	pub max_streams: ::std::os::raw::c_int,
	pub skip_estimate_duration_from_pts: ::std::os::raw::c_int,
	pub max_probe_packets: ::std::os::raw::c_int,
	pub io_close2: ::std::option::Option<
		unsafe extern "C" fn(s: *mut AVFormatContext, pb: *mut AVIOContext) -> ::std::os::raw::c_int,
	>,
}
#[test]
fn bindgen_test_layout_AVFormatContext() {
	assert_eq!(
		::std::mem::size_of::<AVFormatContext>(),
		472usize,
		concat!("Size of: ", stringify!(AVFormatContext))
	);
	assert_eq!(
		::std::mem::align_of::<AVFormatContext>(),
		8usize,
		concat!("Alignment of ", stringify!(AVFormatContext))
	);
	fn test_field_av_class() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).av_class) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(av_class)
			)
		);
	}
	test_field_av_class();
	fn test_field_iformat() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).iformat) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(iformat)
			)
		);
	}
	test_field_iformat();
	fn test_field_oformat() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).oformat) as usize - ptr as usize
			},
			16usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(oformat)
			)
		);
	}
	test_field_oformat();
	fn test_field_priv_data() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).priv_data) as usize - ptr as usize
			},
			24usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(priv_data)
			)
		);
	}
	test_field_priv_data();
	fn test_field_pb() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).pb) as usize - ptr as usize
			},
			32usize,
			concat!("Offset of field: ", stringify!(AVFormatContext), "::", stringify!(pb))
		);
	}
	test_field_pb();
	fn test_field_ctx_flags() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).ctx_flags) as usize - ptr as usize
			},
			40usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(ctx_flags)
			)
		);
	}
	test_field_ctx_flags();
	fn test_field_nb_streams() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).nb_streams) as usize - ptr as usize
			},
			44usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(nb_streams)
			)
		);
	}
	test_field_nb_streams();
	fn test_field_streams() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).streams) as usize - ptr as usize
			},
			48usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(streams)
			)
		);
	}
	test_field_streams();
	fn test_field_url() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).url) as usize - ptr as usize
			},
			56usize,
			concat!("Offset of field: ", stringify!(AVFormatContext), "::", stringify!(url))
		);
	}
	test_field_url();
	fn test_field_start_time() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).start_time) as usize - ptr as usize
			},
			64usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(start_time)
			)
		);
	}
	test_field_start_time();
	fn test_field_duration() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).duration) as usize - ptr as usize
			},
			72usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(duration)
			)
		);
	}
	test_field_duration();
	fn test_field_bit_rate() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).bit_rate) as usize - ptr as usize
			},
			80usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(bit_rate)
			)
		);
	}
	test_field_bit_rate();
	fn test_field_packet_size() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).packet_size) as usize - ptr as usize
			},
			88usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(packet_size)
			)
		);
	}
	test_field_packet_size();
	fn test_field_max_delay() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).max_delay) as usize - ptr as usize
			},
			92usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(max_delay)
			)
		);
	}
	test_field_max_delay();
	fn test_field_flags() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
			},
			96usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(flags)
			)
		);
	}
	test_field_flags();
	fn test_field_probesize() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).probesize) as usize - ptr as usize
			},
			104usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(probesize)
			)
		);
	}
	test_field_probesize();
	fn test_field_max_analyze_duration() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).max_analyze_duration) as usize - ptr as usize
			},
			112usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(max_analyze_duration)
			)
		);
	}
	test_field_max_analyze_duration();
	fn test_field_key() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize
			},
			120usize,
			concat!("Offset of field: ", stringify!(AVFormatContext), "::", stringify!(key))
		);
	}
	test_field_key();
	fn test_field_keylen() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).keylen) as usize - ptr as usize
			},
			128usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(keylen)
			)
		);
	}
	test_field_keylen();
	fn test_field_nb_programs() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).nb_programs) as usize - ptr as usize
			},
			132usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(nb_programs)
			)
		);
	}
	test_field_nb_programs();
	fn test_field_programs() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).programs) as usize - ptr as usize
			},
			136usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(programs)
			)
		);
	}
	test_field_programs();
	fn test_field_video_codec_id() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).video_codec_id) as usize - ptr as usize
			},
			144usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(video_codec_id)
			)
		);
	}
	test_field_video_codec_id();
	fn test_field_audio_codec_id() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).audio_codec_id) as usize - ptr as usize
			},
			148usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(audio_codec_id)
			)
		);
	}
	test_field_audio_codec_id();
	fn test_field_subtitle_codec_id() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).subtitle_codec_id) as usize - ptr as usize
			},
			152usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(subtitle_codec_id)
			)
		);
	}
	test_field_subtitle_codec_id();
	fn test_field_max_index_size() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).max_index_size) as usize - ptr as usize
			},
			156usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(max_index_size)
			)
		);
	}
	test_field_max_index_size();
	fn test_field_max_picture_buffer() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).max_picture_buffer) as usize - ptr as usize
			},
			160usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(max_picture_buffer)
			)
		);
	}
	test_field_max_picture_buffer();
	fn test_field_nb_chapters() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).nb_chapters) as usize - ptr as usize
			},
			164usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(nb_chapters)
			)
		);
	}
	test_field_nb_chapters();
	fn test_field_chapters() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).chapters) as usize - ptr as usize
			},
			168usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(chapters)
			)
		);
	}
	test_field_chapters();
	fn test_field_metadata() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).metadata) as usize - ptr as usize
			},
			176usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(metadata)
			)
		);
	}
	test_field_metadata();
	fn test_field_start_time_realtime() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).start_time_realtime) as usize - ptr as usize
			},
			184usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(start_time_realtime)
			)
		);
	}
	test_field_start_time_realtime();
	fn test_field_fps_probe_size() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).fps_probe_size) as usize - ptr as usize
			},
			192usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(fps_probe_size)
			)
		);
	}
	test_field_fps_probe_size();
	fn test_field_error_recognition() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).error_recognition) as usize - ptr as usize
			},
			196usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(error_recognition)
			)
		);
	}
	test_field_error_recognition();
	fn test_field_interrupt_callback() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).interrupt_callback) as usize - ptr as usize
			},
			200usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(interrupt_callback)
			)
		);
	}
	test_field_interrupt_callback();
	fn test_field_debug() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).debug) as usize - ptr as usize
			},
			216usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(debug)
			)
		);
	}
	test_field_debug();
	fn test_field_max_interleave_delta() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).max_interleave_delta) as usize - ptr as usize
			},
			224usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(max_interleave_delta)
			)
		);
	}
	test_field_max_interleave_delta();
	fn test_field_strict_std_compliance() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).strict_std_compliance) as usize - ptr as usize
			},
			232usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(strict_std_compliance)
			)
		);
	}
	test_field_strict_std_compliance();
	fn test_field_event_flags() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).event_flags) as usize - ptr as usize
			},
			236usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(event_flags)
			)
		);
	}
	test_field_event_flags();
	fn test_field_max_ts_probe() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).max_ts_probe) as usize - ptr as usize
			},
			240usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(max_ts_probe)
			)
		);
	}
	test_field_max_ts_probe();
	fn test_field_avoid_negative_ts() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).avoid_negative_ts) as usize - ptr as usize
			},
			244usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(avoid_negative_ts)
			)
		);
	}
	test_field_avoid_negative_ts();
	fn test_field_ts_id() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).ts_id) as usize - ptr as usize
			},
			248usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(ts_id)
			)
		);
	}
	test_field_ts_id();
	fn test_field_audio_preload() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).audio_preload) as usize - ptr as usize
			},
			252usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(audio_preload)
			)
		);
	}
	test_field_audio_preload();
	fn test_field_max_chunk_duration() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).max_chunk_duration) as usize - ptr as usize
			},
			256usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(max_chunk_duration)
			)
		);
	}
	test_field_max_chunk_duration();
	fn test_field_max_chunk_size() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).max_chunk_size) as usize - ptr as usize
			},
			260usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(max_chunk_size)
			)
		);
	}
	test_field_max_chunk_size();
	fn test_field_use_wallclock_as_timestamps() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).use_wallclock_as_timestamps) as usize - ptr as usize
			},
			264usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(use_wallclock_as_timestamps)
			)
		);
	}
	test_field_use_wallclock_as_timestamps();
	fn test_field_avio_flags() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).avio_flags) as usize - ptr as usize
			},
			268usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(avio_flags)
			)
		);
	}
	test_field_avio_flags();
	fn test_field_duration_estimation_method() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).duration_estimation_method) as usize - ptr as usize
			},
			272usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(duration_estimation_method)
			)
		);
	}
	test_field_duration_estimation_method();
	fn test_field_skip_initial_bytes() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).skip_initial_bytes) as usize - ptr as usize
			},
			280usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(skip_initial_bytes)
			)
		);
	}
	test_field_skip_initial_bytes();
	fn test_field_correct_ts_overflow() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).correct_ts_overflow) as usize - ptr as usize
			},
			288usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(correct_ts_overflow)
			)
		);
	}
	test_field_correct_ts_overflow();
	fn test_field_seek2any() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).seek2any) as usize - ptr as usize
			},
			292usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(seek2any)
			)
		);
	}
	test_field_seek2any();
	fn test_field_flush_packets() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).flush_packets) as usize - ptr as usize
			},
			296usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(flush_packets)
			)
		);
	}
	test_field_flush_packets();
	fn test_field_probe_score() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).probe_score) as usize - ptr as usize
			},
			300usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(probe_score)
			)
		);
	}
	test_field_probe_score();
	fn test_field_format_probesize() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).format_probesize) as usize - ptr as usize
			},
			304usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(format_probesize)
			)
		);
	}
	test_field_format_probesize();
	fn test_field_codec_whitelist() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).codec_whitelist) as usize - ptr as usize
			},
			312usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(codec_whitelist)
			)
		);
	}
	test_field_codec_whitelist();
	fn test_field_format_whitelist() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).format_whitelist) as usize - ptr as usize
			},
			320usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(format_whitelist)
			)
		);
	}
	test_field_format_whitelist();
	fn test_field_io_repositioned() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).io_repositioned) as usize - ptr as usize
			},
			328usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(io_repositioned)
			)
		);
	}
	test_field_io_repositioned();
	fn test_field_video_codec() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).video_codec) as usize - ptr as usize
			},
			336usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(video_codec)
			)
		);
	}
	test_field_video_codec();
	fn test_field_audio_codec() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).audio_codec) as usize - ptr as usize
			},
			344usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(audio_codec)
			)
		);
	}
	test_field_audio_codec();
	fn test_field_subtitle_codec() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).subtitle_codec) as usize - ptr as usize
			},
			352usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(subtitle_codec)
			)
		);
	}
	test_field_subtitle_codec();
	fn test_field_data_codec() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).data_codec) as usize - ptr as usize
			},
			360usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(data_codec)
			)
		);
	}
	test_field_data_codec();
	fn test_field_metadata_header_padding() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).metadata_header_padding) as usize - ptr as usize
			},
			368usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(metadata_header_padding)
			)
		);
	}
	test_field_metadata_header_padding();
	fn test_field_opaque() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).opaque) as usize - ptr as usize
			},
			376usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(opaque)
			)
		);
	}
	test_field_opaque();
	fn test_field_control_message_cb() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).control_message_cb) as usize - ptr as usize
			},
			384usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(control_message_cb)
			)
		);
	}
	test_field_control_message_cb();
	fn test_field_output_ts_offset() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).output_ts_offset) as usize - ptr as usize
			},
			392usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(output_ts_offset)
			)
		);
	}
	test_field_output_ts_offset();
	fn test_field_dump_separator() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).dump_separator) as usize - ptr as usize
			},
			400usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(dump_separator)
			)
		);
	}
	test_field_dump_separator();
	fn test_field_data_codec_id() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).data_codec_id) as usize - ptr as usize
			},
			408usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(data_codec_id)
			)
		);
	}
	test_field_data_codec_id();
	fn test_field_protocol_whitelist() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).protocol_whitelist) as usize - ptr as usize
			},
			416usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(protocol_whitelist)
			)
		);
	}
	test_field_protocol_whitelist();
	fn test_field_io_open() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).io_open) as usize - ptr as usize
			},
			424usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(io_open)
			)
		);
	}
	test_field_io_open();
	fn test_field_io_close() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).io_close) as usize - ptr as usize
			},
			432usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(io_close)
			)
		);
	}
	test_field_io_close();
	fn test_field_protocol_blacklist() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).protocol_blacklist) as usize - ptr as usize
			},
			440usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(protocol_blacklist)
			)
		);
	}
	test_field_protocol_blacklist();
	fn test_field_max_streams() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).max_streams) as usize - ptr as usize
			},
			448usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(max_streams)
			)
		);
	}
	test_field_max_streams();
	fn test_field_skip_estimate_duration_from_pts() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).skip_estimate_duration_from_pts) as usize - ptr as usize
			},
			452usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(skip_estimate_duration_from_pts)
			)
		);
	}
	test_field_skip_estimate_duration_from_pts();
	fn test_field_max_probe_packets() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).max_probe_packets) as usize - ptr as usize
			},
			456usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(max_probe_packets)
			)
		);
	}
	test_field_max_probe_packets();
	fn test_field_io_close2() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVFormatContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).io_close2) as usize - ptr as usize
			},
			464usize,
			concat!(
				"Offset of field: ",
				stringify!(AVFormatContext),
				"::",
				stringify!(io_close2)
			)
		);
	}
	test_field_io_close2();
}
extern "C" {
	pub fn av_format_inject_global_side_data(s: *mut AVFormatContext);
}
extern "C" {
	pub fn av_fmt_ctx_get_duration_estimation_method(ctx: *const AVFormatContext) -> AVDurationEstimationMethod;
}
extern "C" {
	pub fn avformat_version() -> ::std::os::raw::c_uint;
}
extern "C" {
	pub fn avformat_configuration() -> *const ::std::os::raw::c_char;
}
extern "C" {
	pub fn avformat_license() -> *const ::std::os::raw::c_char;
}
extern "C" {
	pub fn avformat_network_init() -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avformat_network_deinit() -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_muxer_iterate(opaque: *mut *mut ::std::os::raw::c_void) -> *const AVOutputFormat;
}
extern "C" {
	pub fn av_demuxer_iterate(opaque: *mut *mut ::std::os::raw::c_void) -> *const AVInputFormat;
}
extern "C" {
	pub fn avformat_alloc_context() -> *mut AVFormatContext;
}
extern "C" {
	pub fn avformat_free_context(s: *mut AVFormatContext);
}
extern "C" {
	pub fn avformat_get_class() -> *const AVClass;
}
extern "C" {
	pub fn av_stream_get_class() -> *const AVClass;
}
extern "C" {
	pub fn avformat_new_stream(s: *mut AVFormatContext, c: *const AVCodec) -> *mut AVStream;
}
extern "C" {
	pub fn av_stream_add_side_data(
		st: *mut AVStream,
		type_: AVPacketSideDataType,
		data: *mut u8,
		size: size_t,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_stream_new_side_data(stream: *mut AVStream, type_: AVPacketSideDataType, size: size_t) -> *mut u8;
}
extern "C" {
	pub fn av_stream_get_side_data(stream: *const AVStream, type_: AVPacketSideDataType, size: *mut size_t) -> *mut u8;
}
extern "C" {
	pub fn av_new_program(s: *mut AVFormatContext, id: ::std::os::raw::c_int) -> *mut AVProgram;
}
extern "C" {
	pub fn avformat_alloc_output_context2(
		ctx: *mut *mut AVFormatContext,
		oformat: *const AVOutputFormat,
		format_name: *const ::std::os::raw::c_char,
		filename: *const ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_find_input_format(short_name: *const ::std::os::raw::c_char) -> *const AVInputFormat;
}
extern "C" {
	pub fn av_probe_input_format(pd: *const AVProbeData, is_opened: ::std::os::raw::c_int) -> *const AVInputFormat;
}
extern "C" {
	pub fn av_probe_input_format2(
		pd: *const AVProbeData,
		is_opened: ::std::os::raw::c_int,
		score_max: *mut ::std::os::raw::c_int,
	) -> *const AVInputFormat;
}
extern "C" {
	pub fn av_probe_input_format3(
		pd: *const AVProbeData,
		is_opened: ::std::os::raw::c_int,
		score_ret: *mut ::std::os::raw::c_int,
	) -> *const AVInputFormat;
}
extern "C" {
	pub fn av_probe_input_buffer2(
		pb: *mut AVIOContext,
		fmt: *mut *const AVInputFormat,
		url: *const ::std::os::raw::c_char,
		logctx: *mut ::std::os::raw::c_void,
		offset: ::std::os::raw::c_uint,
		max_probe_size: ::std::os::raw::c_uint,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_probe_input_buffer(
		pb: *mut AVIOContext,
		fmt: *mut *const AVInputFormat,
		url: *const ::std::os::raw::c_char,
		logctx: *mut ::std::os::raw::c_void,
		offset: ::std::os::raw::c_uint,
		max_probe_size: ::std::os::raw::c_uint,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avformat_open_input(
		ps: *mut *mut AVFormatContext,
		url: *const ::std::os::raw::c_char,
		fmt: *const AVInputFormat,
		options: *mut *mut AVDictionary,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avformat_find_stream_info(
		ic: *mut AVFormatContext,
		options: *mut *mut AVDictionary,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_find_program_from_stream(
		ic: *mut AVFormatContext,
		last: *mut AVProgram,
		s: ::std::os::raw::c_int,
	) -> *mut AVProgram;
}
extern "C" {
	pub fn av_program_add_stream_index(
		ac: *mut AVFormatContext,
		progid: ::std::os::raw::c_int,
		idx: ::std::os::raw::c_uint,
	);
}
extern "C" {
	pub fn av_find_best_stream(
		ic: *mut AVFormatContext,
		type_: AVMediaType,
		wanted_stream_nb: ::std::os::raw::c_int,
		related_stream: ::std::os::raw::c_int,
		decoder_ret: *mut *const AVCodec,
		flags: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_read_frame(s: *mut AVFormatContext, pkt: *mut AVPacket) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_seek_frame(
		s: *mut AVFormatContext,
		stream_index: ::std::os::raw::c_int,
		timestamp: i64,
		flags: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avformat_seek_file(
		s: *mut AVFormatContext,
		stream_index: ::std::os::raw::c_int,
		min_ts: i64,
		ts: i64,
		max_ts: i64,
		flags: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avformat_flush(s: *mut AVFormatContext) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_read_play(s: *mut AVFormatContext) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_read_pause(s: *mut AVFormatContext) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avformat_close_input(s: *mut *mut AVFormatContext);
}
extern "C" {
	pub fn avformat_write_header(s: *mut AVFormatContext, options: *mut *mut AVDictionary) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avformat_init_output(s: *mut AVFormatContext, options: *mut *mut AVDictionary) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_write_frame(s: *mut AVFormatContext, pkt: *mut AVPacket) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_interleaved_write_frame(s: *mut AVFormatContext, pkt: *mut AVPacket) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_write_uncoded_frame(
		s: *mut AVFormatContext,
		stream_index: ::std::os::raw::c_int,
		frame: *mut AVFrame,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_interleaved_write_uncoded_frame(
		s: *mut AVFormatContext,
		stream_index: ::std::os::raw::c_int,
		frame: *mut AVFrame,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_write_uncoded_frame_query(
		s: *mut AVFormatContext,
		stream_index: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_write_trailer(s: *mut AVFormatContext) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_guess_format(
		short_name: *const ::std::os::raw::c_char,
		filename: *const ::std::os::raw::c_char,
		mime_type: *const ::std::os::raw::c_char,
	) -> *const AVOutputFormat;
}
extern "C" {
	pub fn av_guess_codec(
		fmt: *const AVOutputFormat,
		short_name: *const ::std::os::raw::c_char,
		filename: *const ::std::os::raw::c_char,
		mime_type: *const ::std::os::raw::c_char,
		type_: AVMediaType,
	) -> AVCodecID;
}
extern "C" {
	pub fn av_get_output_timestamp(
		s: *mut AVFormatContext,
		stream: ::std::os::raw::c_int,
		dts: *mut i64,
		wall: *mut i64,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_hex_dump(f: *mut FILE, buf: *const u8, size: ::std::os::raw::c_int);
}
extern "C" {
	pub fn av_hex_dump_log(
		avcl: *mut ::std::os::raw::c_void,
		level: ::std::os::raw::c_int,
		buf: *const u8,
		size: ::std::os::raw::c_int,
	);
}
extern "C" {
	pub fn av_pkt_dump2(f: *mut FILE, pkt: *const AVPacket, dump_payload: ::std::os::raw::c_int, st: *const AVStream);
}
extern "C" {
	pub fn av_pkt_dump_log2(
		avcl: *mut ::std::os::raw::c_void,
		level: ::std::os::raw::c_int,
		pkt: *const AVPacket,
		dump_payload: ::std::os::raw::c_int,
		st: *const AVStream,
	);
}
extern "C" {
	pub fn av_codec_get_id(tags: *const *const AVCodecTag, tag: ::std::os::raw::c_uint) -> AVCodecID;
}
extern "C" {
	pub fn av_codec_get_tag(tags: *const *const AVCodecTag, id: AVCodecID) -> ::std::os::raw::c_uint;
}
extern "C" {
	pub fn av_codec_get_tag2(
		tags: *const *const AVCodecTag,
		id: AVCodecID,
		tag: *mut ::std::os::raw::c_uint,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_find_default_stream_index(s: *mut AVFormatContext) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_index_search_timestamp(
		st: *mut AVStream,
		timestamp: i64,
		flags: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avformat_index_get_entries_count(st: *const AVStream) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avformat_index_get_entry(st: *mut AVStream, idx: ::std::os::raw::c_int) -> *const AVIndexEntry;
}
extern "C" {
	pub fn avformat_index_get_entry_from_timestamp(
		st: *mut AVStream,
		wanted_timestamp: i64,
		flags: ::std::os::raw::c_int,
	) -> *const AVIndexEntry;
}
extern "C" {
	pub fn av_add_index_entry(
		st: *mut AVStream,
		pos: i64,
		timestamp: i64,
		size: ::std::os::raw::c_int,
		distance: ::std::os::raw::c_int,
		flags: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_url_split(
		proto: *mut ::std::os::raw::c_char,
		proto_size: ::std::os::raw::c_int,
		authorization: *mut ::std::os::raw::c_char,
		authorization_size: ::std::os::raw::c_int,
		hostname: *mut ::std::os::raw::c_char,
		hostname_size: ::std::os::raw::c_int,
		port_ptr: *mut ::std::os::raw::c_int,
		path: *mut ::std::os::raw::c_char,
		path_size: ::std::os::raw::c_int,
		url: *const ::std::os::raw::c_char,
	);
}
extern "C" {
	pub fn av_dump_format(
		ic: *mut AVFormatContext,
		index: ::std::os::raw::c_int,
		url: *const ::std::os::raw::c_char,
		is_output: ::std::os::raw::c_int,
	);
}
extern "C" {
	pub fn av_get_frame_filename2(
		buf: *mut ::std::os::raw::c_char,
		buf_size: ::std::os::raw::c_int,
		path: *const ::std::os::raw::c_char,
		number: ::std::os::raw::c_int,
		flags: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_get_frame_filename(
		buf: *mut ::std::os::raw::c_char,
		buf_size: ::std::os::raw::c_int,
		path: *const ::std::os::raw::c_char,
		number: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_filename_number_test(filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_sdp_create(
		ac: *mut *mut AVFormatContext,
		n_files: ::std::os::raw::c_int,
		buf: *mut ::std::os::raw::c_char,
		size: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_match_ext(
		filename: *const ::std::os::raw::c_char,
		extensions: *const ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avformat_query_codec(
		ofmt: *const AVOutputFormat,
		codec_id: AVCodecID,
		std_compliance: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avformat_get_riff_video_tags() -> *const AVCodecTag;
}
extern "C" {
	pub fn avformat_get_riff_audio_tags() -> *const AVCodecTag;
}
extern "C" {
	pub fn avformat_get_mov_video_tags() -> *const AVCodecTag;
}
extern "C" {
	pub fn avformat_get_mov_audio_tags() -> *const AVCodecTag;
}
extern "C" {
	pub fn av_guess_sample_aspect_ratio(
		format: *mut AVFormatContext,
		stream: *mut AVStream,
		frame: *mut AVFrame,
	) -> AVRational;
}
extern "C" {
	pub fn av_guess_frame_rate(ctx: *mut AVFormatContext, stream: *mut AVStream, frame: *mut AVFrame) -> AVRational;
}
extern "C" {
	pub fn avformat_match_stream_specifier(
		s: *mut AVFormatContext,
		st: *mut AVStream,
		spec: *const ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn avformat_queue_attached_pictures(s: *mut AVFormatContext) -> ::std::os::raw::c_int;
}
pub const AVTimebaseSource_AVFMT_TBCF_AUTO: AVTimebaseSource = -1;
pub const AVTimebaseSource_AVFMT_TBCF_DECODER: AVTimebaseSource = 0;
pub const AVTimebaseSource_AVFMT_TBCF_DEMUXER: AVTimebaseSource = 1;
pub const AVTimebaseSource_AVFMT_TBCF_R_FRAMERATE: AVTimebaseSource = 2;
pub type AVTimebaseSource = ::std::os::raw::c_int;
extern "C" {
	pub fn avformat_transfer_internal_stream_timing_info(
		ofmt: *const AVOutputFormat,
		ost: *mut AVStream,
		ist: *const AVStream,
		copy_tb: AVTimebaseSource,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_stream_get_codec_timebase(st: *const AVStream) -> AVRational;
}
pub type cuuint32_t = u32;
pub type cuuint64_t = u64;
pub type CUdeviceptr_v2 = ::std::os::raw::c_ulonglong;
pub type CUdeviceptr = CUdeviceptr_v2;
pub type CUdevice_v1 = ::std::os::raw::c_int;
pub type CUdevice = CUdevice_v1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUctx_st {
	_unused: [u8; 0],
}
pub type CUcontext = *mut CUctx_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUmod_st {
	_unused: [u8; 0],
}
pub type CUmodule = *mut CUmod_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUfunc_st {
	_unused: [u8; 0],
}
pub type CUfunction = *mut CUfunc_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUarray_st {
	_unused: [u8; 0],
}
pub type CUarray = *mut CUarray_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUmipmappedArray_st {
	_unused: [u8; 0],
}
pub type CUmipmappedArray = *mut CUmipmappedArray_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUtexref_st {
	_unused: [u8; 0],
}
pub type CUtexref = *mut CUtexref_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUsurfref_st {
	_unused: [u8; 0],
}
pub type CUsurfref = *mut CUsurfref_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUevent_st {
	_unused: [u8; 0],
}
pub type CUevent = *mut CUevent_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUstream_st {
	_unused: [u8; 0],
}
pub type CUstream = *mut CUstream_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUgraphicsResource_st {
	_unused: [u8; 0],
}
pub type CUgraphicsResource = *mut CUgraphicsResource_st;
pub type CUtexObject_v1 = ::std::os::raw::c_ulonglong;
pub type CUtexObject = CUtexObject_v1;
pub type CUsurfObject_v1 = ::std::os::raw::c_ulonglong;
pub type CUsurfObject = CUsurfObject_v1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUextMemory_st {
	_unused: [u8; 0],
}
pub type CUexternalMemory = *mut CUextMemory_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUextSemaphore_st {
	_unused: [u8; 0],
}
pub type CUexternalSemaphore = *mut CUextSemaphore_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUgraph_st {
	_unused: [u8; 0],
}
pub type CUgraph = *mut CUgraph_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUgraphNode_st {
	_unused: [u8; 0],
}
pub type CUgraphNode = *mut CUgraphNode_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUgraphExec_st {
	_unused: [u8; 0],
}
pub type CUgraphExec = *mut CUgraphExec_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUmemPoolHandle_st {
	_unused: [u8; 0],
}
pub type CUmemoryPool = *mut CUmemPoolHandle_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUuserObject_st {
	_unused: [u8; 0],
}
pub type CUuserObject = *mut CUuserObject_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUuuid_st {
	pub bytes: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout_CUuuid_st() {
	assert_eq!(
		::std::mem::size_of::<CUuuid_st>(),
		16usize,
		concat!("Size of: ", stringify!(CUuuid_st))
	);
	assert_eq!(
		::std::mem::align_of::<CUuuid_st>(),
		1usize,
		concat!("Alignment of ", stringify!(CUuuid_st))
	);
	fn test_field_bytes() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUuuid_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).bytes) as usize - ptr as usize
			},
			0usize,
			concat!("Offset of field: ", stringify!(CUuuid_st), "::", stringify!(bytes))
		);
	}
	test_field_bytes();
}
pub type CUuuid = CUuuid_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUipcEventHandle_st {
	pub reserved: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout_CUipcEventHandle_st() {
	assert_eq!(
		::std::mem::size_of::<CUipcEventHandle_st>(),
		64usize,
		concat!("Size of: ", stringify!(CUipcEventHandle_st))
	);
	assert_eq!(
		::std::mem::align_of::<CUipcEventHandle_st>(),
		1usize,
		concat!("Alignment of ", stringify!(CUipcEventHandle_st))
	);
	fn test_field_reserved() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUipcEventHandle_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUipcEventHandle_st),
				"::",
				stringify!(reserved)
			)
		);
	}
	test_field_reserved();
}
pub type CUipcEventHandle_v1 = CUipcEventHandle_st;
pub type CUipcEventHandle = CUipcEventHandle_v1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUipcMemHandle_st {
	pub reserved: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout_CUipcMemHandle_st() {
	assert_eq!(
		::std::mem::size_of::<CUipcMemHandle_st>(),
		64usize,
		concat!("Size of: ", stringify!(CUipcMemHandle_st))
	);
	assert_eq!(
		::std::mem::align_of::<CUipcMemHandle_st>(),
		1usize,
		concat!("Alignment of ", stringify!(CUipcMemHandle_st))
	);
	fn test_field_reserved() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUipcMemHandle_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUipcMemHandle_st),
				"::",
				stringify!(reserved)
			)
		);
	}
	test_field_reserved();
}
pub type CUipcMemHandle_v1 = CUipcMemHandle_st;
pub type CUipcMemHandle = CUipcMemHandle_v1;
pub const CUipcMem_flags_enum_CU_IPC_MEM_LAZY_ENABLE_PEER_ACCESS: CUipcMem_flags_enum = 1;
pub type CUipcMem_flags_enum = ::std::os::raw::c_uint;
pub use self::CUipcMem_flags_enum as CUipcMem_flags;
pub const CUmemAttach_flags_enum_CU_MEM_ATTACH_GLOBAL: CUmemAttach_flags_enum = 1;
pub const CUmemAttach_flags_enum_CU_MEM_ATTACH_HOST: CUmemAttach_flags_enum = 2;
pub const CUmemAttach_flags_enum_CU_MEM_ATTACH_SINGLE: CUmemAttach_flags_enum = 4;
pub type CUmemAttach_flags_enum = ::std::os::raw::c_uint;
pub use self::CUmemAttach_flags_enum as CUmemAttach_flags;
pub const CUctx_flags_enum_CU_CTX_SCHED_AUTO: CUctx_flags_enum = 0;
pub const CUctx_flags_enum_CU_CTX_SCHED_SPIN: CUctx_flags_enum = 1;
pub const CUctx_flags_enum_CU_CTX_SCHED_YIELD: CUctx_flags_enum = 2;
pub const CUctx_flags_enum_CU_CTX_SCHED_BLOCKING_SYNC: CUctx_flags_enum = 4;
pub const CUctx_flags_enum_CU_CTX_BLOCKING_SYNC: CUctx_flags_enum = 4;
pub const CUctx_flags_enum_CU_CTX_SCHED_MASK: CUctx_flags_enum = 7;
pub const CUctx_flags_enum_CU_CTX_MAP_HOST: CUctx_flags_enum = 8;
pub const CUctx_flags_enum_CU_CTX_LMEM_RESIZE_TO_MAX: CUctx_flags_enum = 16;
pub const CUctx_flags_enum_CU_CTX_FLAGS_MASK: CUctx_flags_enum = 31;
pub type CUctx_flags_enum = ::std::os::raw::c_uint;
pub use self::CUctx_flags_enum as CUctx_flags;
pub const CUevent_sched_flags_enum_CU_EVENT_SCHED_AUTO: CUevent_sched_flags_enum = 0;
pub const CUevent_sched_flags_enum_CU_EVENT_SCHED_SPIN: CUevent_sched_flags_enum = 1;
pub const CUevent_sched_flags_enum_CU_EVENT_SCHED_YIELD: CUevent_sched_flags_enum = 2;
pub const CUevent_sched_flags_enum_CU_EVENT_SCHED_BLOCKING_SYNC: CUevent_sched_flags_enum = 4;
pub type CUevent_sched_flags_enum = ::std::os::raw::c_uint;
pub use self::CUevent_sched_flags_enum as CUevent_sched_flags;
pub const CUstream_flags_enum_CU_STREAM_DEFAULT: CUstream_flags_enum = 0;
pub const CUstream_flags_enum_CU_STREAM_NON_BLOCKING: CUstream_flags_enum = 1;
pub type CUstream_flags_enum = ::std::os::raw::c_uint;
pub use self::CUstream_flags_enum as CUstream_flags;
pub const CUevent_flags_enum_CU_EVENT_DEFAULT: CUevent_flags_enum = 0;
pub const CUevent_flags_enum_CU_EVENT_BLOCKING_SYNC: CUevent_flags_enum = 1;
pub const CUevent_flags_enum_CU_EVENT_DISABLE_TIMING: CUevent_flags_enum = 2;
pub const CUevent_flags_enum_CU_EVENT_INTERPROCESS: CUevent_flags_enum = 4;
pub type CUevent_flags_enum = ::std::os::raw::c_uint;
pub use self::CUevent_flags_enum as CUevent_flags;
pub const CUevent_record_flags_enum_CU_EVENT_RECORD_DEFAULT: CUevent_record_flags_enum = 0;
pub const CUevent_record_flags_enum_CU_EVENT_RECORD_EXTERNAL: CUevent_record_flags_enum = 1;
pub type CUevent_record_flags_enum = ::std::os::raw::c_uint;
pub use self::CUevent_record_flags_enum as CUevent_record_flags;
pub const CUevent_wait_flags_enum_CU_EVENT_WAIT_DEFAULT: CUevent_wait_flags_enum = 0;
pub const CUevent_wait_flags_enum_CU_EVENT_WAIT_EXTERNAL: CUevent_wait_flags_enum = 1;
pub type CUevent_wait_flags_enum = ::std::os::raw::c_uint;
pub use self::CUevent_wait_flags_enum as CUevent_wait_flags;
pub const CUstreamWaitValue_flags_enum_CU_STREAM_WAIT_VALUE_GEQ: CUstreamWaitValue_flags_enum = 0;
pub const CUstreamWaitValue_flags_enum_CU_STREAM_WAIT_VALUE_EQ: CUstreamWaitValue_flags_enum = 1;
pub const CUstreamWaitValue_flags_enum_CU_STREAM_WAIT_VALUE_AND: CUstreamWaitValue_flags_enum = 2;
pub const CUstreamWaitValue_flags_enum_CU_STREAM_WAIT_VALUE_NOR: CUstreamWaitValue_flags_enum = 3;
pub const CUstreamWaitValue_flags_enum_CU_STREAM_WAIT_VALUE_FLUSH: CUstreamWaitValue_flags_enum = 1073741824;
pub type CUstreamWaitValue_flags_enum = ::std::os::raw::c_uint;
pub use self::CUstreamWaitValue_flags_enum as CUstreamWaitValue_flags;
pub const CUstreamWriteValue_flags_enum_CU_STREAM_WRITE_VALUE_DEFAULT: CUstreamWriteValue_flags_enum = 0;
pub const CUstreamWriteValue_flags_enum_CU_STREAM_WRITE_VALUE_NO_MEMORY_BARRIER: CUstreamWriteValue_flags_enum = 1;
pub type CUstreamWriteValue_flags_enum = ::std::os::raw::c_uint;
pub use self::CUstreamWriteValue_flags_enum as CUstreamWriteValue_flags;
pub const CUstreamBatchMemOpType_enum_CU_STREAM_MEM_OP_WAIT_VALUE_32: CUstreamBatchMemOpType_enum = 1;
pub const CUstreamBatchMemOpType_enum_CU_STREAM_MEM_OP_WRITE_VALUE_32: CUstreamBatchMemOpType_enum = 2;
pub const CUstreamBatchMemOpType_enum_CU_STREAM_MEM_OP_WAIT_VALUE_64: CUstreamBatchMemOpType_enum = 4;
pub const CUstreamBatchMemOpType_enum_CU_STREAM_MEM_OP_WRITE_VALUE_64: CUstreamBatchMemOpType_enum = 5;
pub const CUstreamBatchMemOpType_enum_CU_STREAM_MEM_OP_BARRIER: CUstreamBatchMemOpType_enum = 6;
pub const CUstreamBatchMemOpType_enum_CU_STREAM_MEM_OP_FLUSH_REMOTE_WRITES: CUstreamBatchMemOpType_enum = 3;
pub type CUstreamBatchMemOpType_enum = ::std::os::raw::c_uint;
pub use self::CUstreamBatchMemOpType_enum as CUstreamBatchMemOpType;
pub const CUstreamMemoryBarrier_flags_enum_CU_STREAM_MEMORY_BARRIER_TYPE_SYS: CUstreamMemoryBarrier_flags_enum = 0;
pub const CUstreamMemoryBarrier_flags_enum_CU_STREAM_MEMORY_BARRIER_TYPE_GPU: CUstreamMemoryBarrier_flags_enum = 1;
pub type CUstreamMemoryBarrier_flags_enum = ::std::os::raw::c_uint;
pub use self::CUstreamMemoryBarrier_flags_enum as CUstreamMemoryBarrier_flags;
#[repr(C)]
#[derive(Copy, Clone)]
pub union CUstreamBatchMemOpParams_union {
	pub operation: CUstreamBatchMemOpType,
	pub waitValue: CUstreamBatchMemOpParams_union_CUstreamMemOpWaitValueParams_st,
	pub writeValue: CUstreamBatchMemOpParams_union_CUstreamMemOpWriteValueParams_st,
	pub flushRemoteWrites: CUstreamBatchMemOpParams_union_CUstreamMemOpFlushRemoteWritesParams_st,
	pub memoryBarrier: CUstreamBatchMemOpParams_union_CUstreamMemOpMemoryBarrierParams_st,
	pub pad: [cuuint64_t; 6usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CUstreamBatchMemOpParams_union_CUstreamMemOpWaitValueParams_st {
	pub operation: CUstreamBatchMemOpType,
	pub address: CUdeviceptr,
	pub __bindgen_anon_1: CUstreamBatchMemOpParams_union_CUstreamMemOpWaitValueParams_st__bindgen_ty_1,
	pub flags: ::std::os::raw::c_uint,
	pub alias: CUdeviceptr,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union CUstreamBatchMemOpParams_union_CUstreamMemOpWaitValueParams_st__bindgen_ty_1 {
	pub value: cuuint32_t,
	pub value64: cuuint64_t,
}
#[test]
fn bindgen_test_layout_CUstreamBatchMemOpParams_union_CUstreamMemOpWaitValueParams_st__bindgen_ty_1() {
	assert_eq!(
		::std::mem::size_of::<CUstreamBatchMemOpParams_union_CUstreamMemOpWaitValueParams_st__bindgen_ty_1>(),
		8usize,
		concat!(
			"Size of: ",
			stringify!(CUstreamBatchMemOpParams_union_CUstreamMemOpWaitValueParams_st__bindgen_ty_1)
		)
	);
	assert_eq!(
		::std::mem::align_of::<CUstreamBatchMemOpParams_union_CUstreamMemOpWaitValueParams_st__bindgen_ty_1>(),
		8usize,
		concat!(
			"Alignment of ",
			stringify!(CUstreamBatchMemOpParams_union_CUstreamMemOpWaitValueParams_st__bindgen_ty_1)
		)
	);
	fn test_field_value() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<
					CUstreamBatchMemOpParams_union_CUstreamMemOpWaitValueParams_st__bindgen_ty_1,
				>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUstreamBatchMemOpParams_union_CUstreamMemOpWaitValueParams_st__bindgen_ty_1),
				"::",
				stringify!(value)
			)
		);
	}
	test_field_value();
	fn test_field_value64() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<
					CUstreamBatchMemOpParams_union_CUstreamMemOpWaitValueParams_st__bindgen_ty_1,
				>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).value64) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUstreamBatchMemOpParams_union_CUstreamMemOpWaitValueParams_st__bindgen_ty_1),
				"::",
				stringify!(value64)
			)
		);
	}
	test_field_value64();
}
#[test]
fn bindgen_test_layout_CUstreamBatchMemOpParams_union_CUstreamMemOpWaitValueParams_st() {
	assert_eq!(
		::std::mem::size_of::<CUstreamBatchMemOpParams_union_CUstreamMemOpWaitValueParams_st>(),
		40usize,
		concat!(
			"Size of: ",
			stringify!(CUstreamBatchMemOpParams_union_CUstreamMemOpWaitValueParams_st)
		)
	);
	assert_eq!(
		::std::mem::align_of::<CUstreamBatchMemOpParams_union_CUstreamMemOpWaitValueParams_st>(),
		8usize,
		concat!(
			"Alignment of ",
			stringify!(CUstreamBatchMemOpParams_union_CUstreamMemOpWaitValueParams_st)
		)
	);
	fn test_field_operation() {
		assert_eq!(
			unsafe {
				let uninit =
					::std::mem::MaybeUninit::<CUstreamBatchMemOpParams_union_CUstreamMemOpWaitValueParams_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).operation) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUstreamBatchMemOpParams_union_CUstreamMemOpWaitValueParams_st),
				"::",
				stringify!(operation)
			)
		);
	}
	test_field_operation();
	fn test_field_address() {
		assert_eq!(
			unsafe {
				let uninit =
					::std::mem::MaybeUninit::<CUstreamBatchMemOpParams_union_CUstreamMemOpWaitValueParams_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(CUstreamBatchMemOpParams_union_CUstreamMemOpWaitValueParams_st),
				"::",
				stringify!(address)
			)
		);
	}
	test_field_address();
	fn test_field_flags() {
		assert_eq!(
			unsafe {
				let uninit =
					::std::mem::MaybeUninit::<CUstreamBatchMemOpParams_union_CUstreamMemOpWaitValueParams_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
			},
			24usize,
			concat!(
				"Offset of field: ",
				stringify!(CUstreamBatchMemOpParams_union_CUstreamMemOpWaitValueParams_st),
				"::",
				stringify!(flags)
			)
		);
	}
	test_field_flags();
	fn test_field_alias() {
		assert_eq!(
			unsafe {
				let uninit =
					::std::mem::MaybeUninit::<CUstreamBatchMemOpParams_union_CUstreamMemOpWaitValueParams_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).alias) as usize - ptr as usize
			},
			32usize,
			concat!(
				"Offset of field: ",
				stringify!(CUstreamBatchMemOpParams_union_CUstreamMemOpWaitValueParams_st),
				"::",
				stringify!(alias)
			)
		);
	}
	test_field_alias();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CUstreamBatchMemOpParams_union_CUstreamMemOpWriteValueParams_st {
	pub operation: CUstreamBatchMemOpType,
	pub address: CUdeviceptr,
	pub __bindgen_anon_1: CUstreamBatchMemOpParams_union_CUstreamMemOpWriteValueParams_st__bindgen_ty_1,
	pub flags: ::std::os::raw::c_uint,
	pub alias: CUdeviceptr,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union CUstreamBatchMemOpParams_union_CUstreamMemOpWriteValueParams_st__bindgen_ty_1 {
	pub value: cuuint32_t,
	pub value64: cuuint64_t,
}
#[test]
fn bindgen_test_layout_CUstreamBatchMemOpParams_union_CUstreamMemOpWriteValueParams_st__bindgen_ty_1() {
	assert_eq!(
		::std::mem::size_of::<CUstreamBatchMemOpParams_union_CUstreamMemOpWriteValueParams_st__bindgen_ty_1>(),
		8usize,
		concat!(
			"Size of: ",
			stringify!(CUstreamBatchMemOpParams_union_CUstreamMemOpWriteValueParams_st__bindgen_ty_1)
		)
	);
	assert_eq!(
		::std::mem::align_of::<CUstreamBatchMemOpParams_union_CUstreamMemOpWriteValueParams_st__bindgen_ty_1>(),
		8usize,
		concat!(
			"Alignment of ",
			stringify!(CUstreamBatchMemOpParams_union_CUstreamMemOpWriteValueParams_st__bindgen_ty_1)
		)
	);
	fn test_field_value() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<
					CUstreamBatchMemOpParams_union_CUstreamMemOpWriteValueParams_st__bindgen_ty_1,
				>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUstreamBatchMemOpParams_union_CUstreamMemOpWriteValueParams_st__bindgen_ty_1),
				"::",
				stringify!(value)
			)
		);
	}
	test_field_value();
	fn test_field_value64() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<
					CUstreamBatchMemOpParams_union_CUstreamMemOpWriteValueParams_st__bindgen_ty_1,
				>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).value64) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUstreamBatchMemOpParams_union_CUstreamMemOpWriteValueParams_st__bindgen_ty_1),
				"::",
				stringify!(value64)
			)
		);
	}
	test_field_value64();
}
#[test]
fn bindgen_test_layout_CUstreamBatchMemOpParams_union_CUstreamMemOpWriteValueParams_st() {
	assert_eq!(
		::std::mem::size_of::<CUstreamBatchMemOpParams_union_CUstreamMemOpWriteValueParams_st>(),
		40usize,
		concat!(
			"Size of: ",
			stringify!(CUstreamBatchMemOpParams_union_CUstreamMemOpWriteValueParams_st)
		)
	);
	assert_eq!(
		::std::mem::align_of::<CUstreamBatchMemOpParams_union_CUstreamMemOpWriteValueParams_st>(),
		8usize,
		concat!(
			"Alignment of ",
			stringify!(CUstreamBatchMemOpParams_union_CUstreamMemOpWriteValueParams_st)
		)
	);
	fn test_field_operation() {
		assert_eq!(
			unsafe {
				let uninit =
					::std::mem::MaybeUninit::<CUstreamBatchMemOpParams_union_CUstreamMemOpWriteValueParams_st>::uninit(
					);
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).operation) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUstreamBatchMemOpParams_union_CUstreamMemOpWriteValueParams_st),
				"::",
				stringify!(operation)
			)
		);
	}
	test_field_operation();
	fn test_field_address() {
		assert_eq!(
			unsafe {
				let uninit =
					::std::mem::MaybeUninit::<CUstreamBatchMemOpParams_union_CUstreamMemOpWriteValueParams_st>::uninit(
					);
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(CUstreamBatchMemOpParams_union_CUstreamMemOpWriteValueParams_st),
				"::",
				stringify!(address)
			)
		);
	}
	test_field_address();
	fn test_field_flags() {
		assert_eq!(
			unsafe {
				let uninit =
					::std::mem::MaybeUninit::<CUstreamBatchMemOpParams_union_CUstreamMemOpWriteValueParams_st>::uninit(
					);
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
			},
			24usize,
			concat!(
				"Offset of field: ",
				stringify!(CUstreamBatchMemOpParams_union_CUstreamMemOpWriteValueParams_st),
				"::",
				stringify!(flags)
			)
		);
	}
	test_field_flags();
	fn test_field_alias() {
		assert_eq!(
			unsafe {
				let uninit =
					::std::mem::MaybeUninit::<CUstreamBatchMemOpParams_union_CUstreamMemOpWriteValueParams_st>::uninit(
					);
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).alias) as usize - ptr as usize
			},
			32usize,
			concat!(
				"Offset of field: ",
				stringify!(CUstreamBatchMemOpParams_union_CUstreamMemOpWriteValueParams_st),
				"::",
				stringify!(alias)
			)
		);
	}
	test_field_alias();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUstreamBatchMemOpParams_union_CUstreamMemOpFlushRemoteWritesParams_st {
	pub operation: CUstreamBatchMemOpType,
	pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_CUstreamBatchMemOpParams_union_CUstreamMemOpFlushRemoteWritesParams_st() {
	assert_eq!(
		::std::mem::size_of::<CUstreamBatchMemOpParams_union_CUstreamMemOpFlushRemoteWritesParams_st>(),
		8usize,
		concat!(
			"Size of: ",
			stringify!(CUstreamBatchMemOpParams_union_CUstreamMemOpFlushRemoteWritesParams_st)
		)
	);
	assert_eq!(
		::std::mem::align_of::<CUstreamBatchMemOpParams_union_CUstreamMemOpFlushRemoteWritesParams_st>(),
		4usize,
		concat!(
			"Alignment of ",
			stringify!(CUstreamBatchMemOpParams_union_CUstreamMemOpFlushRemoteWritesParams_st)
		)
	);
	fn test_field_operation() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<
					CUstreamBatchMemOpParams_union_CUstreamMemOpFlushRemoteWritesParams_st,
				>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).operation) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUstreamBatchMemOpParams_union_CUstreamMemOpFlushRemoteWritesParams_st),
				"::",
				stringify!(operation)
			)
		);
	}
	test_field_operation();
	fn test_field_flags() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<
					CUstreamBatchMemOpParams_union_CUstreamMemOpFlushRemoteWritesParams_st,
				>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
			},
			4usize,
			concat!(
				"Offset of field: ",
				stringify!(CUstreamBatchMemOpParams_union_CUstreamMemOpFlushRemoteWritesParams_st),
				"::",
				stringify!(flags)
			)
		);
	}
	test_field_flags();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUstreamBatchMemOpParams_union_CUstreamMemOpMemoryBarrierParams_st {
	pub operation: CUstreamBatchMemOpType,
	pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_CUstreamBatchMemOpParams_union_CUstreamMemOpMemoryBarrierParams_st() {
	assert_eq!(
		::std::mem::size_of::<CUstreamBatchMemOpParams_union_CUstreamMemOpMemoryBarrierParams_st>(),
		8usize,
		concat!(
			"Size of: ",
			stringify!(CUstreamBatchMemOpParams_union_CUstreamMemOpMemoryBarrierParams_st)
		)
	);
	assert_eq!(
		::std::mem::align_of::<CUstreamBatchMemOpParams_union_CUstreamMemOpMemoryBarrierParams_st>(),
		4usize,
		concat!(
			"Alignment of ",
			stringify!(CUstreamBatchMemOpParams_union_CUstreamMemOpMemoryBarrierParams_st)
		)
	);
	fn test_field_operation() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<
					CUstreamBatchMemOpParams_union_CUstreamMemOpMemoryBarrierParams_st,
				>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).operation) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUstreamBatchMemOpParams_union_CUstreamMemOpMemoryBarrierParams_st),
				"::",
				stringify!(operation)
			)
		);
	}
	test_field_operation();
	fn test_field_flags() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<
					CUstreamBatchMemOpParams_union_CUstreamMemOpMemoryBarrierParams_st,
				>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
			},
			4usize,
			concat!(
				"Offset of field: ",
				stringify!(CUstreamBatchMemOpParams_union_CUstreamMemOpMemoryBarrierParams_st),
				"::",
				stringify!(flags)
			)
		);
	}
	test_field_flags();
}
#[test]
fn bindgen_test_layout_CUstreamBatchMemOpParams_union() {
	assert_eq!(
		::std::mem::size_of::<CUstreamBatchMemOpParams_union>(),
		48usize,
		concat!("Size of: ", stringify!(CUstreamBatchMemOpParams_union))
	);
	assert_eq!(
		::std::mem::align_of::<CUstreamBatchMemOpParams_union>(),
		8usize,
		concat!("Alignment of ", stringify!(CUstreamBatchMemOpParams_union))
	);
	fn test_field_operation() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUstreamBatchMemOpParams_union>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).operation) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUstreamBatchMemOpParams_union),
				"::",
				stringify!(operation)
			)
		);
	}
	test_field_operation();
	fn test_field_waitValue() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUstreamBatchMemOpParams_union>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).waitValue) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUstreamBatchMemOpParams_union),
				"::",
				stringify!(waitValue)
			)
		);
	}
	test_field_waitValue();
	fn test_field_writeValue() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUstreamBatchMemOpParams_union>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).writeValue) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUstreamBatchMemOpParams_union),
				"::",
				stringify!(writeValue)
			)
		);
	}
	test_field_writeValue();
	fn test_field_flushRemoteWrites() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUstreamBatchMemOpParams_union>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).flushRemoteWrites) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUstreamBatchMemOpParams_union),
				"::",
				stringify!(flushRemoteWrites)
			)
		);
	}
	test_field_flushRemoteWrites();
	fn test_field_memoryBarrier() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUstreamBatchMemOpParams_union>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).memoryBarrier) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUstreamBatchMemOpParams_union),
				"::",
				stringify!(memoryBarrier)
			)
		);
	}
	test_field_memoryBarrier();
	fn test_field_pad() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUstreamBatchMemOpParams_union>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUstreamBatchMemOpParams_union),
				"::",
				stringify!(pad)
			)
		);
	}
	test_field_pad();
}
pub type CUstreamBatchMemOpParams_v1 = CUstreamBatchMemOpParams_union;
pub type CUstreamBatchMemOpParams = CUstreamBatchMemOpParams_v1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUDA_BATCH_MEM_OP_NODE_PARAMS_st {
	pub ctx: CUcontext,
	pub count: ::std::os::raw::c_uint,
	pub paramArray: *mut CUstreamBatchMemOpParams,
	pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_CUDA_BATCH_MEM_OP_NODE_PARAMS_st() {
	assert_eq!(
		::std::mem::size_of::<CUDA_BATCH_MEM_OP_NODE_PARAMS_st>(),
		32usize,
		concat!("Size of: ", stringify!(CUDA_BATCH_MEM_OP_NODE_PARAMS_st))
	);
	assert_eq!(
		::std::mem::align_of::<CUDA_BATCH_MEM_OP_NODE_PARAMS_st>(),
		8usize,
		concat!("Alignment of ", stringify!(CUDA_BATCH_MEM_OP_NODE_PARAMS_st))
	);
	fn test_field_ctx() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_BATCH_MEM_OP_NODE_PARAMS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_BATCH_MEM_OP_NODE_PARAMS_st),
				"::",
				stringify!(ctx)
			)
		);
	}
	test_field_ctx();
	fn test_field_count() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_BATCH_MEM_OP_NODE_PARAMS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_BATCH_MEM_OP_NODE_PARAMS_st),
				"::",
				stringify!(count)
			)
		);
	}
	test_field_count();
	fn test_field_paramArray() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_BATCH_MEM_OP_NODE_PARAMS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).paramArray) as usize - ptr as usize
			},
			16usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_BATCH_MEM_OP_NODE_PARAMS_st),
				"::",
				stringify!(paramArray)
			)
		);
	}
	test_field_paramArray();
	fn test_field_flags() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_BATCH_MEM_OP_NODE_PARAMS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
			},
			24usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_BATCH_MEM_OP_NODE_PARAMS_st),
				"::",
				stringify!(flags)
			)
		);
	}
	test_field_flags();
}
pub type CUDA_BATCH_MEM_OP_NODE_PARAMS = CUDA_BATCH_MEM_OP_NODE_PARAMS_st;
pub const CUoccupancy_flags_enum_CU_OCCUPANCY_DEFAULT: CUoccupancy_flags_enum = 0;
pub const CUoccupancy_flags_enum_CU_OCCUPANCY_DISABLE_CACHING_OVERRIDE: CUoccupancy_flags_enum = 1;
pub type CUoccupancy_flags_enum = ::std::os::raw::c_uint;
pub use self::CUoccupancy_flags_enum as CUoccupancy_flags;
pub const CUstreamUpdateCaptureDependencies_flags_enum_CU_STREAM_ADD_CAPTURE_DEPENDENCIES:
	CUstreamUpdateCaptureDependencies_flags_enum = 0;
pub const CUstreamUpdateCaptureDependencies_flags_enum_CU_STREAM_SET_CAPTURE_DEPENDENCIES:
	CUstreamUpdateCaptureDependencies_flags_enum = 1;
pub type CUstreamUpdateCaptureDependencies_flags_enum = ::std::os::raw::c_uint;
pub use self::CUstreamUpdateCaptureDependencies_flags_enum as CUstreamUpdateCaptureDependencies_flags;
pub const CUarray_format_enum_CU_AD_FORMAT_UNSIGNED_INT8: CUarray_format_enum = 1;
pub const CUarray_format_enum_CU_AD_FORMAT_UNSIGNED_INT16: CUarray_format_enum = 2;
pub const CUarray_format_enum_CU_AD_FORMAT_UNSIGNED_INT32: CUarray_format_enum = 3;
pub const CUarray_format_enum_CU_AD_FORMAT_SIGNED_INT8: CUarray_format_enum = 8;
pub const CUarray_format_enum_CU_AD_FORMAT_SIGNED_INT16: CUarray_format_enum = 9;
pub const CUarray_format_enum_CU_AD_FORMAT_SIGNED_INT32: CUarray_format_enum = 10;
pub const CUarray_format_enum_CU_AD_FORMAT_HALF: CUarray_format_enum = 16;
pub const CUarray_format_enum_CU_AD_FORMAT_FLOAT: CUarray_format_enum = 32;
pub const CUarray_format_enum_CU_AD_FORMAT_NV12: CUarray_format_enum = 176;
pub const CUarray_format_enum_CU_AD_FORMAT_UNORM_INT8X1: CUarray_format_enum = 192;
pub const CUarray_format_enum_CU_AD_FORMAT_UNORM_INT8X2: CUarray_format_enum = 193;
pub const CUarray_format_enum_CU_AD_FORMAT_UNORM_INT8X4: CUarray_format_enum = 194;
pub const CUarray_format_enum_CU_AD_FORMAT_UNORM_INT16X1: CUarray_format_enum = 195;
pub const CUarray_format_enum_CU_AD_FORMAT_UNORM_INT16X2: CUarray_format_enum = 196;
pub const CUarray_format_enum_CU_AD_FORMAT_UNORM_INT16X4: CUarray_format_enum = 197;
pub const CUarray_format_enum_CU_AD_FORMAT_SNORM_INT8X1: CUarray_format_enum = 198;
pub const CUarray_format_enum_CU_AD_FORMAT_SNORM_INT8X2: CUarray_format_enum = 199;
pub const CUarray_format_enum_CU_AD_FORMAT_SNORM_INT8X4: CUarray_format_enum = 200;
pub const CUarray_format_enum_CU_AD_FORMAT_SNORM_INT16X1: CUarray_format_enum = 201;
pub const CUarray_format_enum_CU_AD_FORMAT_SNORM_INT16X2: CUarray_format_enum = 202;
pub const CUarray_format_enum_CU_AD_FORMAT_SNORM_INT16X4: CUarray_format_enum = 203;
pub const CUarray_format_enum_CU_AD_FORMAT_BC1_UNORM: CUarray_format_enum = 145;
pub const CUarray_format_enum_CU_AD_FORMAT_BC1_UNORM_SRGB: CUarray_format_enum = 146;
pub const CUarray_format_enum_CU_AD_FORMAT_BC2_UNORM: CUarray_format_enum = 147;
pub const CUarray_format_enum_CU_AD_FORMAT_BC2_UNORM_SRGB: CUarray_format_enum = 148;
pub const CUarray_format_enum_CU_AD_FORMAT_BC3_UNORM: CUarray_format_enum = 149;
pub const CUarray_format_enum_CU_AD_FORMAT_BC3_UNORM_SRGB: CUarray_format_enum = 150;
pub const CUarray_format_enum_CU_AD_FORMAT_BC4_UNORM: CUarray_format_enum = 151;
pub const CUarray_format_enum_CU_AD_FORMAT_BC4_SNORM: CUarray_format_enum = 152;
pub const CUarray_format_enum_CU_AD_FORMAT_BC5_UNORM: CUarray_format_enum = 153;
pub const CUarray_format_enum_CU_AD_FORMAT_BC5_SNORM: CUarray_format_enum = 154;
pub const CUarray_format_enum_CU_AD_FORMAT_BC6H_UF16: CUarray_format_enum = 155;
pub const CUarray_format_enum_CU_AD_FORMAT_BC6H_SF16: CUarray_format_enum = 156;
pub const CUarray_format_enum_CU_AD_FORMAT_BC7_UNORM: CUarray_format_enum = 157;
pub const CUarray_format_enum_CU_AD_FORMAT_BC7_UNORM_SRGB: CUarray_format_enum = 158;
pub type CUarray_format_enum = ::std::os::raw::c_uint;
pub use self::CUarray_format_enum as CUarray_format;
pub const CUaddress_mode_enum_CU_TR_ADDRESS_MODE_WRAP: CUaddress_mode_enum = 0;
pub const CUaddress_mode_enum_CU_TR_ADDRESS_MODE_CLAMP: CUaddress_mode_enum = 1;
pub const CUaddress_mode_enum_CU_TR_ADDRESS_MODE_MIRROR: CUaddress_mode_enum = 2;
pub const CUaddress_mode_enum_CU_TR_ADDRESS_MODE_BORDER: CUaddress_mode_enum = 3;
pub type CUaddress_mode_enum = ::std::os::raw::c_uint;
pub use self::CUaddress_mode_enum as CUaddress_mode;
pub const CUfilter_mode_enum_CU_TR_FILTER_MODE_POINT: CUfilter_mode_enum = 0;
pub const CUfilter_mode_enum_CU_TR_FILTER_MODE_LINEAR: CUfilter_mode_enum = 1;
pub type CUfilter_mode_enum = ::std::os::raw::c_uint;
pub use self::CUfilter_mode_enum as CUfilter_mode;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_BLOCK: CUdevice_attribute_enum = 1;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_X: CUdevice_attribute_enum = 2;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Y: CUdevice_attribute_enum = 3;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Z: CUdevice_attribute_enum = 4;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_X: CUdevice_attribute_enum = 5;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Y: CUdevice_attribute_enum = 6;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Z: CUdevice_attribute_enum = 7;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK: CUdevice_attribute_enum = 8;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_SHARED_MEMORY_PER_BLOCK: CUdevice_attribute_enum = 8;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_TOTAL_CONSTANT_MEMORY: CUdevice_attribute_enum = 9;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_WARP_SIZE: CUdevice_attribute_enum = 10;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAX_PITCH: CUdevice_attribute_enum = 11;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_BLOCK: CUdevice_attribute_enum = 12;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_REGISTERS_PER_BLOCK: CUdevice_attribute_enum = 12;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_CLOCK_RATE: CUdevice_attribute_enum = 13;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_TEXTURE_ALIGNMENT: CUdevice_attribute_enum = 14;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_GPU_OVERLAP: CUdevice_attribute_enum = 15;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MULTIPROCESSOR_COUNT: CUdevice_attribute_enum = 16;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_KERNEL_EXEC_TIMEOUT: CUdevice_attribute_enum = 17;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_INTEGRATED: CUdevice_attribute_enum = 18;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_CAN_MAP_HOST_MEMORY: CUdevice_attribute_enum = 19;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_COMPUTE_MODE: CUdevice_attribute_enum = 20;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_WIDTH: CUdevice_attribute_enum = 21;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_WIDTH: CUdevice_attribute_enum = 22;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_HEIGHT: CUdevice_attribute_enum = 23;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH: CUdevice_attribute_enum = 24;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT: CUdevice_attribute_enum = 25;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH: CUdevice_attribute_enum = 26;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_WIDTH: CUdevice_attribute_enum = 27;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_HEIGHT: CUdevice_attribute_enum = 28;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_LAYERS: CUdevice_attribute_enum = 29;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_WIDTH: CUdevice_attribute_enum = 27;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_HEIGHT: CUdevice_attribute_enum = 28;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_NUMSLICES: CUdevice_attribute_enum = 29;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_SURFACE_ALIGNMENT: CUdevice_attribute_enum = 30;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_CONCURRENT_KERNELS: CUdevice_attribute_enum = 31;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_ECC_ENABLED: CUdevice_attribute_enum = 32;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_PCI_BUS_ID: CUdevice_attribute_enum = 33;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_PCI_DEVICE_ID: CUdevice_attribute_enum = 34;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_TCC_DRIVER: CUdevice_attribute_enum = 35;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MEMORY_CLOCK_RATE: CUdevice_attribute_enum = 36;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_GLOBAL_MEMORY_BUS_WIDTH: CUdevice_attribute_enum = 37;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_L2_CACHE_SIZE: CUdevice_attribute_enum = 38;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_MULTIPROCESSOR: CUdevice_attribute_enum = 39;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_ASYNC_ENGINE_COUNT: CUdevice_attribute_enum = 40;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_UNIFIED_ADDRESSING: CUdevice_attribute_enum = 41;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_WIDTH: CUdevice_attribute_enum = 42;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_LAYERS: CUdevice_attribute_enum = 43;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_CAN_TEX2D_GATHER: CUdevice_attribute_enum = 44;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_GATHER_WIDTH: CUdevice_attribute_enum = 45;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_GATHER_HEIGHT: CUdevice_attribute_enum = 46;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH_ALTERNATE: CUdevice_attribute_enum = 47;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT_ALTERNATE: CUdevice_attribute_enum = 48;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH_ALTERNATE: CUdevice_attribute_enum = 49;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_PCI_DOMAIN_ID: CUdevice_attribute_enum = 50;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_TEXTURE_PITCH_ALIGNMENT: CUdevice_attribute_enum = 51;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_WIDTH: CUdevice_attribute_enum = 52;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_LAYERED_WIDTH: CUdevice_attribute_enum =
	53;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_LAYERED_LAYERS: CUdevice_attribute_enum =
	54;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_WIDTH: CUdevice_attribute_enum = 55;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_WIDTH: CUdevice_attribute_enum = 56;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_HEIGHT: CUdevice_attribute_enum = 57;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_WIDTH: CUdevice_attribute_enum = 58;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_HEIGHT: CUdevice_attribute_enum = 59;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_DEPTH: CUdevice_attribute_enum = 60;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_LAYERED_WIDTH: CUdevice_attribute_enum = 61;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_LAYERED_LAYERS: CUdevice_attribute_enum = 62;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_WIDTH: CUdevice_attribute_enum = 63;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_HEIGHT: CUdevice_attribute_enum = 64;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_LAYERS: CUdevice_attribute_enum = 65;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_WIDTH: CUdevice_attribute_enum = 66;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_LAYERED_WIDTH: CUdevice_attribute_enum =
	67;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_LAYERED_LAYERS: CUdevice_attribute_enum =
	68;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LINEAR_WIDTH: CUdevice_attribute_enum = 69;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_WIDTH: CUdevice_attribute_enum = 70;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_HEIGHT: CUdevice_attribute_enum = 71;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_PITCH: CUdevice_attribute_enum = 72;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_MIPMAPPED_WIDTH: CUdevice_attribute_enum = 73;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_MIPMAPPED_HEIGHT: CUdevice_attribute_enum = 74;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MAJOR: CUdevice_attribute_enum = 75;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MINOR: CUdevice_attribute_enum = 76;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_MIPMAPPED_WIDTH: CUdevice_attribute_enum = 77;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_STREAM_PRIORITIES_SUPPORTED: CUdevice_attribute_enum = 78;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_GLOBAL_L1_CACHE_SUPPORTED: CUdevice_attribute_enum = 79;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_LOCAL_L1_CACHE_SUPPORTED: CUdevice_attribute_enum = 80;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_MULTIPROCESSOR: CUdevice_attribute_enum =
	81;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_MULTIPROCESSOR: CUdevice_attribute_enum = 82;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MANAGED_MEMORY: CUdevice_attribute_enum = 83;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MULTI_GPU_BOARD: CUdevice_attribute_enum = 84;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MULTI_GPU_BOARD_GROUP_ID: CUdevice_attribute_enum = 85;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_HOST_NATIVE_ATOMIC_SUPPORTED: CUdevice_attribute_enum = 86;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_SINGLE_TO_DOUBLE_PRECISION_PERF_RATIO: CUdevice_attribute_enum =
	87;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_PAGEABLE_MEMORY_ACCESS: CUdevice_attribute_enum = 88;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_CONCURRENT_MANAGED_ACCESS: CUdevice_attribute_enum = 89;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_COMPUTE_PREEMPTION_SUPPORTED: CUdevice_attribute_enum = 90;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_CAN_USE_HOST_POINTER_FOR_REGISTERED_MEM: CUdevice_attribute_enum =
	91;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_CAN_USE_STREAM_MEM_OPS: CUdevice_attribute_enum = 92;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_CAN_USE_64_BIT_STREAM_MEM_OPS: CUdevice_attribute_enum = 93;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_CAN_USE_STREAM_WAIT_VALUE_NOR: CUdevice_attribute_enum = 94;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_COOPERATIVE_LAUNCH: CUdevice_attribute_enum = 95;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_COOPERATIVE_MULTI_DEVICE_LAUNCH: CUdevice_attribute_enum = 96;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK_OPTIN: CUdevice_attribute_enum = 97;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_CAN_FLUSH_REMOTE_WRITES: CUdevice_attribute_enum = 98;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_HOST_REGISTER_SUPPORTED: CUdevice_attribute_enum = 99;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_PAGEABLE_MEMORY_ACCESS_USES_HOST_PAGE_TABLES:
	CUdevice_attribute_enum = 100;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_DIRECT_MANAGED_MEM_ACCESS_FROM_HOST: CUdevice_attribute_enum =
	101;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_VIRTUAL_ADDRESS_MANAGEMENT_SUPPORTED: CUdevice_attribute_enum =
	102;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_VIRTUAL_MEMORY_MANAGEMENT_SUPPORTED: CUdevice_attribute_enum =
	102;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_HANDLE_TYPE_POSIX_FILE_DESCRIPTOR_SUPPORTED:
	CUdevice_attribute_enum = 103;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_HANDLE_TYPE_WIN32_HANDLE_SUPPORTED: CUdevice_attribute_enum = 104;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_HANDLE_TYPE_WIN32_KMT_HANDLE_SUPPORTED: CUdevice_attribute_enum =
	105;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAX_BLOCKS_PER_MULTIPROCESSOR: CUdevice_attribute_enum = 106;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_GENERIC_COMPRESSION_SUPPORTED: CUdevice_attribute_enum = 107;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAX_PERSISTING_L2_CACHE_SIZE: CUdevice_attribute_enum = 108;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAX_ACCESS_POLICY_WINDOW_SIZE: CUdevice_attribute_enum = 109;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_GPU_DIRECT_RDMA_WITH_CUDA_VMM_SUPPORTED: CUdevice_attribute_enum =
	110;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_RESERVED_SHARED_MEMORY_PER_BLOCK: CUdevice_attribute_enum = 111;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_SPARSE_CUDA_ARRAY_SUPPORTED: CUdevice_attribute_enum = 112;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_READ_ONLY_HOST_REGISTER_SUPPORTED: CUdevice_attribute_enum = 113;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_TIMELINE_SEMAPHORE_INTEROP_SUPPORTED: CUdevice_attribute_enum =
	114;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MEMORY_POOLS_SUPPORTED: CUdevice_attribute_enum = 115;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_GPU_DIRECT_RDMA_SUPPORTED: CUdevice_attribute_enum = 116;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_GPU_DIRECT_RDMA_FLUSH_WRITES_OPTIONS: CUdevice_attribute_enum =
	117;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_GPU_DIRECT_RDMA_WRITES_ORDERING: CUdevice_attribute_enum = 118;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MEMPOOL_SUPPORTED_HANDLE_TYPES: CUdevice_attribute_enum = 119;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_CLUSTER_LAUNCH: CUdevice_attribute_enum = 120;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_DEFERRED_MAPPING_CUDA_ARRAY_SUPPORTED: CUdevice_attribute_enum =
	121;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_CAN_USE_64_BIT_STREAM_MEM_OPS_V2: CUdevice_attribute_enum = 122;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_CAN_USE_STREAM_WAIT_VALUE_NOR_V2: CUdevice_attribute_enum = 123;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_DMA_BUF_SUPPORTED: CUdevice_attribute_enum = 124;
pub const CUdevice_attribute_enum_CU_DEVICE_ATTRIBUTE_MAX: CUdevice_attribute_enum = 125;
pub type CUdevice_attribute_enum = ::std::os::raw::c_uint;
pub use self::CUdevice_attribute_enum as CUdevice_attribute;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUdevprop_st {
	pub maxThreadsPerBlock: ::std::os::raw::c_int,
	pub maxThreadsDim: [::std::os::raw::c_int; 3usize],
	pub maxGridSize: [::std::os::raw::c_int; 3usize],
	pub sharedMemPerBlock: ::std::os::raw::c_int,
	pub totalConstantMemory: ::std::os::raw::c_int,
	pub SIMDWidth: ::std::os::raw::c_int,
	pub memPitch: ::std::os::raw::c_int,
	pub regsPerBlock: ::std::os::raw::c_int,
	pub clockRate: ::std::os::raw::c_int,
	pub textureAlign: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_CUdevprop_st() {
	assert_eq!(
		::std::mem::size_of::<CUdevprop_st>(),
		56usize,
		concat!("Size of: ", stringify!(CUdevprop_st))
	);
	assert_eq!(
		::std::mem::align_of::<CUdevprop_st>(),
		4usize,
		concat!("Alignment of ", stringify!(CUdevprop_st))
	);
	fn test_field_maxThreadsPerBlock() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUdevprop_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).maxThreadsPerBlock) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUdevprop_st),
				"::",
				stringify!(maxThreadsPerBlock)
			)
		);
	}
	test_field_maxThreadsPerBlock();
	fn test_field_maxThreadsDim() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUdevprop_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).maxThreadsDim) as usize - ptr as usize
			},
			4usize,
			concat!(
				"Offset of field: ",
				stringify!(CUdevprop_st),
				"::",
				stringify!(maxThreadsDim)
			)
		);
	}
	test_field_maxThreadsDim();
	fn test_field_maxGridSize() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUdevprop_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).maxGridSize) as usize - ptr as usize
			},
			16usize,
			concat!(
				"Offset of field: ",
				stringify!(CUdevprop_st),
				"::",
				stringify!(maxGridSize)
			)
		);
	}
	test_field_maxGridSize();
	fn test_field_sharedMemPerBlock() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUdevprop_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).sharedMemPerBlock) as usize - ptr as usize
			},
			28usize,
			concat!(
				"Offset of field: ",
				stringify!(CUdevprop_st),
				"::",
				stringify!(sharedMemPerBlock)
			)
		);
	}
	test_field_sharedMemPerBlock();
	fn test_field_totalConstantMemory() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUdevprop_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).totalConstantMemory) as usize - ptr as usize
			},
			32usize,
			concat!(
				"Offset of field: ",
				stringify!(CUdevprop_st),
				"::",
				stringify!(totalConstantMemory)
			)
		);
	}
	test_field_totalConstantMemory();
	fn test_field_SIMDWidth() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUdevprop_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).SIMDWidth) as usize - ptr as usize
			},
			36usize,
			concat!(
				"Offset of field: ",
				stringify!(CUdevprop_st),
				"::",
				stringify!(SIMDWidth)
			)
		);
	}
	test_field_SIMDWidth();
	fn test_field_memPitch() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUdevprop_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).memPitch) as usize - ptr as usize
			},
			40usize,
			concat!(
				"Offset of field: ",
				stringify!(CUdevprop_st),
				"::",
				stringify!(memPitch)
			)
		);
	}
	test_field_memPitch();
	fn test_field_regsPerBlock() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUdevprop_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).regsPerBlock) as usize - ptr as usize
			},
			44usize,
			concat!(
				"Offset of field: ",
				stringify!(CUdevprop_st),
				"::",
				stringify!(regsPerBlock)
			)
		);
	}
	test_field_regsPerBlock();
	fn test_field_clockRate() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUdevprop_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).clockRate) as usize - ptr as usize
			},
			48usize,
			concat!(
				"Offset of field: ",
				stringify!(CUdevprop_st),
				"::",
				stringify!(clockRate)
			)
		);
	}
	test_field_clockRate();
	fn test_field_textureAlign() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUdevprop_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).textureAlign) as usize - ptr as usize
			},
			52usize,
			concat!(
				"Offset of field: ",
				stringify!(CUdevprop_st),
				"::",
				stringify!(textureAlign)
			)
		);
	}
	test_field_textureAlign();
}
pub type CUdevprop_v1 = CUdevprop_st;
pub type CUdevprop = CUdevprop_v1;
pub const CUpointer_attribute_enum_CU_POINTER_ATTRIBUTE_CONTEXT: CUpointer_attribute_enum = 1;
pub const CUpointer_attribute_enum_CU_POINTER_ATTRIBUTE_MEMORY_TYPE: CUpointer_attribute_enum = 2;
pub const CUpointer_attribute_enum_CU_POINTER_ATTRIBUTE_DEVICE_POINTER: CUpointer_attribute_enum = 3;
pub const CUpointer_attribute_enum_CU_POINTER_ATTRIBUTE_HOST_POINTER: CUpointer_attribute_enum = 4;
pub const CUpointer_attribute_enum_CU_POINTER_ATTRIBUTE_P2P_TOKENS: CUpointer_attribute_enum = 5;
pub const CUpointer_attribute_enum_CU_POINTER_ATTRIBUTE_SYNC_MEMOPS: CUpointer_attribute_enum = 6;
pub const CUpointer_attribute_enum_CU_POINTER_ATTRIBUTE_BUFFER_ID: CUpointer_attribute_enum = 7;
pub const CUpointer_attribute_enum_CU_POINTER_ATTRIBUTE_IS_MANAGED: CUpointer_attribute_enum = 8;
pub const CUpointer_attribute_enum_CU_POINTER_ATTRIBUTE_DEVICE_ORDINAL: CUpointer_attribute_enum = 9;
pub const CUpointer_attribute_enum_CU_POINTER_ATTRIBUTE_IS_LEGACY_CUDA_IPC_CAPABLE: CUpointer_attribute_enum = 10;
pub const CUpointer_attribute_enum_CU_POINTER_ATTRIBUTE_RANGE_START_ADDR: CUpointer_attribute_enum = 11;
pub const CUpointer_attribute_enum_CU_POINTER_ATTRIBUTE_RANGE_SIZE: CUpointer_attribute_enum = 12;
pub const CUpointer_attribute_enum_CU_POINTER_ATTRIBUTE_MAPPED: CUpointer_attribute_enum = 13;
pub const CUpointer_attribute_enum_CU_POINTER_ATTRIBUTE_ALLOWED_HANDLE_TYPES: CUpointer_attribute_enum = 14;
pub const CUpointer_attribute_enum_CU_POINTER_ATTRIBUTE_IS_GPU_DIRECT_RDMA_CAPABLE: CUpointer_attribute_enum = 15;
pub const CUpointer_attribute_enum_CU_POINTER_ATTRIBUTE_ACCESS_FLAGS: CUpointer_attribute_enum = 16;
pub const CUpointer_attribute_enum_CU_POINTER_ATTRIBUTE_MEMPOOL_HANDLE: CUpointer_attribute_enum = 17;
pub const CUpointer_attribute_enum_CU_POINTER_ATTRIBUTE_MAPPING_SIZE: CUpointer_attribute_enum = 18;
pub const CUpointer_attribute_enum_CU_POINTER_ATTRIBUTE_MAPPING_BASE_ADDR: CUpointer_attribute_enum = 19;
pub const CUpointer_attribute_enum_CU_POINTER_ATTRIBUTE_MEMORY_BLOCK_ID: CUpointer_attribute_enum = 20;
pub type CUpointer_attribute_enum = ::std::os::raw::c_uint;
pub use self::CUpointer_attribute_enum as CUpointer_attribute;
pub const CUfunction_attribute_enum_CU_FUNC_ATTRIBUTE_MAX_THREADS_PER_BLOCK: CUfunction_attribute_enum = 0;
pub const CUfunction_attribute_enum_CU_FUNC_ATTRIBUTE_SHARED_SIZE_BYTES: CUfunction_attribute_enum = 1;
pub const CUfunction_attribute_enum_CU_FUNC_ATTRIBUTE_CONST_SIZE_BYTES: CUfunction_attribute_enum = 2;
pub const CUfunction_attribute_enum_CU_FUNC_ATTRIBUTE_LOCAL_SIZE_BYTES: CUfunction_attribute_enum = 3;
pub const CUfunction_attribute_enum_CU_FUNC_ATTRIBUTE_NUM_REGS: CUfunction_attribute_enum = 4;
pub const CUfunction_attribute_enum_CU_FUNC_ATTRIBUTE_PTX_VERSION: CUfunction_attribute_enum = 5;
pub const CUfunction_attribute_enum_CU_FUNC_ATTRIBUTE_BINARY_VERSION: CUfunction_attribute_enum = 6;
pub const CUfunction_attribute_enum_CU_FUNC_ATTRIBUTE_CACHE_MODE_CA: CUfunction_attribute_enum = 7;
pub const CUfunction_attribute_enum_CU_FUNC_ATTRIBUTE_MAX_DYNAMIC_SHARED_SIZE_BYTES: CUfunction_attribute_enum = 8;
pub const CUfunction_attribute_enum_CU_FUNC_ATTRIBUTE_PREFERRED_SHARED_MEMORY_CARVEOUT: CUfunction_attribute_enum = 9;
pub const CUfunction_attribute_enum_CU_FUNC_ATTRIBUTE_CLUSTER_SIZE_MUST_BE_SET: CUfunction_attribute_enum = 10;
pub const CUfunction_attribute_enum_CU_FUNC_ATTRIBUTE_REQUIRED_CLUSTER_WIDTH: CUfunction_attribute_enum = 11;
pub const CUfunction_attribute_enum_CU_FUNC_ATTRIBUTE_REQUIRED_CLUSTER_HEIGHT: CUfunction_attribute_enum = 12;
pub const CUfunction_attribute_enum_CU_FUNC_ATTRIBUTE_REQUIRED_CLUSTER_DEPTH: CUfunction_attribute_enum = 13;
pub const CUfunction_attribute_enum_CU_FUNC_ATTRIBUTE_NON_PORTABLE_CLUSTER_SIZE_ALLOWED: CUfunction_attribute_enum = 14;
pub const CUfunction_attribute_enum_CU_FUNC_ATTRIBUTE_CLUSTER_SCHEDULING_POLICY_PREFERENCE: CUfunction_attribute_enum =
	15;
pub const CUfunction_attribute_enum_CU_FUNC_ATTRIBUTE_MAX: CUfunction_attribute_enum = 16;
pub type CUfunction_attribute_enum = ::std::os::raw::c_uint;
pub use self::CUfunction_attribute_enum as CUfunction_attribute;
pub const CUfunc_cache_enum_CU_FUNC_CACHE_PREFER_NONE: CUfunc_cache_enum = 0;
pub const CUfunc_cache_enum_CU_FUNC_CACHE_PREFER_SHARED: CUfunc_cache_enum = 1;
pub const CUfunc_cache_enum_CU_FUNC_CACHE_PREFER_L1: CUfunc_cache_enum = 2;
pub const CUfunc_cache_enum_CU_FUNC_CACHE_PREFER_EQUAL: CUfunc_cache_enum = 3;
pub type CUfunc_cache_enum = ::std::os::raw::c_uint;
pub use self::CUfunc_cache_enum as CUfunc_cache;
pub const CUsharedconfig_enum_CU_SHARED_MEM_CONFIG_DEFAULT_BANK_SIZE: CUsharedconfig_enum = 0;
pub const CUsharedconfig_enum_CU_SHARED_MEM_CONFIG_FOUR_BYTE_BANK_SIZE: CUsharedconfig_enum = 1;
pub const CUsharedconfig_enum_CU_SHARED_MEM_CONFIG_EIGHT_BYTE_BANK_SIZE: CUsharedconfig_enum = 2;
pub type CUsharedconfig_enum = ::std::os::raw::c_uint;
pub use self::CUsharedconfig_enum as CUsharedconfig;
pub const CUshared_carveout_enum_CU_SHAREDMEM_CARVEOUT_DEFAULT: CUshared_carveout_enum = -1;
pub const CUshared_carveout_enum_CU_SHAREDMEM_CARVEOUT_MAX_SHARED: CUshared_carveout_enum = 100;
pub const CUshared_carveout_enum_CU_SHAREDMEM_CARVEOUT_MAX_L1: CUshared_carveout_enum = 0;
pub type CUshared_carveout_enum = ::std::os::raw::c_int;
pub use self::CUshared_carveout_enum as CUshared_carveout;
pub const CUmemorytype_enum_CU_MEMORYTYPE_HOST: CUmemorytype_enum = 1;
pub const CUmemorytype_enum_CU_MEMORYTYPE_DEVICE: CUmemorytype_enum = 2;
pub const CUmemorytype_enum_CU_MEMORYTYPE_ARRAY: CUmemorytype_enum = 3;
pub const CUmemorytype_enum_CU_MEMORYTYPE_UNIFIED: CUmemorytype_enum = 4;
pub type CUmemorytype_enum = ::std::os::raw::c_uint;
pub use self::CUmemorytype_enum as CUmemorytype;
pub const CUcomputemode_enum_CU_COMPUTEMODE_DEFAULT: CUcomputemode_enum = 0;
pub const CUcomputemode_enum_CU_COMPUTEMODE_PROHIBITED: CUcomputemode_enum = 2;
pub const CUcomputemode_enum_CU_COMPUTEMODE_EXCLUSIVE_PROCESS: CUcomputemode_enum = 3;
pub type CUcomputemode_enum = ::std::os::raw::c_uint;
pub use self::CUcomputemode_enum as CUcomputemode;
pub const CUmem_advise_enum_CU_MEM_ADVISE_SET_READ_MOSTLY: CUmem_advise_enum = 1;
pub const CUmem_advise_enum_CU_MEM_ADVISE_UNSET_READ_MOSTLY: CUmem_advise_enum = 2;
pub const CUmem_advise_enum_CU_MEM_ADVISE_SET_PREFERRED_LOCATION: CUmem_advise_enum = 3;
pub const CUmem_advise_enum_CU_MEM_ADVISE_UNSET_PREFERRED_LOCATION: CUmem_advise_enum = 4;
pub const CUmem_advise_enum_CU_MEM_ADVISE_SET_ACCESSED_BY: CUmem_advise_enum = 5;
pub const CUmem_advise_enum_CU_MEM_ADVISE_UNSET_ACCESSED_BY: CUmem_advise_enum = 6;
pub type CUmem_advise_enum = ::std::os::raw::c_uint;
pub use self::CUmem_advise_enum as CUmem_advise;
pub const CUmem_range_attribute_enum_CU_MEM_RANGE_ATTRIBUTE_READ_MOSTLY: CUmem_range_attribute_enum = 1;
pub const CUmem_range_attribute_enum_CU_MEM_RANGE_ATTRIBUTE_PREFERRED_LOCATION: CUmem_range_attribute_enum = 2;
pub const CUmem_range_attribute_enum_CU_MEM_RANGE_ATTRIBUTE_ACCESSED_BY: CUmem_range_attribute_enum = 3;
pub const CUmem_range_attribute_enum_CU_MEM_RANGE_ATTRIBUTE_LAST_PREFETCH_LOCATION: CUmem_range_attribute_enum = 4;
pub type CUmem_range_attribute_enum = ::std::os::raw::c_uint;
pub use self::CUmem_range_attribute_enum as CUmem_range_attribute;
pub const CUjit_option_enum_CU_JIT_MAX_REGISTERS: CUjit_option_enum = 0;
pub const CUjit_option_enum_CU_JIT_THREADS_PER_BLOCK: CUjit_option_enum = 1;
pub const CUjit_option_enum_CU_JIT_WALL_TIME: CUjit_option_enum = 2;
pub const CUjit_option_enum_CU_JIT_INFO_LOG_BUFFER: CUjit_option_enum = 3;
pub const CUjit_option_enum_CU_JIT_INFO_LOG_BUFFER_SIZE_BYTES: CUjit_option_enum = 4;
pub const CUjit_option_enum_CU_JIT_ERROR_LOG_BUFFER: CUjit_option_enum = 5;
pub const CUjit_option_enum_CU_JIT_ERROR_LOG_BUFFER_SIZE_BYTES: CUjit_option_enum = 6;
pub const CUjit_option_enum_CU_JIT_OPTIMIZATION_LEVEL: CUjit_option_enum = 7;
pub const CUjit_option_enum_CU_JIT_TARGET_FROM_CUCONTEXT: CUjit_option_enum = 8;
pub const CUjit_option_enum_CU_JIT_TARGET: CUjit_option_enum = 9;
pub const CUjit_option_enum_CU_JIT_FALLBACK_STRATEGY: CUjit_option_enum = 10;
pub const CUjit_option_enum_CU_JIT_GENERATE_DEBUG_INFO: CUjit_option_enum = 11;
pub const CUjit_option_enum_CU_JIT_LOG_VERBOSE: CUjit_option_enum = 12;
pub const CUjit_option_enum_CU_JIT_GENERATE_LINE_INFO: CUjit_option_enum = 13;
pub const CUjit_option_enum_CU_JIT_CACHE_MODE: CUjit_option_enum = 14;
pub const CUjit_option_enum_CU_JIT_NEW_SM3X_OPT: CUjit_option_enum = 15;
pub const CUjit_option_enum_CU_JIT_FAST_COMPILE: CUjit_option_enum = 16;
pub const CUjit_option_enum_CU_JIT_GLOBAL_SYMBOL_NAMES: CUjit_option_enum = 17;
pub const CUjit_option_enum_CU_JIT_GLOBAL_SYMBOL_ADDRESSES: CUjit_option_enum = 18;
pub const CUjit_option_enum_CU_JIT_GLOBAL_SYMBOL_COUNT: CUjit_option_enum = 19;
pub const CUjit_option_enum_CU_JIT_LTO: CUjit_option_enum = 20;
pub const CUjit_option_enum_CU_JIT_FTZ: CUjit_option_enum = 21;
pub const CUjit_option_enum_CU_JIT_PREC_DIV: CUjit_option_enum = 22;
pub const CUjit_option_enum_CU_JIT_PREC_SQRT: CUjit_option_enum = 23;
pub const CUjit_option_enum_CU_JIT_FMA: CUjit_option_enum = 24;
pub const CUjit_option_enum_CU_JIT_REFERENCED_KERNEL_NAMES: CUjit_option_enum = 25;
pub const CUjit_option_enum_CU_JIT_REFERENCED_KERNEL_COUNT: CUjit_option_enum = 26;
pub const CUjit_option_enum_CU_JIT_REFERENCED_VARIABLE_NAMES: CUjit_option_enum = 27;
pub const CUjit_option_enum_CU_JIT_REFERENCED_VARIABLE_COUNT: CUjit_option_enum = 28;
pub const CUjit_option_enum_CU_JIT_OPTIMIZE_UNUSED_DEVICE_VARIABLES: CUjit_option_enum = 29;
pub const CUjit_option_enum_CU_JIT_NUM_OPTIONS: CUjit_option_enum = 30;
pub type CUjit_option_enum = ::std::os::raw::c_uint;
pub use self::CUjit_option_enum as CUjit_option;
pub const CUjit_target_enum_CU_TARGET_COMPUTE_20: CUjit_target_enum = 20;
pub const CUjit_target_enum_CU_TARGET_COMPUTE_21: CUjit_target_enum = 21;
pub const CUjit_target_enum_CU_TARGET_COMPUTE_30: CUjit_target_enum = 30;
pub const CUjit_target_enum_CU_TARGET_COMPUTE_32: CUjit_target_enum = 32;
pub const CUjit_target_enum_CU_TARGET_COMPUTE_35: CUjit_target_enum = 35;
pub const CUjit_target_enum_CU_TARGET_COMPUTE_37: CUjit_target_enum = 37;
pub const CUjit_target_enum_CU_TARGET_COMPUTE_50: CUjit_target_enum = 50;
pub const CUjit_target_enum_CU_TARGET_COMPUTE_52: CUjit_target_enum = 52;
pub const CUjit_target_enum_CU_TARGET_COMPUTE_53: CUjit_target_enum = 53;
pub const CUjit_target_enum_CU_TARGET_COMPUTE_60: CUjit_target_enum = 60;
pub const CUjit_target_enum_CU_TARGET_COMPUTE_61: CUjit_target_enum = 61;
pub const CUjit_target_enum_CU_TARGET_COMPUTE_62: CUjit_target_enum = 62;
pub const CUjit_target_enum_CU_TARGET_COMPUTE_70: CUjit_target_enum = 70;
pub const CUjit_target_enum_CU_TARGET_COMPUTE_72: CUjit_target_enum = 72;
pub const CUjit_target_enum_CU_TARGET_COMPUTE_75: CUjit_target_enum = 75;
pub const CUjit_target_enum_CU_TARGET_COMPUTE_80: CUjit_target_enum = 80;
pub const CUjit_target_enum_CU_TARGET_COMPUTE_86: CUjit_target_enum = 86;
pub const CUjit_target_enum_CU_TARGET_COMPUTE_87: CUjit_target_enum = 87;
pub const CUjit_target_enum_CU_TARGET_COMPUTE_89: CUjit_target_enum = 89;
pub const CUjit_target_enum_CU_TARGET_COMPUTE_90: CUjit_target_enum = 90;
pub type CUjit_target_enum = ::std::os::raw::c_uint;
pub use self::CUjit_target_enum as CUjit_target;
pub const CUjit_fallback_enum_CU_PREFER_PTX: CUjit_fallback_enum = 0;
pub const CUjit_fallback_enum_CU_PREFER_BINARY: CUjit_fallback_enum = 1;
pub type CUjit_fallback_enum = ::std::os::raw::c_uint;
pub use self::CUjit_fallback_enum as CUjit_fallback;
pub const CUjit_cacheMode_enum_CU_JIT_CACHE_OPTION_NONE: CUjit_cacheMode_enum = 0;
pub const CUjit_cacheMode_enum_CU_JIT_CACHE_OPTION_CG: CUjit_cacheMode_enum = 1;
pub const CUjit_cacheMode_enum_CU_JIT_CACHE_OPTION_CA: CUjit_cacheMode_enum = 2;
pub type CUjit_cacheMode_enum = ::std::os::raw::c_uint;
pub use self::CUjit_cacheMode_enum as CUjit_cacheMode;
pub const CUjitInputType_enum_CU_JIT_INPUT_CUBIN: CUjitInputType_enum = 0;
pub const CUjitInputType_enum_CU_JIT_INPUT_PTX: CUjitInputType_enum = 1;
pub const CUjitInputType_enum_CU_JIT_INPUT_FATBINARY: CUjitInputType_enum = 2;
pub const CUjitInputType_enum_CU_JIT_INPUT_OBJECT: CUjitInputType_enum = 3;
pub const CUjitInputType_enum_CU_JIT_INPUT_LIBRARY: CUjitInputType_enum = 4;
pub const CUjitInputType_enum_CU_JIT_INPUT_NVVM: CUjitInputType_enum = 5;
pub const CUjitInputType_enum_CU_JIT_NUM_INPUT_TYPES: CUjitInputType_enum = 6;
pub type CUjitInputType_enum = ::std::os::raw::c_uint;
pub use self::CUjitInputType_enum as CUjitInputType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUlinkState_st {
	_unused: [u8; 0],
}
pub type CUlinkState = *mut CUlinkState_st;
pub const CUgraphicsRegisterFlags_enum_CU_GRAPHICS_REGISTER_FLAGS_NONE: CUgraphicsRegisterFlags_enum = 0;
pub const CUgraphicsRegisterFlags_enum_CU_GRAPHICS_REGISTER_FLAGS_READ_ONLY: CUgraphicsRegisterFlags_enum = 1;
pub const CUgraphicsRegisterFlags_enum_CU_GRAPHICS_REGISTER_FLAGS_WRITE_DISCARD: CUgraphicsRegisterFlags_enum = 2;
pub const CUgraphicsRegisterFlags_enum_CU_GRAPHICS_REGISTER_FLAGS_SURFACE_LDST: CUgraphicsRegisterFlags_enum = 4;
pub const CUgraphicsRegisterFlags_enum_CU_GRAPHICS_REGISTER_FLAGS_TEXTURE_GATHER: CUgraphicsRegisterFlags_enum = 8;
pub type CUgraphicsRegisterFlags_enum = ::std::os::raw::c_uint;
pub use self::CUgraphicsRegisterFlags_enum as CUgraphicsRegisterFlags;
pub const CUgraphicsMapResourceFlags_enum_CU_GRAPHICS_MAP_RESOURCE_FLAGS_NONE: CUgraphicsMapResourceFlags_enum = 0;
pub const CUgraphicsMapResourceFlags_enum_CU_GRAPHICS_MAP_RESOURCE_FLAGS_READ_ONLY: CUgraphicsMapResourceFlags_enum = 1;
pub const CUgraphicsMapResourceFlags_enum_CU_GRAPHICS_MAP_RESOURCE_FLAGS_WRITE_DISCARD:
	CUgraphicsMapResourceFlags_enum = 2;
pub type CUgraphicsMapResourceFlags_enum = ::std::os::raw::c_uint;
pub use self::CUgraphicsMapResourceFlags_enum as CUgraphicsMapResourceFlags;
pub const CUarray_cubemap_face_enum_CU_CUBEMAP_FACE_POSITIVE_X: CUarray_cubemap_face_enum = 0;
pub const CUarray_cubemap_face_enum_CU_CUBEMAP_FACE_NEGATIVE_X: CUarray_cubemap_face_enum = 1;
pub const CUarray_cubemap_face_enum_CU_CUBEMAP_FACE_POSITIVE_Y: CUarray_cubemap_face_enum = 2;
pub const CUarray_cubemap_face_enum_CU_CUBEMAP_FACE_NEGATIVE_Y: CUarray_cubemap_face_enum = 3;
pub const CUarray_cubemap_face_enum_CU_CUBEMAP_FACE_POSITIVE_Z: CUarray_cubemap_face_enum = 4;
pub const CUarray_cubemap_face_enum_CU_CUBEMAP_FACE_NEGATIVE_Z: CUarray_cubemap_face_enum = 5;
pub type CUarray_cubemap_face_enum = ::std::os::raw::c_uint;
pub use self::CUarray_cubemap_face_enum as CUarray_cubemap_face;
pub const CUlimit_enum_CU_LIMIT_STACK_SIZE: CUlimit_enum = 0;
pub const CUlimit_enum_CU_LIMIT_PRINTF_FIFO_SIZE: CUlimit_enum = 1;
pub const CUlimit_enum_CU_LIMIT_MALLOC_HEAP_SIZE: CUlimit_enum = 2;
pub const CUlimit_enum_CU_LIMIT_DEV_RUNTIME_SYNC_DEPTH: CUlimit_enum = 3;
pub const CUlimit_enum_CU_LIMIT_DEV_RUNTIME_PENDING_LAUNCH_COUNT: CUlimit_enum = 4;
pub const CUlimit_enum_CU_LIMIT_MAX_L2_FETCH_GRANULARITY: CUlimit_enum = 5;
pub const CUlimit_enum_CU_LIMIT_PERSISTING_L2_CACHE_SIZE: CUlimit_enum = 6;
pub const CUlimit_enum_CU_LIMIT_MAX: CUlimit_enum = 7;
pub type CUlimit_enum = ::std::os::raw::c_uint;
pub use self::CUlimit_enum as CUlimit;
pub const CUresourcetype_enum_CU_RESOURCE_TYPE_ARRAY: CUresourcetype_enum = 0;
pub const CUresourcetype_enum_CU_RESOURCE_TYPE_MIPMAPPED_ARRAY: CUresourcetype_enum = 1;
pub const CUresourcetype_enum_CU_RESOURCE_TYPE_LINEAR: CUresourcetype_enum = 2;
pub const CUresourcetype_enum_CU_RESOURCE_TYPE_PITCH2D: CUresourcetype_enum = 3;
pub type CUresourcetype_enum = ::std::os::raw::c_uint;
pub use self::CUresourcetype_enum as CUresourcetype;
pub type CUhostFn = ::std::option::Option<unsafe extern "C" fn(userData: *mut ::std::os::raw::c_void)>;
pub const CUaccessProperty_enum_CU_ACCESS_PROPERTY_NORMAL: CUaccessProperty_enum = 0;
pub const CUaccessProperty_enum_CU_ACCESS_PROPERTY_STREAMING: CUaccessProperty_enum = 1;
pub const CUaccessProperty_enum_CU_ACCESS_PROPERTY_PERSISTING: CUaccessProperty_enum = 2;
pub type CUaccessProperty_enum = ::std::os::raw::c_uint;
pub use self::CUaccessProperty_enum as CUaccessProperty;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUaccessPolicyWindow_st {
	pub base_ptr: *mut ::std::os::raw::c_void,
	pub num_bytes: size_t,
	pub hitRatio: f32,
	pub hitProp: CUaccessProperty,
	pub missProp: CUaccessProperty,
}
#[test]
fn bindgen_test_layout_CUaccessPolicyWindow_st() {
	assert_eq!(
		::std::mem::size_of::<CUaccessPolicyWindow_st>(),
		32usize,
		concat!("Size of: ", stringify!(CUaccessPolicyWindow_st))
	);
	assert_eq!(
		::std::mem::align_of::<CUaccessPolicyWindow_st>(),
		8usize,
		concat!("Alignment of ", stringify!(CUaccessPolicyWindow_st))
	);
	fn test_field_base_ptr() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUaccessPolicyWindow_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).base_ptr) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUaccessPolicyWindow_st),
				"::",
				stringify!(base_ptr)
			)
		);
	}
	test_field_base_ptr();
	fn test_field_num_bytes() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUaccessPolicyWindow_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).num_bytes) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(CUaccessPolicyWindow_st),
				"::",
				stringify!(num_bytes)
			)
		);
	}
	test_field_num_bytes();
	fn test_field_hitRatio() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUaccessPolicyWindow_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).hitRatio) as usize - ptr as usize
			},
			16usize,
			concat!(
				"Offset of field: ",
				stringify!(CUaccessPolicyWindow_st),
				"::",
				stringify!(hitRatio)
			)
		);
	}
	test_field_hitRatio();
	fn test_field_hitProp() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUaccessPolicyWindow_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).hitProp) as usize - ptr as usize
			},
			20usize,
			concat!(
				"Offset of field: ",
				stringify!(CUaccessPolicyWindow_st),
				"::",
				stringify!(hitProp)
			)
		);
	}
	test_field_hitProp();
	fn test_field_missProp() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUaccessPolicyWindow_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).missProp) as usize - ptr as usize
			},
			24usize,
			concat!(
				"Offset of field: ",
				stringify!(CUaccessPolicyWindow_st),
				"::",
				stringify!(missProp)
			)
		);
	}
	test_field_missProp();
}
pub type CUaccessPolicyWindow_v1 = CUaccessPolicyWindow_st;
pub type CUaccessPolicyWindow = CUaccessPolicyWindow_v1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUDA_KERNEL_NODE_PARAMS_st {
	pub func: CUfunction,
	pub gridDimX: ::std::os::raw::c_uint,
	pub gridDimY: ::std::os::raw::c_uint,
	pub gridDimZ: ::std::os::raw::c_uint,
	pub blockDimX: ::std::os::raw::c_uint,
	pub blockDimY: ::std::os::raw::c_uint,
	pub blockDimZ: ::std::os::raw::c_uint,
	pub sharedMemBytes: ::std::os::raw::c_uint,
	pub kernelParams: *mut *mut ::std::os::raw::c_void,
	pub extra: *mut *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_CUDA_KERNEL_NODE_PARAMS_st() {
	assert_eq!(
		::std::mem::size_of::<CUDA_KERNEL_NODE_PARAMS_st>(),
		56usize,
		concat!("Size of: ", stringify!(CUDA_KERNEL_NODE_PARAMS_st))
	);
	assert_eq!(
		::std::mem::align_of::<CUDA_KERNEL_NODE_PARAMS_st>(),
		8usize,
		concat!("Alignment of ", stringify!(CUDA_KERNEL_NODE_PARAMS_st))
	);
	fn test_field_func() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_KERNEL_NODE_PARAMS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_KERNEL_NODE_PARAMS_st),
				"::",
				stringify!(func)
			)
		);
	}
	test_field_func();
	fn test_field_gridDimX() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_KERNEL_NODE_PARAMS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).gridDimX) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_KERNEL_NODE_PARAMS_st),
				"::",
				stringify!(gridDimX)
			)
		);
	}
	test_field_gridDimX();
	fn test_field_gridDimY() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_KERNEL_NODE_PARAMS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).gridDimY) as usize - ptr as usize
			},
			12usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_KERNEL_NODE_PARAMS_st),
				"::",
				stringify!(gridDimY)
			)
		);
	}
	test_field_gridDimY();
	fn test_field_gridDimZ() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_KERNEL_NODE_PARAMS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).gridDimZ) as usize - ptr as usize
			},
			16usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_KERNEL_NODE_PARAMS_st),
				"::",
				stringify!(gridDimZ)
			)
		);
	}
	test_field_gridDimZ();
	fn test_field_blockDimX() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_KERNEL_NODE_PARAMS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).blockDimX) as usize - ptr as usize
			},
			20usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_KERNEL_NODE_PARAMS_st),
				"::",
				stringify!(blockDimX)
			)
		);
	}
	test_field_blockDimX();
	fn test_field_blockDimY() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_KERNEL_NODE_PARAMS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).blockDimY) as usize - ptr as usize
			},
			24usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_KERNEL_NODE_PARAMS_st),
				"::",
				stringify!(blockDimY)
			)
		);
	}
	test_field_blockDimY();
	fn test_field_blockDimZ() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_KERNEL_NODE_PARAMS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).blockDimZ) as usize - ptr as usize
			},
			28usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_KERNEL_NODE_PARAMS_st),
				"::",
				stringify!(blockDimZ)
			)
		);
	}
	test_field_blockDimZ();
	fn test_field_sharedMemBytes() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_KERNEL_NODE_PARAMS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).sharedMemBytes) as usize - ptr as usize
			},
			32usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_KERNEL_NODE_PARAMS_st),
				"::",
				stringify!(sharedMemBytes)
			)
		);
	}
	test_field_sharedMemBytes();
	fn test_field_kernelParams() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_KERNEL_NODE_PARAMS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).kernelParams) as usize - ptr as usize
			},
			40usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_KERNEL_NODE_PARAMS_st),
				"::",
				stringify!(kernelParams)
			)
		);
	}
	test_field_kernelParams();
	fn test_field_extra() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_KERNEL_NODE_PARAMS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).extra) as usize - ptr as usize
			},
			48usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_KERNEL_NODE_PARAMS_st),
				"::",
				stringify!(extra)
			)
		);
	}
	test_field_extra();
}
pub type CUDA_KERNEL_NODE_PARAMS_v1 = CUDA_KERNEL_NODE_PARAMS_st;
pub type CUDA_KERNEL_NODE_PARAMS = CUDA_KERNEL_NODE_PARAMS_v1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUDA_MEMSET_NODE_PARAMS_st {
	pub dst: CUdeviceptr,
	pub pitch: size_t,
	pub value: ::std::os::raw::c_uint,
	pub elementSize: ::std::os::raw::c_uint,
	pub width: size_t,
	pub height: size_t,
}
#[test]
fn bindgen_test_layout_CUDA_MEMSET_NODE_PARAMS_st() {
	assert_eq!(
		::std::mem::size_of::<CUDA_MEMSET_NODE_PARAMS_st>(),
		40usize,
		concat!("Size of: ", stringify!(CUDA_MEMSET_NODE_PARAMS_st))
	);
	assert_eq!(
		::std::mem::align_of::<CUDA_MEMSET_NODE_PARAMS_st>(),
		8usize,
		concat!("Alignment of ", stringify!(CUDA_MEMSET_NODE_PARAMS_st))
	);
	fn test_field_dst() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMSET_NODE_PARAMS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMSET_NODE_PARAMS_st),
				"::",
				stringify!(dst)
			)
		);
	}
	test_field_dst();
	fn test_field_pitch() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMSET_NODE_PARAMS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).pitch) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMSET_NODE_PARAMS_st),
				"::",
				stringify!(pitch)
			)
		);
	}
	test_field_pitch();
	fn test_field_value() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMSET_NODE_PARAMS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize
			},
			16usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMSET_NODE_PARAMS_st),
				"::",
				stringify!(value)
			)
		);
	}
	test_field_value();
	fn test_field_elementSize() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMSET_NODE_PARAMS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).elementSize) as usize - ptr as usize
			},
			20usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMSET_NODE_PARAMS_st),
				"::",
				stringify!(elementSize)
			)
		);
	}
	test_field_elementSize();
	fn test_field_width() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMSET_NODE_PARAMS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize
			},
			24usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMSET_NODE_PARAMS_st),
				"::",
				stringify!(width)
			)
		);
	}
	test_field_width();
	fn test_field_height() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMSET_NODE_PARAMS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize
			},
			32usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMSET_NODE_PARAMS_st),
				"::",
				stringify!(height)
			)
		);
	}
	test_field_height();
}
pub type CUDA_MEMSET_NODE_PARAMS_v1 = CUDA_MEMSET_NODE_PARAMS_st;
pub type CUDA_MEMSET_NODE_PARAMS = CUDA_MEMSET_NODE_PARAMS_v1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUDA_HOST_NODE_PARAMS_st {
	pub fn_: CUhostFn,
	pub userData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_CUDA_HOST_NODE_PARAMS_st() {
	assert_eq!(
		::std::mem::size_of::<CUDA_HOST_NODE_PARAMS_st>(),
		16usize,
		concat!("Size of: ", stringify!(CUDA_HOST_NODE_PARAMS_st))
	);
	assert_eq!(
		::std::mem::align_of::<CUDA_HOST_NODE_PARAMS_st>(),
		8usize,
		concat!("Alignment of ", stringify!(CUDA_HOST_NODE_PARAMS_st))
	);
	fn test_field_fn() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_HOST_NODE_PARAMS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).fn_) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_HOST_NODE_PARAMS_st),
				"::",
				stringify!(fn_)
			)
		);
	}
	test_field_fn();
	fn test_field_userData() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_HOST_NODE_PARAMS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).userData) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_HOST_NODE_PARAMS_st),
				"::",
				stringify!(userData)
			)
		);
	}
	test_field_userData();
}
pub type CUDA_HOST_NODE_PARAMS_v1 = CUDA_HOST_NODE_PARAMS_st;
pub type CUDA_HOST_NODE_PARAMS = CUDA_HOST_NODE_PARAMS_v1;
pub const CUgraphNodeType_enum_CU_GRAPH_NODE_TYPE_KERNEL: CUgraphNodeType_enum = 0;
pub const CUgraphNodeType_enum_CU_GRAPH_NODE_TYPE_MEMCPY: CUgraphNodeType_enum = 1;
pub const CUgraphNodeType_enum_CU_GRAPH_NODE_TYPE_MEMSET: CUgraphNodeType_enum = 2;
pub const CUgraphNodeType_enum_CU_GRAPH_NODE_TYPE_HOST: CUgraphNodeType_enum = 3;
pub const CUgraphNodeType_enum_CU_GRAPH_NODE_TYPE_GRAPH: CUgraphNodeType_enum = 4;
pub const CUgraphNodeType_enum_CU_GRAPH_NODE_TYPE_EMPTY: CUgraphNodeType_enum = 5;
pub const CUgraphNodeType_enum_CU_GRAPH_NODE_TYPE_WAIT_EVENT: CUgraphNodeType_enum = 6;
pub const CUgraphNodeType_enum_CU_GRAPH_NODE_TYPE_EVENT_RECORD: CUgraphNodeType_enum = 7;
pub const CUgraphNodeType_enum_CU_GRAPH_NODE_TYPE_EXT_SEMAS_SIGNAL: CUgraphNodeType_enum = 8;
pub const CUgraphNodeType_enum_CU_GRAPH_NODE_TYPE_EXT_SEMAS_WAIT: CUgraphNodeType_enum = 9;
pub const CUgraphNodeType_enum_CU_GRAPH_NODE_TYPE_MEM_ALLOC: CUgraphNodeType_enum = 10;
pub const CUgraphNodeType_enum_CU_GRAPH_NODE_TYPE_MEM_FREE: CUgraphNodeType_enum = 11;
pub const CUgraphNodeType_enum_CU_GRAPH_NODE_TYPE_BATCH_MEM_OP: CUgraphNodeType_enum = 12;
pub type CUgraphNodeType_enum = ::std::os::raw::c_uint;
pub use self::CUgraphNodeType_enum as CUgraphNodeType;
pub const CUsynchronizationPolicy_enum_CU_SYNC_POLICY_AUTO: CUsynchronizationPolicy_enum = 1;
pub const CUsynchronizationPolicy_enum_CU_SYNC_POLICY_SPIN: CUsynchronizationPolicy_enum = 2;
pub const CUsynchronizationPolicy_enum_CU_SYNC_POLICY_YIELD: CUsynchronizationPolicy_enum = 3;
pub const CUsynchronizationPolicy_enum_CU_SYNC_POLICY_BLOCKING_SYNC: CUsynchronizationPolicy_enum = 4;
pub type CUsynchronizationPolicy_enum = ::std::os::raw::c_uint;
pub use self::CUsynchronizationPolicy_enum as CUsynchronizationPolicy;
pub const CUclusterSchedulingPolicy_enum_CU_CLUSTER_SCHEDULING_POLICY_DEFAULT: CUclusterSchedulingPolicy_enum = 0;
pub const CUclusterSchedulingPolicy_enum_CU_CLUSTER_SCHEDULING_POLICY_SPREAD: CUclusterSchedulingPolicy_enum = 1;
pub const CUclusterSchedulingPolicy_enum_CU_CLUSTER_SCHEDULING_POLICY_LOAD_BALANCING: CUclusterSchedulingPolicy_enum =
	2;
pub type CUclusterSchedulingPolicy_enum = ::std::os::raw::c_uint;
pub use self::CUclusterSchedulingPolicy_enum as CUclusterSchedulingPolicy;
pub const CUlaunchAttributeID_enum_CU_LAUNCH_ATTRIBUTE_IGNORE: CUlaunchAttributeID_enum = 0;
pub const CUlaunchAttributeID_enum_CU_LAUNCH_ATTRIBUTE_ACCESS_POLICY_WINDOW: CUlaunchAttributeID_enum = 1;
pub const CUlaunchAttributeID_enum_CU_LAUNCH_ATTRIBUTE_COOPERATIVE: CUlaunchAttributeID_enum = 2;
pub const CUlaunchAttributeID_enum_CU_LAUNCH_ATTRIBUTE_SYNCHRONIZATION_POLICY: CUlaunchAttributeID_enum = 3;
pub const CUlaunchAttributeID_enum_CU_LAUNCH_ATTRIBUTE_CLUSTER_DIMENSION: CUlaunchAttributeID_enum = 4;
pub const CUlaunchAttributeID_enum_CU_LAUNCH_ATTRIBUTE_CLUSTER_SCHEDULING_POLICY_PREFERENCE: CUlaunchAttributeID_enum =
	5;
pub const CUlaunchAttributeID_enum_CU_LAUNCH_ATTRIBUTE_PROGRAMMATIC_STREAM_SERIALIZATION: CUlaunchAttributeID_enum = 6;
pub const CUlaunchAttributeID_enum_CU_LAUNCH_ATTRIBUTE_PROGRAMMATIC_EVENT: CUlaunchAttributeID_enum = 7;
pub const CUlaunchAttributeID_enum_CU_LAUNCH_ATTRIBUTE_PRIORITY: CUlaunchAttributeID_enum = 8;
pub type CUlaunchAttributeID_enum = ::std::os::raw::c_uint;
pub use self::CUlaunchAttributeID_enum as CUlaunchAttributeID;
#[repr(C)]
#[derive(Copy, Clone)]
pub union CUlaunchAttributeValue_union {
	pub pad: [::std::os::raw::c_char; 64usize],
	pub accessPolicyWindow: CUaccessPolicyWindow,
	pub cooperative: ::std::os::raw::c_int,
	pub syncPolicy: CUsynchronizationPolicy,
	pub clusterDim: CUlaunchAttributeValue_union__bindgen_ty_1,
	pub clusterSchedulingPolicyPreference: CUclusterSchedulingPolicy,
	pub programmaticStreamSerializationAllowed: ::std::os::raw::c_int,
	pub programmaticEvent: CUlaunchAttributeValue_union__bindgen_ty_2,
	pub priority: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUlaunchAttributeValue_union__bindgen_ty_1 {
	pub x: ::std::os::raw::c_uint,
	pub y: ::std::os::raw::c_uint,
	pub z: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_CUlaunchAttributeValue_union__bindgen_ty_1() {
	assert_eq!(
		::std::mem::size_of::<CUlaunchAttributeValue_union__bindgen_ty_1>(),
		12usize,
		concat!("Size of: ", stringify!(CUlaunchAttributeValue_union__bindgen_ty_1))
	);
	assert_eq!(
		::std::mem::align_of::<CUlaunchAttributeValue_union__bindgen_ty_1>(),
		4usize,
		concat!("Alignment of ", stringify!(CUlaunchAttributeValue_union__bindgen_ty_1))
	);
	fn test_field_x() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUlaunchAttributeValue_union__bindgen_ty_1>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUlaunchAttributeValue_union__bindgen_ty_1),
				"::",
				stringify!(x)
			)
		);
	}
	test_field_x();
	fn test_field_y() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUlaunchAttributeValue_union__bindgen_ty_1>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
			},
			4usize,
			concat!(
				"Offset of field: ",
				stringify!(CUlaunchAttributeValue_union__bindgen_ty_1),
				"::",
				stringify!(y)
			)
		);
	}
	test_field_y();
	fn test_field_z() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUlaunchAttributeValue_union__bindgen_ty_1>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(CUlaunchAttributeValue_union__bindgen_ty_1),
				"::",
				stringify!(z)
			)
		);
	}
	test_field_z();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUlaunchAttributeValue_union__bindgen_ty_2 {
	pub event: CUevent,
	pub flags: ::std::os::raw::c_int,
	pub triggerAtBlockStart: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_CUlaunchAttributeValue_union__bindgen_ty_2() {
	assert_eq!(
		::std::mem::size_of::<CUlaunchAttributeValue_union__bindgen_ty_2>(),
		16usize,
		concat!("Size of: ", stringify!(CUlaunchAttributeValue_union__bindgen_ty_2))
	);
	assert_eq!(
		::std::mem::align_of::<CUlaunchAttributeValue_union__bindgen_ty_2>(),
		8usize,
		concat!("Alignment of ", stringify!(CUlaunchAttributeValue_union__bindgen_ty_2))
	);
	fn test_field_event() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUlaunchAttributeValue_union__bindgen_ty_2>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).event) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUlaunchAttributeValue_union__bindgen_ty_2),
				"::",
				stringify!(event)
			)
		);
	}
	test_field_event();
	fn test_field_flags() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUlaunchAttributeValue_union__bindgen_ty_2>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(CUlaunchAttributeValue_union__bindgen_ty_2),
				"::",
				stringify!(flags)
			)
		);
	}
	test_field_flags();
	fn test_field_triggerAtBlockStart() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUlaunchAttributeValue_union__bindgen_ty_2>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).triggerAtBlockStart) as usize - ptr as usize
			},
			12usize,
			concat!(
				"Offset of field: ",
				stringify!(CUlaunchAttributeValue_union__bindgen_ty_2),
				"::",
				stringify!(triggerAtBlockStart)
			)
		);
	}
	test_field_triggerAtBlockStart();
}
#[test]
fn bindgen_test_layout_CUlaunchAttributeValue_union() {
	assert_eq!(
		::std::mem::size_of::<CUlaunchAttributeValue_union>(),
		64usize,
		concat!("Size of: ", stringify!(CUlaunchAttributeValue_union))
	);
	assert_eq!(
		::std::mem::align_of::<CUlaunchAttributeValue_union>(),
		8usize,
		concat!("Alignment of ", stringify!(CUlaunchAttributeValue_union))
	);
	fn test_field_pad() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUlaunchAttributeValue_union>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUlaunchAttributeValue_union),
				"::",
				stringify!(pad)
			)
		);
	}
	test_field_pad();
	fn test_field_accessPolicyWindow() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUlaunchAttributeValue_union>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).accessPolicyWindow) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUlaunchAttributeValue_union),
				"::",
				stringify!(accessPolicyWindow)
			)
		);
	}
	test_field_accessPolicyWindow();
	fn test_field_cooperative() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUlaunchAttributeValue_union>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).cooperative) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUlaunchAttributeValue_union),
				"::",
				stringify!(cooperative)
			)
		);
	}
	test_field_cooperative();
	fn test_field_syncPolicy() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUlaunchAttributeValue_union>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).syncPolicy) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUlaunchAttributeValue_union),
				"::",
				stringify!(syncPolicy)
			)
		);
	}
	test_field_syncPolicy();
	fn test_field_clusterDim() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUlaunchAttributeValue_union>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).clusterDim) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUlaunchAttributeValue_union),
				"::",
				stringify!(clusterDim)
			)
		);
	}
	test_field_clusterDim();
	fn test_field_clusterSchedulingPolicyPreference() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUlaunchAttributeValue_union>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).clusterSchedulingPolicyPreference) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUlaunchAttributeValue_union),
				"::",
				stringify!(clusterSchedulingPolicyPreference)
			)
		);
	}
	test_field_clusterSchedulingPolicyPreference();
	fn test_field_programmaticStreamSerializationAllowed() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUlaunchAttributeValue_union>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).programmaticStreamSerializationAllowed) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUlaunchAttributeValue_union),
				"::",
				stringify!(programmaticStreamSerializationAllowed)
			)
		);
	}
	test_field_programmaticStreamSerializationAllowed();
	fn test_field_programmaticEvent() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUlaunchAttributeValue_union>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).programmaticEvent) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUlaunchAttributeValue_union),
				"::",
				stringify!(programmaticEvent)
			)
		);
	}
	test_field_programmaticEvent();
	fn test_field_priority() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUlaunchAttributeValue_union>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUlaunchAttributeValue_union),
				"::",
				stringify!(priority)
			)
		);
	}
	test_field_priority();
}
pub type CUlaunchAttributeValue = CUlaunchAttributeValue_union;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CUlaunchAttribute_st {
	pub id: CUlaunchAttributeID,
	pub pad: [::std::os::raw::c_char; 4usize],
	pub value: CUlaunchAttributeValue,
}
#[test]
fn bindgen_test_layout_CUlaunchAttribute_st() {
	assert_eq!(
		::std::mem::size_of::<CUlaunchAttribute_st>(),
		72usize,
		concat!("Size of: ", stringify!(CUlaunchAttribute_st))
	);
	assert_eq!(
		::std::mem::align_of::<CUlaunchAttribute_st>(),
		8usize,
		concat!("Alignment of ", stringify!(CUlaunchAttribute_st))
	);
	fn test_field_id() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUlaunchAttribute_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUlaunchAttribute_st),
				"::",
				stringify!(id)
			)
		);
	}
	test_field_id();
	fn test_field_pad() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUlaunchAttribute_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize
			},
			4usize,
			concat!(
				"Offset of field: ",
				stringify!(CUlaunchAttribute_st),
				"::",
				stringify!(pad)
			)
		);
	}
	test_field_pad();
	fn test_field_value() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUlaunchAttribute_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(CUlaunchAttribute_st),
				"::",
				stringify!(value)
			)
		);
	}
	test_field_value();
}
pub type CUlaunchAttribute = CUlaunchAttribute_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUlaunchConfig_st {
	pub gridDimX: ::std::os::raw::c_uint,
	pub gridDimY: ::std::os::raw::c_uint,
	pub gridDimZ: ::std::os::raw::c_uint,
	pub blockDimX: ::std::os::raw::c_uint,
	pub blockDimY: ::std::os::raw::c_uint,
	pub blockDimZ: ::std::os::raw::c_uint,
	pub sharedMemBytes: ::std::os::raw::c_uint,
	pub hStream: CUstream,
	pub attrs: *mut CUlaunchAttribute,
	pub numAttrs: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_CUlaunchConfig_st() {
	assert_eq!(
		::std::mem::size_of::<CUlaunchConfig_st>(),
		56usize,
		concat!("Size of: ", stringify!(CUlaunchConfig_st))
	);
	assert_eq!(
		::std::mem::align_of::<CUlaunchConfig_st>(),
		8usize,
		concat!("Alignment of ", stringify!(CUlaunchConfig_st))
	);
	fn test_field_gridDimX() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUlaunchConfig_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).gridDimX) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUlaunchConfig_st),
				"::",
				stringify!(gridDimX)
			)
		);
	}
	test_field_gridDimX();
	fn test_field_gridDimY() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUlaunchConfig_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).gridDimY) as usize - ptr as usize
			},
			4usize,
			concat!(
				"Offset of field: ",
				stringify!(CUlaunchConfig_st),
				"::",
				stringify!(gridDimY)
			)
		);
	}
	test_field_gridDimY();
	fn test_field_gridDimZ() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUlaunchConfig_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).gridDimZ) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(CUlaunchConfig_st),
				"::",
				stringify!(gridDimZ)
			)
		);
	}
	test_field_gridDimZ();
	fn test_field_blockDimX() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUlaunchConfig_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).blockDimX) as usize - ptr as usize
			},
			12usize,
			concat!(
				"Offset of field: ",
				stringify!(CUlaunchConfig_st),
				"::",
				stringify!(blockDimX)
			)
		);
	}
	test_field_blockDimX();
	fn test_field_blockDimY() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUlaunchConfig_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).blockDimY) as usize - ptr as usize
			},
			16usize,
			concat!(
				"Offset of field: ",
				stringify!(CUlaunchConfig_st),
				"::",
				stringify!(blockDimY)
			)
		);
	}
	test_field_blockDimY();
	fn test_field_blockDimZ() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUlaunchConfig_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).blockDimZ) as usize - ptr as usize
			},
			20usize,
			concat!(
				"Offset of field: ",
				stringify!(CUlaunchConfig_st),
				"::",
				stringify!(blockDimZ)
			)
		);
	}
	test_field_blockDimZ();
	fn test_field_sharedMemBytes() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUlaunchConfig_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).sharedMemBytes) as usize - ptr as usize
			},
			24usize,
			concat!(
				"Offset of field: ",
				stringify!(CUlaunchConfig_st),
				"::",
				stringify!(sharedMemBytes)
			)
		);
	}
	test_field_sharedMemBytes();
	fn test_field_hStream() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUlaunchConfig_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize
			},
			32usize,
			concat!(
				"Offset of field: ",
				stringify!(CUlaunchConfig_st),
				"::",
				stringify!(hStream)
			)
		);
	}
	test_field_hStream();
	fn test_field_attrs() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUlaunchConfig_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).attrs) as usize - ptr as usize
			},
			40usize,
			concat!(
				"Offset of field: ",
				stringify!(CUlaunchConfig_st),
				"::",
				stringify!(attrs)
			)
		);
	}
	test_field_attrs();
	fn test_field_numAttrs() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUlaunchConfig_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).numAttrs) as usize - ptr as usize
			},
			48usize,
			concat!(
				"Offset of field: ",
				stringify!(CUlaunchConfig_st),
				"::",
				stringify!(numAttrs)
			)
		);
	}
	test_field_numAttrs();
}
pub type CUlaunchConfig = CUlaunchConfig_st;
pub use self::CUlaunchAttributeID as CUkernelNodeAttrID;
pub type CUkernelNodeAttrValue_v1 = CUlaunchAttributeValue;
pub type CUkernelNodeAttrValue = CUkernelNodeAttrValue_v1;
pub const CUstreamCaptureStatus_enum_CU_STREAM_CAPTURE_STATUS_NONE: CUstreamCaptureStatus_enum = 0;
pub const CUstreamCaptureStatus_enum_CU_STREAM_CAPTURE_STATUS_ACTIVE: CUstreamCaptureStatus_enum = 1;
pub const CUstreamCaptureStatus_enum_CU_STREAM_CAPTURE_STATUS_INVALIDATED: CUstreamCaptureStatus_enum = 2;
pub type CUstreamCaptureStatus_enum = ::std::os::raw::c_uint;
pub use self::CUstreamCaptureStatus_enum as CUstreamCaptureStatus;
pub const CUstreamCaptureMode_enum_CU_STREAM_CAPTURE_MODE_GLOBAL: CUstreamCaptureMode_enum = 0;
pub const CUstreamCaptureMode_enum_CU_STREAM_CAPTURE_MODE_THREAD_LOCAL: CUstreamCaptureMode_enum = 1;
pub const CUstreamCaptureMode_enum_CU_STREAM_CAPTURE_MODE_RELAXED: CUstreamCaptureMode_enum = 2;
pub type CUstreamCaptureMode_enum = ::std::os::raw::c_uint;
pub use self::CUlaunchAttributeID as CUstreamAttrID;
pub use self::CUstreamCaptureMode_enum as CUstreamCaptureMode;
pub type CUstreamAttrValue_v1 = CUlaunchAttributeValue;
pub type CUstreamAttrValue = CUstreamAttrValue_v1;
pub const CUdriverProcAddress_flags_enum_CU_GET_PROC_ADDRESS_DEFAULT: CUdriverProcAddress_flags_enum = 0;
pub const CUdriverProcAddress_flags_enum_CU_GET_PROC_ADDRESS_LEGACY_STREAM: CUdriverProcAddress_flags_enum = 1;
pub const CUdriverProcAddress_flags_enum_CU_GET_PROC_ADDRESS_PER_THREAD_DEFAULT_STREAM: CUdriverProcAddress_flags_enum =
	2;
pub type CUdriverProcAddress_flags_enum = ::std::os::raw::c_uint;
pub use self::CUdriverProcAddress_flags_enum as CUdriverProcAddress_flags;
pub const CUexecAffinityType_enum_CU_EXEC_AFFINITY_TYPE_SM_COUNT: CUexecAffinityType_enum = 0;
pub const CUexecAffinityType_enum_CU_EXEC_AFFINITY_TYPE_MAX: CUexecAffinityType_enum = 1;
pub type CUexecAffinityType_enum = ::std::os::raw::c_uint;
pub use self::CUexecAffinityType_enum as CUexecAffinityType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUexecAffinitySmCount_st {
	pub val: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_CUexecAffinitySmCount_st() {
	assert_eq!(
		::std::mem::size_of::<CUexecAffinitySmCount_st>(),
		4usize,
		concat!("Size of: ", stringify!(CUexecAffinitySmCount_st))
	);
	assert_eq!(
		::std::mem::align_of::<CUexecAffinitySmCount_st>(),
		4usize,
		concat!("Alignment of ", stringify!(CUexecAffinitySmCount_st))
	);
	fn test_field_val() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUexecAffinitySmCount_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUexecAffinitySmCount_st),
				"::",
				stringify!(val)
			)
		);
	}
	test_field_val();
}
pub type CUexecAffinitySmCount_v1 = CUexecAffinitySmCount_st;
pub type CUexecAffinitySmCount = CUexecAffinitySmCount_v1;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CUexecAffinityParam_st {
	pub type_: CUexecAffinityType,
	pub param: CUexecAffinityParam_st__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union CUexecAffinityParam_st__bindgen_ty_1 {
	pub smCount: CUexecAffinitySmCount,
}
#[test]
fn bindgen_test_layout_CUexecAffinityParam_st__bindgen_ty_1() {
	assert_eq!(
		::std::mem::size_of::<CUexecAffinityParam_st__bindgen_ty_1>(),
		4usize,
		concat!("Size of: ", stringify!(CUexecAffinityParam_st__bindgen_ty_1))
	);
	assert_eq!(
		::std::mem::align_of::<CUexecAffinityParam_st__bindgen_ty_1>(),
		4usize,
		concat!("Alignment of ", stringify!(CUexecAffinityParam_st__bindgen_ty_1))
	);
	fn test_field_smCount() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUexecAffinityParam_st__bindgen_ty_1>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).smCount) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUexecAffinityParam_st__bindgen_ty_1),
				"::",
				stringify!(smCount)
			)
		);
	}
	test_field_smCount();
}
#[test]
fn bindgen_test_layout_CUexecAffinityParam_st() {
	assert_eq!(
		::std::mem::size_of::<CUexecAffinityParam_st>(),
		8usize,
		concat!("Size of: ", stringify!(CUexecAffinityParam_st))
	);
	assert_eq!(
		::std::mem::align_of::<CUexecAffinityParam_st>(),
		4usize,
		concat!("Alignment of ", stringify!(CUexecAffinityParam_st))
	);
	fn test_field_type() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUexecAffinityParam_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUexecAffinityParam_st),
				"::",
				stringify!(type_)
			)
		);
	}
	test_field_type();
	fn test_field_param() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUexecAffinityParam_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).param) as usize - ptr as usize
			},
			4usize,
			concat!(
				"Offset of field: ",
				stringify!(CUexecAffinityParam_st),
				"::",
				stringify!(param)
			)
		);
	}
	test_field_param();
}
pub type CUexecAffinityParam_v1 = CUexecAffinityParam_st;
pub type CUexecAffinityParam = CUexecAffinityParam_v1;
pub const cudaError_enum_CUDA_SUCCESS: cudaError_enum = 0;
pub const cudaError_enum_CUDA_ERROR_INVALID_VALUE: cudaError_enum = 1;
pub const cudaError_enum_CUDA_ERROR_OUT_OF_MEMORY: cudaError_enum = 2;
pub const cudaError_enum_CUDA_ERROR_NOT_INITIALIZED: cudaError_enum = 3;
pub const cudaError_enum_CUDA_ERROR_DEINITIALIZED: cudaError_enum = 4;
pub const cudaError_enum_CUDA_ERROR_PROFILER_DISABLED: cudaError_enum = 5;
pub const cudaError_enum_CUDA_ERROR_PROFILER_NOT_INITIALIZED: cudaError_enum = 6;
pub const cudaError_enum_CUDA_ERROR_PROFILER_ALREADY_STARTED: cudaError_enum = 7;
pub const cudaError_enum_CUDA_ERROR_PROFILER_ALREADY_STOPPED: cudaError_enum = 8;
pub const cudaError_enum_CUDA_ERROR_STUB_LIBRARY: cudaError_enum = 34;
pub const cudaError_enum_CUDA_ERROR_DEVICE_UNAVAILABLE: cudaError_enum = 46;
pub const cudaError_enum_CUDA_ERROR_NO_DEVICE: cudaError_enum = 100;
pub const cudaError_enum_CUDA_ERROR_INVALID_DEVICE: cudaError_enum = 101;
pub const cudaError_enum_CUDA_ERROR_DEVICE_NOT_LICENSED: cudaError_enum = 102;
pub const cudaError_enum_CUDA_ERROR_INVALID_IMAGE: cudaError_enum = 200;
pub const cudaError_enum_CUDA_ERROR_INVALID_CONTEXT: cudaError_enum = 201;
pub const cudaError_enum_CUDA_ERROR_CONTEXT_ALREADY_CURRENT: cudaError_enum = 202;
pub const cudaError_enum_CUDA_ERROR_MAP_FAILED: cudaError_enum = 205;
pub const cudaError_enum_CUDA_ERROR_UNMAP_FAILED: cudaError_enum = 206;
pub const cudaError_enum_CUDA_ERROR_ARRAY_IS_MAPPED: cudaError_enum = 207;
pub const cudaError_enum_CUDA_ERROR_ALREADY_MAPPED: cudaError_enum = 208;
pub const cudaError_enum_CUDA_ERROR_NO_BINARY_FOR_GPU: cudaError_enum = 209;
pub const cudaError_enum_CUDA_ERROR_ALREADY_ACQUIRED: cudaError_enum = 210;
pub const cudaError_enum_CUDA_ERROR_NOT_MAPPED: cudaError_enum = 211;
pub const cudaError_enum_CUDA_ERROR_NOT_MAPPED_AS_ARRAY: cudaError_enum = 212;
pub const cudaError_enum_CUDA_ERROR_NOT_MAPPED_AS_POINTER: cudaError_enum = 213;
pub const cudaError_enum_CUDA_ERROR_ECC_UNCORRECTABLE: cudaError_enum = 214;
pub const cudaError_enum_CUDA_ERROR_UNSUPPORTED_LIMIT: cudaError_enum = 215;
pub const cudaError_enum_CUDA_ERROR_CONTEXT_ALREADY_IN_USE: cudaError_enum = 216;
pub const cudaError_enum_CUDA_ERROR_PEER_ACCESS_UNSUPPORTED: cudaError_enum = 217;
pub const cudaError_enum_CUDA_ERROR_INVALID_PTX: cudaError_enum = 218;
pub const cudaError_enum_CUDA_ERROR_INVALID_GRAPHICS_CONTEXT: cudaError_enum = 219;
pub const cudaError_enum_CUDA_ERROR_NVLINK_UNCORRECTABLE: cudaError_enum = 220;
pub const cudaError_enum_CUDA_ERROR_JIT_COMPILER_NOT_FOUND: cudaError_enum = 221;
pub const cudaError_enum_CUDA_ERROR_UNSUPPORTED_PTX_VERSION: cudaError_enum = 222;
pub const cudaError_enum_CUDA_ERROR_JIT_COMPILATION_DISABLED: cudaError_enum = 223;
pub const cudaError_enum_CUDA_ERROR_UNSUPPORTED_EXEC_AFFINITY: cudaError_enum = 224;
pub const cudaError_enum_CUDA_ERROR_INVALID_SOURCE: cudaError_enum = 300;
pub const cudaError_enum_CUDA_ERROR_FILE_NOT_FOUND: cudaError_enum = 301;
pub const cudaError_enum_CUDA_ERROR_SHARED_OBJECT_SYMBOL_NOT_FOUND: cudaError_enum = 302;
pub const cudaError_enum_CUDA_ERROR_SHARED_OBJECT_INIT_FAILED: cudaError_enum = 303;
pub const cudaError_enum_CUDA_ERROR_OPERATING_SYSTEM: cudaError_enum = 304;
pub const cudaError_enum_CUDA_ERROR_INVALID_HANDLE: cudaError_enum = 400;
pub const cudaError_enum_CUDA_ERROR_ILLEGAL_STATE: cudaError_enum = 401;
pub const cudaError_enum_CUDA_ERROR_NOT_FOUND: cudaError_enum = 500;
pub const cudaError_enum_CUDA_ERROR_NOT_READY: cudaError_enum = 600;
pub const cudaError_enum_CUDA_ERROR_ILLEGAL_ADDRESS: cudaError_enum = 700;
pub const cudaError_enum_CUDA_ERROR_LAUNCH_OUT_OF_RESOURCES: cudaError_enum = 701;
pub const cudaError_enum_CUDA_ERROR_LAUNCH_TIMEOUT: cudaError_enum = 702;
pub const cudaError_enum_CUDA_ERROR_LAUNCH_INCOMPATIBLE_TEXTURING: cudaError_enum = 703;
pub const cudaError_enum_CUDA_ERROR_PEER_ACCESS_ALREADY_ENABLED: cudaError_enum = 704;
pub const cudaError_enum_CUDA_ERROR_PEER_ACCESS_NOT_ENABLED: cudaError_enum = 705;
pub const cudaError_enum_CUDA_ERROR_PRIMARY_CONTEXT_ACTIVE: cudaError_enum = 708;
pub const cudaError_enum_CUDA_ERROR_CONTEXT_IS_DESTROYED: cudaError_enum = 709;
pub const cudaError_enum_CUDA_ERROR_ASSERT: cudaError_enum = 710;
pub const cudaError_enum_CUDA_ERROR_TOO_MANY_PEERS: cudaError_enum = 711;
pub const cudaError_enum_CUDA_ERROR_HOST_MEMORY_ALREADY_REGISTERED: cudaError_enum = 712;
pub const cudaError_enum_CUDA_ERROR_HOST_MEMORY_NOT_REGISTERED: cudaError_enum = 713;
pub const cudaError_enum_CUDA_ERROR_HARDWARE_STACK_ERROR: cudaError_enum = 714;
pub const cudaError_enum_CUDA_ERROR_ILLEGAL_INSTRUCTION: cudaError_enum = 715;
pub const cudaError_enum_CUDA_ERROR_MISALIGNED_ADDRESS: cudaError_enum = 716;
pub const cudaError_enum_CUDA_ERROR_INVALID_ADDRESS_SPACE: cudaError_enum = 717;
pub const cudaError_enum_CUDA_ERROR_INVALID_PC: cudaError_enum = 718;
pub const cudaError_enum_CUDA_ERROR_LAUNCH_FAILED: cudaError_enum = 719;
pub const cudaError_enum_CUDA_ERROR_COOPERATIVE_LAUNCH_TOO_LARGE: cudaError_enum = 720;
pub const cudaError_enum_CUDA_ERROR_NOT_PERMITTED: cudaError_enum = 800;
pub const cudaError_enum_CUDA_ERROR_NOT_SUPPORTED: cudaError_enum = 801;
pub const cudaError_enum_CUDA_ERROR_SYSTEM_NOT_READY: cudaError_enum = 802;
pub const cudaError_enum_CUDA_ERROR_SYSTEM_DRIVER_MISMATCH: cudaError_enum = 803;
pub const cudaError_enum_CUDA_ERROR_COMPAT_NOT_SUPPORTED_ON_DEVICE: cudaError_enum = 804;
pub const cudaError_enum_CUDA_ERROR_MPS_CONNECTION_FAILED: cudaError_enum = 805;
pub const cudaError_enum_CUDA_ERROR_MPS_RPC_FAILURE: cudaError_enum = 806;
pub const cudaError_enum_CUDA_ERROR_MPS_SERVER_NOT_READY: cudaError_enum = 807;
pub const cudaError_enum_CUDA_ERROR_MPS_MAX_CLIENTS_REACHED: cudaError_enum = 808;
pub const cudaError_enum_CUDA_ERROR_MPS_MAX_CONNECTIONS_REACHED: cudaError_enum = 809;
pub const cudaError_enum_CUDA_ERROR_MPS_CLIENT_TERMINATED: cudaError_enum = 810;
pub const cudaError_enum_CUDA_ERROR_STREAM_CAPTURE_UNSUPPORTED: cudaError_enum = 900;
pub const cudaError_enum_CUDA_ERROR_STREAM_CAPTURE_INVALIDATED: cudaError_enum = 901;
pub const cudaError_enum_CUDA_ERROR_STREAM_CAPTURE_MERGE: cudaError_enum = 902;
pub const cudaError_enum_CUDA_ERROR_STREAM_CAPTURE_UNMATCHED: cudaError_enum = 903;
pub const cudaError_enum_CUDA_ERROR_STREAM_CAPTURE_UNJOINED: cudaError_enum = 904;
pub const cudaError_enum_CUDA_ERROR_STREAM_CAPTURE_ISOLATION: cudaError_enum = 905;
pub const cudaError_enum_CUDA_ERROR_STREAM_CAPTURE_IMPLICIT: cudaError_enum = 906;
pub const cudaError_enum_CUDA_ERROR_CAPTURED_EVENT: cudaError_enum = 907;
pub const cudaError_enum_CUDA_ERROR_STREAM_CAPTURE_WRONG_THREAD: cudaError_enum = 908;
pub const cudaError_enum_CUDA_ERROR_TIMEOUT: cudaError_enum = 909;
pub const cudaError_enum_CUDA_ERROR_GRAPH_EXEC_UPDATE_FAILURE: cudaError_enum = 910;
pub const cudaError_enum_CUDA_ERROR_EXTERNAL_DEVICE: cudaError_enum = 911;
pub const cudaError_enum_CUDA_ERROR_INVALID_CLUSTER_SIZE: cudaError_enum = 912;
pub const cudaError_enum_CUDA_ERROR_UNKNOWN: cudaError_enum = 999;
pub type cudaError_enum = ::std::os::raw::c_uint;
pub use self::cudaError_enum as CUresult;
pub const CUdevice_P2PAttribute_enum_CU_DEVICE_P2P_ATTRIBUTE_PERFORMANCE_RANK: CUdevice_P2PAttribute_enum = 1;
pub const CUdevice_P2PAttribute_enum_CU_DEVICE_P2P_ATTRIBUTE_ACCESS_SUPPORTED: CUdevice_P2PAttribute_enum = 2;
pub const CUdevice_P2PAttribute_enum_CU_DEVICE_P2P_ATTRIBUTE_NATIVE_ATOMIC_SUPPORTED: CUdevice_P2PAttribute_enum = 3;
pub const CUdevice_P2PAttribute_enum_CU_DEVICE_P2P_ATTRIBUTE_ACCESS_ACCESS_SUPPORTED: CUdevice_P2PAttribute_enum = 4;
pub const CUdevice_P2PAttribute_enum_CU_DEVICE_P2P_ATTRIBUTE_CUDA_ARRAY_ACCESS_SUPPORTED: CUdevice_P2PAttribute_enum =
	4;
pub type CUdevice_P2PAttribute_enum = ::std::os::raw::c_uint;
pub use self::CUdevice_P2PAttribute_enum as CUdevice_P2PAttribute;
pub type CUstreamCallback = ::std::option::Option<
	unsafe extern "C" fn(hStream: CUstream, status: CUresult, userData: *mut ::std::os::raw::c_void),
>;
pub type CUoccupancyB2DSize = ::std::option::Option<unsafe extern "C" fn(blockSize: ::std::os::raw::c_int) -> size_t>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUDA_MEMCPY2D_st {
	pub srcXInBytes: size_t,
	pub srcY: size_t,
	pub srcMemoryType: CUmemorytype,
	pub srcHost: *const ::std::os::raw::c_void,
	pub srcDevice: CUdeviceptr,
	pub srcArray: CUarray,
	pub srcPitch: size_t,
	pub dstXInBytes: size_t,
	pub dstY: size_t,
	pub dstMemoryType: CUmemorytype,
	pub dstHost: *mut ::std::os::raw::c_void,
	pub dstDevice: CUdeviceptr,
	pub dstArray: CUarray,
	pub dstPitch: size_t,
	pub WidthInBytes: size_t,
	pub Height: size_t,
}
#[test]
fn bindgen_test_layout_CUDA_MEMCPY2D_st() {
	assert_eq!(
		::std::mem::size_of::<CUDA_MEMCPY2D_st>(),
		128usize,
		concat!("Size of: ", stringify!(CUDA_MEMCPY2D_st))
	);
	assert_eq!(
		::std::mem::align_of::<CUDA_MEMCPY2D_st>(),
		8usize,
		concat!("Alignment of ", stringify!(CUDA_MEMCPY2D_st))
	);
	fn test_field_srcXInBytes() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY2D_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).srcXInBytes) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY2D_st),
				"::",
				stringify!(srcXInBytes)
			)
		);
	}
	test_field_srcXInBytes();
	fn test_field_srcY() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY2D_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).srcY) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY2D_st),
				"::",
				stringify!(srcY)
			)
		);
	}
	test_field_srcY();
	fn test_field_srcMemoryType() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY2D_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).srcMemoryType) as usize - ptr as usize
			},
			16usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY2D_st),
				"::",
				stringify!(srcMemoryType)
			)
		);
	}
	test_field_srcMemoryType();
	fn test_field_srcHost() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY2D_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).srcHost) as usize - ptr as usize
			},
			24usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY2D_st),
				"::",
				stringify!(srcHost)
			)
		);
	}
	test_field_srcHost();
	fn test_field_srcDevice() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY2D_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).srcDevice) as usize - ptr as usize
			},
			32usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY2D_st),
				"::",
				stringify!(srcDevice)
			)
		);
	}
	test_field_srcDevice();
	fn test_field_srcArray() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY2D_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).srcArray) as usize - ptr as usize
			},
			40usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY2D_st),
				"::",
				stringify!(srcArray)
			)
		);
	}
	test_field_srcArray();
	fn test_field_srcPitch() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY2D_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).srcPitch) as usize - ptr as usize
			},
			48usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY2D_st),
				"::",
				stringify!(srcPitch)
			)
		);
	}
	test_field_srcPitch();
	fn test_field_dstXInBytes() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY2D_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).dstXInBytes) as usize - ptr as usize
			},
			56usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY2D_st),
				"::",
				stringify!(dstXInBytes)
			)
		);
	}
	test_field_dstXInBytes();
	fn test_field_dstY() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY2D_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).dstY) as usize - ptr as usize
			},
			64usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY2D_st),
				"::",
				stringify!(dstY)
			)
		);
	}
	test_field_dstY();
	fn test_field_dstMemoryType() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY2D_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).dstMemoryType) as usize - ptr as usize
			},
			72usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY2D_st),
				"::",
				stringify!(dstMemoryType)
			)
		);
	}
	test_field_dstMemoryType();
	fn test_field_dstHost() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY2D_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).dstHost) as usize - ptr as usize
			},
			80usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY2D_st),
				"::",
				stringify!(dstHost)
			)
		);
	}
	test_field_dstHost();
	fn test_field_dstDevice() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY2D_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize
			},
			88usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY2D_st),
				"::",
				stringify!(dstDevice)
			)
		);
	}
	test_field_dstDevice();
	fn test_field_dstArray() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY2D_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).dstArray) as usize - ptr as usize
			},
			96usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY2D_st),
				"::",
				stringify!(dstArray)
			)
		);
	}
	test_field_dstArray();
	fn test_field_dstPitch() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY2D_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).dstPitch) as usize - ptr as usize
			},
			104usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY2D_st),
				"::",
				stringify!(dstPitch)
			)
		);
	}
	test_field_dstPitch();
	fn test_field_WidthInBytes() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY2D_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).WidthInBytes) as usize - ptr as usize
			},
			112usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY2D_st),
				"::",
				stringify!(WidthInBytes)
			)
		);
	}
	test_field_WidthInBytes();
	fn test_field_Height() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY2D_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).Height) as usize - ptr as usize
			},
			120usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY2D_st),
				"::",
				stringify!(Height)
			)
		);
	}
	test_field_Height();
}
pub type CUDA_MEMCPY2D_v2 = CUDA_MEMCPY2D_st;
pub type CUDA_MEMCPY2D = CUDA_MEMCPY2D_v2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUDA_MEMCPY3D_st {
	pub srcXInBytes: size_t,
	pub srcY: size_t,
	pub srcZ: size_t,
	pub srcLOD: size_t,
	pub srcMemoryType: CUmemorytype,
	pub srcHost: *const ::std::os::raw::c_void,
	pub srcDevice: CUdeviceptr,
	pub srcArray: CUarray,
	pub reserved0: *mut ::std::os::raw::c_void,
	pub srcPitch: size_t,
	pub srcHeight: size_t,
	pub dstXInBytes: size_t,
	pub dstY: size_t,
	pub dstZ: size_t,
	pub dstLOD: size_t,
	pub dstMemoryType: CUmemorytype,
	pub dstHost: *mut ::std::os::raw::c_void,
	pub dstDevice: CUdeviceptr,
	pub dstArray: CUarray,
	pub reserved1: *mut ::std::os::raw::c_void,
	pub dstPitch: size_t,
	pub dstHeight: size_t,
	pub WidthInBytes: size_t,
	pub Height: size_t,
	pub Depth: size_t,
}
#[test]
fn bindgen_test_layout_CUDA_MEMCPY3D_st() {
	assert_eq!(
		::std::mem::size_of::<CUDA_MEMCPY3D_st>(),
		200usize,
		concat!("Size of: ", stringify!(CUDA_MEMCPY3D_st))
	);
	assert_eq!(
		::std::mem::align_of::<CUDA_MEMCPY3D_st>(),
		8usize,
		concat!("Alignment of ", stringify!(CUDA_MEMCPY3D_st))
	);
	fn test_field_srcXInBytes() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY3D_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).srcXInBytes) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY3D_st),
				"::",
				stringify!(srcXInBytes)
			)
		);
	}
	test_field_srcXInBytes();
	fn test_field_srcY() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY3D_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).srcY) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY3D_st),
				"::",
				stringify!(srcY)
			)
		);
	}
	test_field_srcY();
	fn test_field_srcZ() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY3D_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).srcZ) as usize - ptr as usize
			},
			16usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY3D_st),
				"::",
				stringify!(srcZ)
			)
		);
	}
	test_field_srcZ();
	fn test_field_srcLOD() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY3D_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).srcLOD) as usize - ptr as usize
			},
			24usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY3D_st),
				"::",
				stringify!(srcLOD)
			)
		);
	}
	test_field_srcLOD();
	fn test_field_srcMemoryType() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY3D_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).srcMemoryType) as usize - ptr as usize
			},
			32usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY3D_st),
				"::",
				stringify!(srcMemoryType)
			)
		);
	}
	test_field_srcMemoryType();
	fn test_field_srcHost() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY3D_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).srcHost) as usize - ptr as usize
			},
			40usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY3D_st),
				"::",
				stringify!(srcHost)
			)
		);
	}
	test_field_srcHost();
	fn test_field_srcDevice() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY3D_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).srcDevice) as usize - ptr as usize
			},
			48usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY3D_st),
				"::",
				stringify!(srcDevice)
			)
		);
	}
	test_field_srcDevice();
	fn test_field_srcArray() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY3D_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).srcArray) as usize - ptr as usize
			},
			56usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY3D_st),
				"::",
				stringify!(srcArray)
			)
		);
	}
	test_field_srcArray();
	fn test_field_reserved0() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY3D_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).reserved0) as usize - ptr as usize
			},
			64usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY3D_st),
				"::",
				stringify!(reserved0)
			)
		);
	}
	test_field_reserved0();
	fn test_field_srcPitch() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY3D_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).srcPitch) as usize - ptr as usize
			},
			72usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY3D_st),
				"::",
				stringify!(srcPitch)
			)
		);
	}
	test_field_srcPitch();
	fn test_field_srcHeight() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY3D_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).srcHeight) as usize - ptr as usize
			},
			80usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY3D_st),
				"::",
				stringify!(srcHeight)
			)
		);
	}
	test_field_srcHeight();
	fn test_field_dstXInBytes() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY3D_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).dstXInBytes) as usize - ptr as usize
			},
			88usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY3D_st),
				"::",
				stringify!(dstXInBytes)
			)
		);
	}
	test_field_dstXInBytes();
	fn test_field_dstY() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY3D_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).dstY) as usize - ptr as usize
			},
			96usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY3D_st),
				"::",
				stringify!(dstY)
			)
		);
	}
	test_field_dstY();
	fn test_field_dstZ() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY3D_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).dstZ) as usize - ptr as usize
			},
			104usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY3D_st),
				"::",
				stringify!(dstZ)
			)
		);
	}
	test_field_dstZ();
	fn test_field_dstLOD() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY3D_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).dstLOD) as usize - ptr as usize
			},
			112usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY3D_st),
				"::",
				stringify!(dstLOD)
			)
		);
	}
	test_field_dstLOD();
	fn test_field_dstMemoryType() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY3D_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).dstMemoryType) as usize - ptr as usize
			},
			120usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY3D_st),
				"::",
				stringify!(dstMemoryType)
			)
		);
	}
	test_field_dstMemoryType();
	fn test_field_dstHost() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY3D_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).dstHost) as usize - ptr as usize
			},
			128usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY3D_st),
				"::",
				stringify!(dstHost)
			)
		);
	}
	test_field_dstHost();
	fn test_field_dstDevice() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY3D_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize
			},
			136usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY3D_st),
				"::",
				stringify!(dstDevice)
			)
		);
	}
	test_field_dstDevice();
	fn test_field_dstArray() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY3D_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).dstArray) as usize - ptr as usize
			},
			144usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY3D_st),
				"::",
				stringify!(dstArray)
			)
		);
	}
	test_field_dstArray();
	fn test_field_reserved1() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY3D_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).reserved1) as usize - ptr as usize
			},
			152usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY3D_st),
				"::",
				stringify!(reserved1)
			)
		);
	}
	test_field_reserved1();
	fn test_field_dstPitch() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY3D_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).dstPitch) as usize - ptr as usize
			},
			160usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY3D_st),
				"::",
				stringify!(dstPitch)
			)
		);
	}
	test_field_dstPitch();
	fn test_field_dstHeight() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY3D_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).dstHeight) as usize - ptr as usize
			},
			168usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY3D_st),
				"::",
				stringify!(dstHeight)
			)
		);
	}
	test_field_dstHeight();
	fn test_field_WidthInBytes() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY3D_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).WidthInBytes) as usize - ptr as usize
			},
			176usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY3D_st),
				"::",
				stringify!(WidthInBytes)
			)
		);
	}
	test_field_WidthInBytes();
	fn test_field_Height() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY3D_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).Height) as usize - ptr as usize
			},
			184usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY3D_st),
				"::",
				stringify!(Height)
			)
		);
	}
	test_field_Height();
	fn test_field_Depth() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY3D_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).Depth) as usize - ptr as usize
			},
			192usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY3D_st),
				"::",
				stringify!(Depth)
			)
		);
	}
	test_field_Depth();
}
pub type CUDA_MEMCPY3D_v2 = CUDA_MEMCPY3D_st;
pub type CUDA_MEMCPY3D = CUDA_MEMCPY3D_v2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUDA_MEMCPY3D_PEER_st {
	pub srcXInBytes: size_t,
	pub srcY: size_t,
	pub srcZ: size_t,
	pub srcLOD: size_t,
	pub srcMemoryType: CUmemorytype,
	pub srcHost: *const ::std::os::raw::c_void,
	pub srcDevice: CUdeviceptr,
	pub srcArray: CUarray,
	pub srcContext: CUcontext,
	pub srcPitch: size_t,
	pub srcHeight: size_t,
	pub dstXInBytes: size_t,
	pub dstY: size_t,
	pub dstZ: size_t,
	pub dstLOD: size_t,
	pub dstMemoryType: CUmemorytype,
	pub dstHost: *mut ::std::os::raw::c_void,
	pub dstDevice: CUdeviceptr,
	pub dstArray: CUarray,
	pub dstContext: CUcontext,
	pub dstPitch: size_t,
	pub dstHeight: size_t,
	pub WidthInBytes: size_t,
	pub Height: size_t,
	pub Depth: size_t,
}
#[test]
fn bindgen_test_layout_CUDA_MEMCPY3D_PEER_st() {
	assert_eq!(
		::std::mem::size_of::<CUDA_MEMCPY3D_PEER_st>(),
		200usize,
		concat!("Size of: ", stringify!(CUDA_MEMCPY3D_PEER_st))
	);
	assert_eq!(
		::std::mem::align_of::<CUDA_MEMCPY3D_PEER_st>(),
		8usize,
		concat!("Alignment of ", stringify!(CUDA_MEMCPY3D_PEER_st))
	);
	fn test_field_srcXInBytes() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY3D_PEER_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).srcXInBytes) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY3D_PEER_st),
				"::",
				stringify!(srcXInBytes)
			)
		);
	}
	test_field_srcXInBytes();
	fn test_field_srcY() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY3D_PEER_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).srcY) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY3D_PEER_st),
				"::",
				stringify!(srcY)
			)
		);
	}
	test_field_srcY();
	fn test_field_srcZ() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY3D_PEER_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).srcZ) as usize - ptr as usize
			},
			16usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY3D_PEER_st),
				"::",
				stringify!(srcZ)
			)
		);
	}
	test_field_srcZ();
	fn test_field_srcLOD() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY3D_PEER_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).srcLOD) as usize - ptr as usize
			},
			24usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY3D_PEER_st),
				"::",
				stringify!(srcLOD)
			)
		);
	}
	test_field_srcLOD();
	fn test_field_srcMemoryType() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY3D_PEER_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).srcMemoryType) as usize - ptr as usize
			},
			32usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY3D_PEER_st),
				"::",
				stringify!(srcMemoryType)
			)
		);
	}
	test_field_srcMemoryType();
	fn test_field_srcHost() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY3D_PEER_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).srcHost) as usize - ptr as usize
			},
			40usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY3D_PEER_st),
				"::",
				stringify!(srcHost)
			)
		);
	}
	test_field_srcHost();
	fn test_field_srcDevice() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY3D_PEER_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).srcDevice) as usize - ptr as usize
			},
			48usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY3D_PEER_st),
				"::",
				stringify!(srcDevice)
			)
		);
	}
	test_field_srcDevice();
	fn test_field_srcArray() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY3D_PEER_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).srcArray) as usize - ptr as usize
			},
			56usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY3D_PEER_st),
				"::",
				stringify!(srcArray)
			)
		);
	}
	test_field_srcArray();
	fn test_field_srcContext() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY3D_PEER_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).srcContext) as usize - ptr as usize
			},
			64usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY3D_PEER_st),
				"::",
				stringify!(srcContext)
			)
		);
	}
	test_field_srcContext();
	fn test_field_srcPitch() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY3D_PEER_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).srcPitch) as usize - ptr as usize
			},
			72usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY3D_PEER_st),
				"::",
				stringify!(srcPitch)
			)
		);
	}
	test_field_srcPitch();
	fn test_field_srcHeight() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY3D_PEER_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).srcHeight) as usize - ptr as usize
			},
			80usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY3D_PEER_st),
				"::",
				stringify!(srcHeight)
			)
		);
	}
	test_field_srcHeight();
	fn test_field_dstXInBytes() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY3D_PEER_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).dstXInBytes) as usize - ptr as usize
			},
			88usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY3D_PEER_st),
				"::",
				stringify!(dstXInBytes)
			)
		);
	}
	test_field_dstXInBytes();
	fn test_field_dstY() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY3D_PEER_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).dstY) as usize - ptr as usize
			},
			96usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY3D_PEER_st),
				"::",
				stringify!(dstY)
			)
		);
	}
	test_field_dstY();
	fn test_field_dstZ() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY3D_PEER_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).dstZ) as usize - ptr as usize
			},
			104usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY3D_PEER_st),
				"::",
				stringify!(dstZ)
			)
		);
	}
	test_field_dstZ();
	fn test_field_dstLOD() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY3D_PEER_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).dstLOD) as usize - ptr as usize
			},
			112usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY3D_PEER_st),
				"::",
				stringify!(dstLOD)
			)
		);
	}
	test_field_dstLOD();
	fn test_field_dstMemoryType() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY3D_PEER_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).dstMemoryType) as usize - ptr as usize
			},
			120usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY3D_PEER_st),
				"::",
				stringify!(dstMemoryType)
			)
		);
	}
	test_field_dstMemoryType();
	fn test_field_dstHost() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY3D_PEER_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).dstHost) as usize - ptr as usize
			},
			128usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY3D_PEER_st),
				"::",
				stringify!(dstHost)
			)
		);
	}
	test_field_dstHost();
	fn test_field_dstDevice() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY3D_PEER_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize
			},
			136usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY3D_PEER_st),
				"::",
				stringify!(dstDevice)
			)
		);
	}
	test_field_dstDevice();
	fn test_field_dstArray() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY3D_PEER_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).dstArray) as usize - ptr as usize
			},
			144usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY3D_PEER_st),
				"::",
				stringify!(dstArray)
			)
		);
	}
	test_field_dstArray();
	fn test_field_dstContext() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY3D_PEER_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).dstContext) as usize - ptr as usize
			},
			152usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY3D_PEER_st),
				"::",
				stringify!(dstContext)
			)
		);
	}
	test_field_dstContext();
	fn test_field_dstPitch() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY3D_PEER_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).dstPitch) as usize - ptr as usize
			},
			160usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY3D_PEER_st),
				"::",
				stringify!(dstPitch)
			)
		);
	}
	test_field_dstPitch();
	fn test_field_dstHeight() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY3D_PEER_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).dstHeight) as usize - ptr as usize
			},
			168usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY3D_PEER_st),
				"::",
				stringify!(dstHeight)
			)
		);
	}
	test_field_dstHeight();
	fn test_field_WidthInBytes() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY3D_PEER_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).WidthInBytes) as usize - ptr as usize
			},
			176usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY3D_PEER_st),
				"::",
				stringify!(WidthInBytes)
			)
		);
	}
	test_field_WidthInBytes();
	fn test_field_Height() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY3D_PEER_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).Height) as usize - ptr as usize
			},
			184usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY3D_PEER_st),
				"::",
				stringify!(Height)
			)
		);
	}
	test_field_Height();
	fn test_field_Depth() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEMCPY3D_PEER_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).Depth) as usize - ptr as usize
			},
			192usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEMCPY3D_PEER_st),
				"::",
				stringify!(Depth)
			)
		);
	}
	test_field_Depth();
}
pub type CUDA_MEMCPY3D_PEER_v1 = CUDA_MEMCPY3D_PEER_st;
pub type CUDA_MEMCPY3D_PEER = CUDA_MEMCPY3D_PEER_v1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUDA_ARRAY_DESCRIPTOR_st {
	pub Width: size_t,
	pub Height: size_t,
	pub Format: CUarray_format,
	pub NumChannels: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_CUDA_ARRAY_DESCRIPTOR_st() {
	assert_eq!(
		::std::mem::size_of::<CUDA_ARRAY_DESCRIPTOR_st>(),
		24usize,
		concat!("Size of: ", stringify!(CUDA_ARRAY_DESCRIPTOR_st))
	);
	assert_eq!(
		::std::mem::align_of::<CUDA_ARRAY_DESCRIPTOR_st>(),
		8usize,
		concat!("Alignment of ", stringify!(CUDA_ARRAY_DESCRIPTOR_st))
	);
	fn test_field_Width() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_ARRAY_DESCRIPTOR_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).Width) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_ARRAY_DESCRIPTOR_st),
				"::",
				stringify!(Width)
			)
		);
	}
	test_field_Width();
	fn test_field_Height() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_ARRAY_DESCRIPTOR_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).Height) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_ARRAY_DESCRIPTOR_st),
				"::",
				stringify!(Height)
			)
		);
	}
	test_field_Height();
	fn test_field_Format() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_ARRAY_DESCRIPTOR_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).Format) as usize - ptr as usize
			},
			16usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_ARRAY_DESCRIPTOR_st),
				"::",
				stringify!(Format)
			)
		);
	}
	test_field_Format();
	fn test_field_NumChannels() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_ARRAY_DESCRIPTOR_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).NumChannels) as usize - ptr as usize
			},
			20usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_ARRAY_DESCRIPTOR_st),
				"::",
				stringify!(NumChannels)
			)
		);
	}
	test_field_NumChannels();
}
pub type CUDA_ARRAY_DESCRIPTOR_v2 = CUDA_ARRAY_DESCRIPTOR_st;
pub type CUDA_ARRAY_DESCRIPTOR = CUDA_ARRAY_DESCRIPTOR_v2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUDA_ARRAY3D_DESCRIPTOR_st {
	pub Width: size_t,
	pub Height: size_t,
	pub Depth: size_t,
	pub Format: CUarray_format,
	pub NumChannels: ::std::os::raw::c_uint,
	pub Flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_CUDA_ARRAY3D_DESCRIPTOR_st() {
	assert_eq!(
		::std::mem::size_of::<CUDA_ARRAY3D_DESCRIPTOR_st>(),
		40usize,
		concat!("Size of: ", stringify!(CUDA_ARRAY3D_DESCRIPTOR_st))
	);
	assert_eq!(
		::std::mem::align_of::<CUDA_ARRAY3D_DESCRIPTOR_st>(),
		8usize,
		concat!("Alignment of ", stringify!(CUDA_ARRAY3D_DESCRIPTOR_st))
	);
	fn test_field_Width() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_ARRAY3D_DESCRIPTOR_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).Width) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_ARRAY3D_DESCRIPTOR_st),
				"::",
				stringify!(Width)
			)
		);
	}
	test_field_Width();
	fn test_field_Height() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_ARRAY3D_DESCRIPTOR_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).Height) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_ARRAY3D_DESCRIPTOR_st),
				"::",
				stringify!(Height)
			)
		);
	}
	test_field_Height();
	fn test_field_Depth() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_ARRAY3D_DESCRIPTOR_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).Depth) as usize - ptr as usize
			},
			16usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_ARRAY3D_DESCRIPTOR_st),
				"::",
				stringify!(Depth)
			)
		);
	}
	test_field_Depth();
	fn test_field_Format() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_ARRAY3D_DESCRIPTOR_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).Format) as usize - ptr as usize
			},
			24usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_ARRAY3D_DESCRIPTOR_st),
				"::",
				stringify!(Format)
			)
		);
	}
	test_field_Format();
	fn test_field_NumChannels() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_ARRAY3D_DESCRIPTOR_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).NumChannels) as usize - ptr as usize
			},
			28usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_ARRAY3D_DESCRIPTOR_st),
				"::",
				stringify!(NumChannels)
			)
		);
	}
	test_field_NumChannels();
	fn test_field_Flags() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_ARRAY3D_DESCRIPTOR_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize
			},
			32usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_ARRAY3D_DESCRIPTOR_st),
				"::",
				stringify!(Flags)
			)
		);
	}
	test_field_Flags();
}
pub type CUDA_ARRAY3D_DESCRIPTOR_v2 = CUDA_ARRAY3D_DESCRIPTOR_st;
pub type CUDA_ARRAY3D_DESCRIPTOR = CUDA_ARRAY3D_DESCRIPTOR_v2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUDA_ARRAY_SPARSE_PROPERTIES_st {
	pub tileExtent: CUDA_ARRAY_SPARSE_PROPERTIES_st__bindgen_ty_1,
	pub miptailFirstLevel: ::std::os::raw::c_uint,
	pub miptailSize: ::std::os::raw::c_ulonglong,
	pub flags: ::std::os::raw::c_uint,
	pub reserved: [::std::os::raw::c_uint; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUDA_ARRAY_SPARSE_PROPERTIES_st__bindgen_ty_1 {
	pub width: ::std::os::raw::c_uint,
	pub height: ::std::os::raw::c_uint,
	pub depth: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_CUDA_ARRAY_SPARSE_PROPERTIES_st__bindgen_ty_1() {
	assert_eq!(
		::std::mem::size_of::<CUDA_ARRAY_SPARSE_PROPERTIES_st__bindgen_ty_1>(),
		12usize,
		concat!("Size of: ", stringify!(CUDA_ARRAY_SPARSE_PROPERTIES_st__bindgen_ty_1))
	);
	assert_eq!(
		::std::mem::align_of::<CUDA_ARRAY_SPARSE_PROPERTIES_st__bindgen_ty_1>(),
		4usize,
		concat!(
			"Alignment of ",
			stringify!(CUDA_ARRAY_SPARSE_PROPERTIES_st__bindgen_ty_1)
		)
	);
	fn test_field_width() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_ARRAY_SPARSE_PROPERTIES_st__bindgen_ty_1>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_ARRAY_SPARSE_PROPERTIES_st__bindgen_ty_1),
				"::",
				stringify!(width)
			)
		);
	}
	test_field_width();
	fn test_field_height() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_ARRAY_SPARSE_PROPERTIES_st__bindgen_ty_1>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize
			},
			4usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_ARRAY_SPARSE_PROPERTIES_st__bindgen_ty_1),
				"::",
				stringify!(height)
			)
		);
	}
	test_field_height();
	fn test_field_depth() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_ARRAY_SPARSE_PROPERTIES_st__bindgen_ty_1>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_ARRAY_SPARSE_PROPERTIES_st__bindgen_ty_1),
				"::",
				stringify!(depth)
			)
		);
	}
	test_field_depth();
}
#[test]
fn bindgen_test_layout_CUDA_ARRAY_SPARSE_PROPERTIES_st() {
	assert_eq!(
		::std::mem::size_of::<CUDA_ARRAY_SPARSE_PROPERTIES_st>(),
		48usize,
		concat!("Size of: ", stringify!(CUDA_ARRAY_SPARSE_PROPERTIES_st))
	);
	assert_eq!(
		::std::mem::align_of::<CUDA_ARRAY_SPARSE_PROPERTIES_st>(),
		8usize,
		concat!("Alignment of ", stringify!(CUDA_ARRAY_SPARSE_PROPERTIES_st))
	);
	fn test_field_tileExtent() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_ARRAY_SPARSE_PROPERTIES_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).tileExtent) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_ARRAY_SPARSE_PROPERTIES_st),
				"::",
				stringify!(tileExtent)
			)
		);
	}
	test_field_tileExtent();
	fn test_field_miptailFirstLevel() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_ARRAY_SPARSE_PROPERTIES_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).miptailFirstLevel) as usize - ptr as usize
			},
			12usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_ARRAY_SPARSE_PROPERTIES_st),
				"::",
				stringify!(miptailFirstLevel)
			)
		);
	}
	test_field_miptailFirstLevel();
	fn test_field_miptailSize() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_ARRAY_SPARSE_PROPERTIES_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).miptailSize) as usize - ptr as usize
			},
			16usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_ARRAY_SPARSE_PROPERTIES_st),
				"::",
				stringify!(miptailSize)
			)
		);
	}
	test_field_miptailSize();
	fn test_field_flags() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_ARRAY_SPARSE_PROPERTIES_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
			},
			24usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_ARRAY_SPARSE_PROPERTIES_st),
				"::",
				stringify!(flags)
			)
		);
	}
	test_field_flags();
	fn test_field_reserved() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_ARRAY_SPARSE_PROPERTIES_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
			},
			28usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_ARRAY_SPARSE_PROPERTIES_st),
				"::",
				stringify!(reserved)
			)
		);
	}
	test_field_reserved();
}
pub type CUDA_ARRAY_SPARSE_PROPERTIES_v1 = CUDA_ARRAY_SPARSE_PROPERTIES_st;
pub type CUDA_ARRAY_SPARSE_PROPERTIES = CUDA_ARRAY_SPARSE_PROPERTIES_v1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUDA_ARRAY_MEMORY_REQUIREMENTS_st {
	pub size: size_t,
	pub alignment: size_t,
	pub reserved: [::std::os::raw::c_uint; 4usize],
}
#[test]
fn bindgen_test_layout_CUDA_ARRAY_MEMORY_REQUIREMENTS_st() {
	assert_eq!(
		::std::mem::size_of::<CUDA_ARRAY_MEMORY_REQUIREMENTS_st>(),
		32usize,
		concat!("Size of: ", stringify!(CUDA_ARRAY_MEMORY_REQUIREMENTS_st))
	);
	assert_eq!(
		::std::mem::align_of::<CUDA_ARRAY_MEMORY_REQUIREMENTS_st>(),
		8usize,
		concat!("Alignment of ", stringify!(CUDA_ARRAY_MEMORY_REQUIREMENTS_st))
	);
	fn test_field_size() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_ARRAY_MEMORY_REQUIREMENTS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_ARRAY_MEMORY_REQUIREMENTS_st),
				"::",
				stringify!(size)
			)
		);
	}
	test_field_size();
	fn test_field_alignment() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_ARRAY_MEMORY_REQUIREMENTS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).alignment) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_ARRAY_MEMORY_REQUIREMENTS_st),
				"::",
				stringify!(alignment)
			)
		);
	}
	test_field_alignment();
	fn test_field_reserved() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_ARRAY_MEMORY_REQUIREMENTS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
			},
			16usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_ARRAY_MEMORY_REQUIREMENTS_st),
				"::",
				stringify!(reserved)
			)
		);
	}
	test_field_reserved();
}
pub type CUDA_ARRAY_MEMORY_REQUIREMENTS_v1 = CUDA_ARRAY_MEMORY_REQUIREMENTS_st;
pub type CUDA_ARRAY_MEMORY_REQUIREMENTS = CUDA_ARRAY_MEMORY_REQUIREMENTS_v1;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CUDA_RESOURCE_DESC_st {
	pub resType: CUresourcetype,
	pub res: CUDA_RESOURCE_DESC_st__bindgen_ty_1,
	pub flags: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union CUDA_RESOURCE_DESC_st__bindgen_ty_1 {
	pub array: CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_1,
	pub mipmap: CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_2,
	pub linear: CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_3,
	pub pitch2D: CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_4,
	pub reserved: CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_5,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_1 {
	pub hArray: CUarray,
}
#[test]
fn bindgen_test_layout_CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_1() {
	assert_eq!(
		::std::mem::size_of::<CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_1>(),
		8usize,
		concat!(
			"Size of: ",
			stringify!(CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_1)
		)
	);
	assert_eq!(
		::std::mem::align_of::<CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_1>(),
		8usize,
		concat!(
			"Alignment of ",
			stringify!(CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_1)
		)
	);
	fn test_field_hArray() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_1>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).hArray) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_1),
				"::",
				stringify!(hArray)
			)
		);
	}
	test_field_hArray();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_2 {
	pub hMipmappedArray: CUmipmappedArray,
}
#[test]
fn bindgen_test_layout_CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_2() {
	assert_eq!(
		::std::mem::size_of::<CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_2>(),
		8usize,
		concat!(
			"Size of: ",
			stringify!(CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_2)
		)
	);
	assert_eq!(
		::std::mem::align_of::<CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_2>(),
		8usize,
		concat!(
			"Alignment of ",
			stringify!(CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_2)
		)
	);
	fn test_field_hMipmappedArray() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_2>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).hMipmappedArray) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_2),
				"::",
				stringify!(hMipmappedArray)
			)
		);
	}
	test_field_hMipmappedArray();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_3 {
	pub devPtr: CUdeviceptr,
	pub format: CUarray_format,
	pub numChannels: ::std::os::raw::c_uint,
	pub sizeInBytes: size_t,
}
#[test]
fn bindgen_test_layout_CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_3() {
	assert_eq!(
		::std::mem::size_of::<CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_3>(),
		24usize,
		concat!(
			"Size of: ",
			stringify!(CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_3)
		)
	);
	assert_eq!(
		::std::mem::align_of::<CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_3>(),
		8usize,
		concat!(
			"Alignment of ",
			stringify!(CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_3)
		)
	);
	fn test_field_devPtr() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_3>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).devPtr) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_3),
				"::",
				stringify!(devPtr)
			)
		);
	}
	test_field_devPtr();
	fn test_field_format() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_3>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_3),
				"::",
				stringify!(format)
			)
		);
	}
	test_field_format();
	fn test_field_numChannels() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_3>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).numChannels) as usize - ptr as usize
			},
			12usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_3),
				"::",
				stringify!(numChannels)
			)
		);
	}
	test_field_numChannels();
	fn test_field_sizeInBytes() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_3>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).sizeInBytes) as usize - ptr as usize
			},
			16usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_3),
				"::",
				stringify!(sizeInBytes)
			)
		);
	}
	test_field_sizeInBytes();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_4 {
	pub devPtr: CUdeviceptr,
	pub format: CUarray_format,
	pub numChannels: ::std::os::raw::c_uint,
	pub width: size_t,
	pub height: size_t,
	pub pitchInBytes: size_t,
}
#[test]
fn bindgen_test_layout_CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_4() {
	assert_eq!(
		::std::mem::size_of::<CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_4>(),
		40usize,
		concat!(
			"Size of: ",
			stringify!(CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_4)
		)
	);
	assert_eq!(
		::std::mem::align_of::<CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_4>(),
		8usize,
		concat!(
			"Alignment of ",
			stringify!(CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_4)
		)
	);
	fn test_field_devPtr() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_4>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).devPtr) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_4),
				"::",
				stringify!(devPtr)
			)
		);
	}
	test_field_devPtr();
	fn test_field_format() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_4>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_4),
				"::",
				stringify!(format)
			)
		);
	}
	test_field_format();
	fn test_field_numChannels() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_4>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).numChannels) as usize - ptr as usize
			},
			12usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_4),
				"::",
				stringify!(numChannels)
			)
		);
	}
	test_field_numChannels();
	fn test_field_width() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_4>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize
			},
			16usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_4),
				"::",
				stringify!(width)
			)
		);
	}
	test_field_width();
	fn test_field_height() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_4>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize
			},
			24usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_4),
				"::",
				stringify!(height)
			)
		);
	}
	test_field_height();
	fn test_field_pitchInBytes() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_4>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).pitchInBytes) as usize - ptr as usize
			},
			32usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_4),
				"::",
				stringify!(pitchInBytes)
			)
		);
	}
	test_field_pitchInBytes();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_5 {
	pub reserved: [::std::os::raw::c_int; 32usize],
}
#[test]
fn bindgen_test_layout_CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_5() {
	assert_eq!(
		::std::mem::size_of::<CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_5>(),
		128usize,
		concat!(
			"Size of: ",
			stringify!(CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_5)
		)
	);
	assert_eq!(
		::std::mem::align_of::<CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_5>(),
		4usize,
		concat!(
			"Alignment of ",
			stringify!(CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_5)
		)
	);
	fn test_field_reserved() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_5>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_RESOURCE_DESC_st__bindgen_ty_1__bindgen_ty_5),
				"::",
				stringify!(reserved)
			)
		);
	}
	test_field_reserved();
}
#[test]
fn bindgen_test_layout_CUDA_RESOURCE_DESC_st__bindgen_ty_1() {
	assert_eq!(
		::std::mem::size_of::<CUDA_RESOURCE_DESC_st__bindgen_ty_1>(),
		128usize,
		concat!("Size of: ", stringify!(CUDA_RESOURCE_DESC_st__bindgen_ty_1))
	);
	assert_eq!(
		::std::mem::align_of::<CUDA_RESOURCE_DESC_st__bindgen_ty_1>(),
		8usize,
		concat!("Alignment of ", stringify!(CUDA_RESOURCE_DESC_st__bindgen_ty_1))
	);
	fn test_field_array() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_RESOURCE_DESC_st__bindgen_ty_1>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).array) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_RESOURCE_DESC_st__bindgen_ty_1),
				"::",
				stringify!(array)
			)
		);
	}
	test_field_array();
	fn test_field_mipmap() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_RESOURCE_DESC_st__bindgen_ty_1>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).mipmap) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_RESOURCE_DESC_st__bindgen_ty_1),
				"::",
				stringify!(mipmap)
			)
		);
	}
	test_field_mipmap();
	fn test_field_linear() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_RESOURCE_DESC_st__bindgen_ty_1>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).linear) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_RESOURCE_DESC_st__bindgen_ty_1),
				"::",
				stringify!(linear)
			)
		);
	}
	test_field_linear();
	fn test_field_pitch2D() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_RESOURCE_DESC_st__bindgen_ty_1>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).pitch2D) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_RESOURCE_DESC_st__bindgen_ty_1),
				"::",
				stringify!(pitch2D)
			)
		);
	}
	test_field_pitch2D();
	fn test_field_reserved() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_RESOURCE_DESC_st__bindgen_ty_1>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_RESOURCE_DESC_st__bindgen_ty_1),
				"::",
				stringify!(reserved)
			)
		);
	}
	test_field_reserved();
}
#[test]
fn bindgen_test_layout_CUDA_RESOURCE_DESC_st() {
	assert_eq!(
		::std::mem::size_of::<CUDA_RESOURCE_DESC_st>(),
		144usize,
		concat!("Size of: ", stringify!(CUDA_RESOURCE_DESC_st))
	);
	assert_eq!(
		::std::mem::align_of::<CUDA_RESOURCE_DESC_st>(),
		8usize,
		concat!("Alignment of ", stringify!(CUDA_RESOURCE_DESC_st))
	);
	fn test_field_resType() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_RESOURCE_DESC_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).resType) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_RESOURCE_DESC_st),
				"::",
				stringify!(resType)
			)
		);
	}
	test_field_resType();
	fn test_field_res() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_RESOURCE_DESC_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).res) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_RESOURCE_DESC_st),
				"::",
				stringify!(res)
			)
		);
	}
	test_field_res();
	fn test_field_flags() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_RESOURCE_DESC_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
			},
			136usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_RESOURCE_DESC_st),
				"::",
				stringify!(flags)
			)
		);
	}
	test_field_flags();
}
pub type CUDA_RESOURCE_DESC_v1 = CUDA_RESOURCE_DESC_st;
pub type CUDA_RESOURCE_DESC = CUDA_RESOURCE_DESC_v1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUDA_TEXTURE_DESC_st {
	pub addressMode: [CUaddress_mode; 3usize],
	pub filterMode: CUfilter_mode,
	pub flags: ::std::os::raw::c_uint,
	pub maxAnisotropy: ::std::os::raw::c_uint,
	pub mipmapFilterMode: CUfilter_mode,
	pub mipmapLevelBias: f32,
	pub minMipmapLevelClamp: f32,
	pub maxMipmapLevelClamp: f32,
	pub borderColor: [f32; 4usize],
	pub reserved: [::std::os::raw::c_int; 12usize],
}
#[test]
fn bindgen_test_layout_CUDA_TEXTURE_DESC_st() {
	assert_eq!(
		::std::mem::size_of::<CUDA_TEXTURE_DESC_st>(),
		104usize,
		concat!("Size of: ", stringify!(CUDA_TEXTURE_DESC_st))
	);
	assert_eq!(
		::std::mem::align_of::<CUDA_TEXTURE_DESC_st>(),
		4usize,
		concat!("Alignment of ", stringify!(CUDA_TEXTURE_DESC_st))
	);
	fn test_field_addressMode() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_TEXTURE_DESC_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).addressMode) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_TEXTURE_DESC_st),
				"::",
				stringify!(addressMode)
			)
		);
	}
	test_field_addressMode();
	fn test_field_filterMode() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_TEXTURE_DESC_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).filterMode) as usize - ptr as usize
			},
			12usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_TEXTURE_DESC_st),
				"::",
				stringify!(filterMode)
			)
		);
	}
	test_field_filterMode();
	fn test_field_flags() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_TEXTURE_DESC_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
			},
			16usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_TEXTURE_DESC_st),
				"::",
				stringify!(flags)
			)
		);
	}
	test_field_flags();
	fn test_field_maxAnisotropy() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_TEXTURE_DESC_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).maxAnisotropy) as usize - ptr as usize
			},
			20usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_TEXTURE_DESC_st),
				"::",
				stringify!(maxAnisotropy)
			)
		);
	}
	test_field_maxAnisotropy();
	fn test_field_mipmapFilterMode() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_TEXTURE_DESC_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).mipmapFilterMode) as usize - ptr as usize
			},
			24usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_TEXTURE_DESC_st),
				"::",
				stringify!(mipmapFilterMode)
			)
		);
	}
	test_field_mipmapFilterMode();
	fn test_field_mipmapLevelBias() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_TEXTURE_DESC_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).mipmapLevelBias) as usize - ptr as usize
			},
			28usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_TEXTURE_DESC_st),
				"::",
				stringify!(mipmapLevelBias)
			)
		);
	}
	test_field_mipmapLevelBias();
	fn test_field_minMipmapLevelClamp() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_TEXTURE_DESC_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).minMipmapLevelClamp) as usize - ptr as usize
			},
			32usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_TEXTURE_DESC_st),
				"::",
				stringify!(minMipmapLevelClamp)
			)
		);
	}
	test_field_minMipmapLevelClamp();
	fn test_field_maxMipmapLevelClamp() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_TEXTURE_DESC_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).maxMipmapLevelClamp) as usize - ptr as usize
			},
			36usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_TEXTURE_DESC_st),
				"::",
				stringify!(maxMipmapLevelClamp)
			)
		);
	}
	test_field_maxMipmapLevelClamp();
	fn test_field_borderColor() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_TEXTURE_DESC_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).borderColor) as usize - ptr as usize
			},
			40usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_TEXTURE_DESC_st),
				"::",
				stringify!(borderColor)
			)
		);
	}
	test_field_borderColor();
	fn test_field_reserved() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_TEXTURE_DESC_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
			},
			56usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_TEXTURE_DESC_st),
				"::",
				stringify!(reserved)
			)
		);
	}
	test_field_reserved();
}
pub type CUDA_TEXTURE_DESC_v1 = CUDA_TEXTURE_DESC_st;
pub type CUDA_TEXTURE_DESC = CUDA_TEXTURE_DESC_v1;
pub const CUresourceViewFormat_enum_CU_RES_VIEW_FORMAT_NONE: CUresourceViewFormat_enum = 0;
pub const CUresourceViewFormat_enum_CU_RES_VIEW_FORMAT_UINT_1X8: CUresourceViewFormat_enum = 1;
pub const CUresourceViewFormat_enum_CU_RES_VIEW_FORMAT_UINT_2X8: CUresourceViewFormat_enum = 2;
pub const CUresourceViewFormat_enum_CU_RES_VIEW_FORMAT_UINT_4X8: CUresourceViewFormat_enum = 3;
pub const CUresourceViewFormat_enum_CU_RES_VIEW_FORMAT_SINT_1X8: CUresourceViewFormat_enum = 4;
pub const CUresourceViewFormat_enum_CU_RES_VIEW_FORMAT_SINT_2X8: CUresourceViewFormat_enum = 5;
pub const CUresourceViewFormat_enum_CU_RES_VIEW_FORMAT_SINT_4X8: CUresourceViewFormat_enum = 6;
pub const CUresourceViewFormat_enum_CU_RES_VIEW_FORMAT_UINT_1X16: CUresourceViewFormat_enum = 7;
pub const CUresourceViewFormat_enum_CU_RES_VIEW_FORMAT_UINT_2X16: CUresourceViewFormat_enum = 8;
pub const CUresourceViewFormat_enum_CU_RES_VIEW_FORMAT_UINT_4X16: CUresourceViewFormat_enum = 9;
pub const CUresourceViewFormat_enum_CU_RES_VIEW_FORMAT_SINT_1X16: CUresourceViewFormat_enum = 10;
pub const CUresourceViewFormat_enum_CU_RES_VIEW_FORMAT_SINT_2X16: CUresourceViewFormat_enum = 11;
pub const CUresourceViewFormat_enum_CU_RES_VIEW_FORMAT_SINT_4X16: CUresourceViewFormat_enum = 12;
pub const CUresourceViewFormat_enum_CU_RES_VIEW_FORMAT_UINT_1X32: CUresourceViewFormat_enum = 13;
pub const CUresourceViewFormat_enum_CU_RES_VIEW_FORMAT_UINT_2X32: CUresourceViewFormat_enum = 14;
pub const CUresourceViewFormat_enum_CU_RES_VIEW_FORMAT_UINT_4X32: CUresourceViewFormat_enum = 15;
pub const CUresourceViewFormat_enum_CU_RES_VIEW_FORMAT_SINT_1X32: CUresourceViewFormat_enum = 16;
pub const CUresourceViewFormat_enum_CU_RES_VIEW_FORMAT_SINT_2X32: CUresourceViewFormat_enum = 17;
pub const CUresourceViewFormat_enum_CU_RES_VIEW_FORMAT_SINT_4X32: CUresourceViewFormat_enum = 18;
pub const CUresourceViewFormat_enum_CU_RES_VIEW_FORMAT_FLOAT_1X16: CUresourceViewFormat_enum = 19;
pub const CUresourceViewFormat_enum_CU_RES_VIEW_FORMAT_FLOAT_2X16: CUresourceViewFormat_enum = 20;
pub const CUresourceViewFormat_enum_CU_RES_VIEW_FORMAT_FLOAT_4X16: CUresourceViewFormat_enum = 21;
pub const CUresourceViewFormat_enum_CU_RES_VIEW_FORMAT_FLOAT_1X32: CUresourceViewFormat_enum = 22;
pub const CUresourceViewFormat_enum_CU_RES_VIEW_FORMAT_FLOAT_2X32: CUresourceViewFormat_enum = 23;
pub const CUresourceViewFormat_enum_CU_RES_VIEW_FORMAT_FLOAT_4X32: CUresourceViewFormat_enum = 24;
pub const CUresourceViewFormat_enum_CU_RES_VIEW_FORMAT_UNSIGNED_BC1: CUresourceViewFormat_enum = 25;
pub const CUresourceViewFormat_enum_CU_RES_VIEW_FORMAT_UNSIGNED_BC2: CUresourceViewFormat_enum = 26;
pub const CUresourceViewFormat_enum_CU_RES_VIEW_FORMAT_UNSIGNED_BC3: CUresourceViewFormat_enum = 27;
pub const CUresourceViewFormat_enum_CU_RES_VIEW_FORMAT_UNSIGNED_BC4: CUresourceViewFormat_enum = 28;
pub const CUresourceViewFormat_enum_CU_RES_VIEW_FORMAT_SIGNED_BC4: CUresourceViewFormat_enum = 29;
pub const CUresourceViewFormat_enum_CU_RES_VIEW_FORMAT_UNSIGNED_BC5: CUresourceViewFormat_enum = 30;
pub const CUresourceViewFormat_enum_CU_RES_VIEW_FORMAT_SIGNED_BC5: CUresourceViewFormat_enum = 31;
pub const CUresourceViewFormat_enum_CU_RES_VIEW_FORMAT_UNSIGNED_BC6H: CUresourceViewFormat_enum = 32;
pub const CUresourceViewFormat_enum_CU_RES_VIEW_FORMAT_SIGNED_BC6H: CUresourceViewFormat_enum = 33;
pub const CUresourceViewFormat_enum_CU_RES_VIEW_FORMAT_UNSIGNED_BC7: CUresourceViewFormat_enum = 34;
pub type CUresourceViewFormat_enum = ::std::os::raw::c_uint;
pub use self::CUresourceViewFormat_enum as CUresourceViewFormat;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUDA_RESOURCE_VIEW_DESC_st {
	pub format: CUresourceViewFormat,
	pub width: size_t,
	pub height: size_t,
	pub depth: size_t,
	pub firstMipmapLevel: ::std::os::raw::c_uint,
	pub lastMipmapLevel: ::std::os::raw::c_uint,
	pub firstLayer: ::std::os::raw::c_uint,
	pub lastLayer: ::std::os::raw::c_uint,
	pub reserved: [::std::os::raw::c_uint; 16usize],
}
#[test]
fn bindgen_test_layout_CUDA_RESOURCE_VIEW_DESC_st() {
	assert_eq!(
		::std::mem::size_of::<CUDA_RESOURCE_VIEW_DESC_st>(),
		112usize,
		concat!("Size of: ", stringify!(CUDA_RESOURCE_VIEW_DESC_st))
	);
	assert_eq!(
		::std::mem::align_of::<CUDA_RESOURCE_VIEW_DESC_st>(),
		8usize,
		concat!("Alignment of ", stringify!(CUDA_RESOURCE_VIEW_DESC_st))
	);
	fn test_field_format() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_RESOURCE_VIEW_DESC_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_RESOURCE_VIEW_DESC_st),
				"::",
				stringify!(format)
			)
		);
	}
	test_field_format();
	fn test_field_width() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_RESOURCE_VIEW_DESC_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_RESOURCE_VIEW_DESC_st),
				"::",
				stringify!(width)
			)
		);
	}
	test_field_width();
	fn test_field_height() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_RESOURCE_VIEW_DESC_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize
			},
			16usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_RESOURCE_VIEW_DESC_st),
				"::",
				stringify!(height)
			)
		);
	}
	test_field_height();
	fn test_field_depth() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_RESOURCE_VIEW_DESC_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize
			},
			24usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_RESOURCE_VIEW_DESC_st),
				"::",
				stringify!(depth)
			)
		);
	}
	test_field_depth();
	fn test_field_firstMipmapLevel() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_RESOURCE_VIEW_DESC_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).firstMipmapLevel) as usize - ptr as usize
			},
			32usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_RESOURCE_VIEW_DESC_st),
				"::",
				stringify!(firstMipmapLevel)
			)
		);
	}
	test_field_firstMipmapLevel();
	fn test_field_lastMipmapLevel() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_RESOURCE_VIEW_DESC_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).lastMipmapLevel) as usize - ptr as usize
			},
			36usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_RESOURCE_VIEW_DESC_st),
				"::",
				stringify!(lastMipmapLevel)
			)
		);
	}
	test_field_lastMipmapLevel();
	fn test_field_firstLayer() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_RESOURCE_VIEW_DESC_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).firstLayer) as usize - ptr as usize
			},
			40usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_RESOURCE_VIEW_DESC_st),
				"::",
				stringify!(firstLayer)
			)
		);
	}
	test_field_firstLayer();
	fn test_field_lastLayer() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_RESOURCE_VIEW_DESC_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).lastLayer) as usize - ptr as usize
			},
			44usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_RESOURCE_VIEW_DESC_st),
				"::",
				stringify!(lastLayer)
			)
		);
	}
	test_field_lastLayer();
	fn test_field_reserved() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_RESOURCE_VIEW_DESC_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
			},
			48usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_RESOURCE_VIEW_DESC_st),
				"::",
				stringify!(reserved)
			)
		);
	}
	test_field_reserved();
}
pub type CUDA_RESOURCE_VIEW_DESC_v1 = CUDA_RESOURCE_VIEW_DESC_st;
pub type CUDA_RESOURCE_VIEW_DESC = CUDA_RESOURCE_VIEW_DESC_v1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st {
	pub p2pToken: ::std::os::raw::c_ulonglong,
	pub vaSpaceToken: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st() {
	assert_eq!(
		::std::mem::size_of::<CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st>(),
		16usize,
		concat!("Size of: ", stringify!(CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st))
	);
	assert_eq!(
		::std::mem::align_of::<CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st>(),
		8usize,
		concat!("Alignment of ", stringify!(CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st))
	);
	fn test_field_p2pToken() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).p2pToken) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st),
				"::",
				stringify!(p2pToken)
			)
		);
	}
	test_field_p2pToken();
	fn test_field_vaSpaceToken() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).vaSpaceToken) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st),
				"::",
				stringify!(vaSpaceToken)
			)
		);
	}
	test_field_vaSpaceToken();
}
pub type CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_v1 = CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st;
pub type CUDA_POINTER_ATTRIBUTE_P2P_TOKENS = CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_v1;
pub const CUDA_POINTER_ATTRIBUTE_ACCESS_FLAGS_enum_CU_POINTER_ATTRIBUTE_ACCESS_FLAG_NONE:
	CUDA_POINTER_ATTRIBUTE_ACCESS_FLAGS_enum = 0;
pub const CUDA_POINTER_ATTRIBUTE_ACCESS_FLAGS_enum_CU_POINTER_ATTRIBUTE_ACCESS_FLAG_READ:
	CUDA_POINTER_ATTRIBUTE_ACCESS_FLAGS_enum = 1;
pub const CUDA_POINTER_ATTRIBUTE_ACCESS_FLAGS_enum_CU_POINTER_ATTRIBUTE_ACCESS_FLAG_READWRITE:
	CUDA_POINTER_ATTRIBUTE_ACCESS_FLAGS_enum = 3;
pub type CUDA_POINTER_ATTRIBUTE_ACCESS_FLAGS_enum = ::std::os::raw::c_uint;
pub use self::CUDA_POINTER_ATTRIBUTE_ACCESS_FLAGS_enum as CUDA_POINTER_ATTRIBUTE_ACCESS_FLAGS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUDA_LAUNCH_PARAMS_st {
	pub function: CUfunction,
	pub gridDimX: ::std::os::raw::c_uint,
	pub gridDimY: ::std::os::raw::c_uint,
	pub gridDimZ: ::std::os::raw::c_uint,
	pub blockDimX: ::std::os::raw::c_uint,
	pub blockDimY: ::std::os::raw::c_uint,
	pub blockDimZ: ::std::os::raw::c_uint,
	pub sharedMemBytes: ::std::os::raw::c_uint,
	pub hStream: CUstream,
	pub kernelParams: *mut *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_CUDA_LAUNCH_PARAMS_st() {
	assert_eq!(
		::std::mem::size_of::<CUDA_LAUNCH_PARAMS_st>(),
		56usize,
		concat!("Size of: ", stringify!(CUDA_LAUNCH_PARAMS_st))
	);
	assert_eq!(
		::std::mem::align_of::<CUDA_LAUNCH_PARAMS_st>(),
		8usize,
		concat!("Alignment of ", stringify!(CUDA_LAUNCH_PARAMS_st))
	);
	fn test_field_function() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_LAUNCH_PARAMS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).function) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_LAUNCH_PARAMS_st),
				"::",
				stringify!(function)
			)
		);
	}
	test_field_function();
	fn test_field_gridDimX() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_LAUNCH_PARAMS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).gridDimX) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_LAUNCH_PARAMS_st),
				"::",
				stringify!(gridDimX)
			)
		);
	}
	test_field_gridDimX();
	fn test_field_gridDimY() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_LAUNCH_PARAMS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).gridDimY) as usize - ptr as usize
			},
			12usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_LAUNCH_PARAMS_st),
				"::",
				stringify!(gridDimY)
			)
		);
	}
	test_field_gridDimY();
	fn test_field_gridDimZ() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_LAUNCH_PARAMS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).gridDimZ) as usize - ptr as usize
			},
			16usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_LAUNCH_PARAMS_st),
				"::",
				stringify!(gridDimZ)
			)
		);
	}
	test_field_gridDimZ();
	fn test_field_blockDimX() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_LAUNCH_PARAMS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).blockDimX) as usize - ptr as usize
			},
			20usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_LAUNCH_PARAMS_st),
				"::",
				stringify!(blockDimX)
			)
		);
	}
	test_field_blockDimX();
	fn test_field_blockDimY() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_LAUNCH_PARAMS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).blockDimY) as usize - ptr as usize
			},
			24usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_LAUNCH_PARAMS_st),
				"::",
				stringify!(blockDimY)
			)
		);
	}
	test_field_blockDimY();
	fn test_field_blockDimZ() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_LAUNCH_PARAMS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).blockDimZ) as usize - ptr as usize
			},
			28usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_LAUNCH_PARAMS_st),
				"::",
				stringify!(blockDimZ)
			)
		);
	}
	test_field_blockDimZ();
	fn test_field_sharedMemBytes() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_LAUNCH_PARAMS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).sharedMemBytes) as usize - ptr as usize
			},
			32usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_LAUNCH_PARAMS_st),
				"::",
				stringify!(sharedMemBytes)
			)
		);
	}
	test_field_sharedMemBytes();
	fn test_field_hStream() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_LAUNCH_PARAMS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize
			},
			40usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_LAUNCH_PARAMS_st),
				"::",
				stringify!(hStream)
			)
		);
	}
	test_field_hStream();
	fn test_field_kernelParams() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_LAUNCH_PARAMS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).kernelParams) as usize - ptr as usize
			},
			48usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_LAUNCH_PARAMS_st),
				"::",
				stringify!(kernelParams)
			)
		);
	}
	test_field_kernelParams();
}
pub type CUDA_LAUNCH_PARAMS_v1 = CUDA_LAUNCH_PARAMS_st;
pub type CUDA_LAUNCH_PARAMS = CUDA_LAUNCH_PARAMS_v1;
pub const CUexternalMemoryHandleType_enum_CU_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD: CUexternalMemoryHandleType_enum = 1;
pub const CUexternalMemoryHandleType_enum_CU_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32: CUexternalMemoryHandleType_enum =
	2;
pub const CUexternalMemoryHandleType_enum_CU_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT:
	CUexternalMemoryHandleType_enum = 3;
pub const CUexternalMemoryHandleType_enum_CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP: CUexternalMemoryHandleType_enum =
	4;
pub const CUexternalMemoryHandleType_enum_CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE:
	CUexternalMemoryHandleType_enum = 5;
pub const CUexternalMemoryHandleType_enum_CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_RESOURCE:
	CUexternalMemoryHandleType_enum = 6;
pub const CUexternalMemoryHandleType_enum_CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_RESOURCE_KMT:
	CUexternalMemoryHandleType_enum = 7;
pub const CUexternalMemoryHandleType_enum_CU_EXTERNAL_MEMORY_HANDLE_TYPE_NVSCIBUF: CUexternalMemoryHandleType_enum = 8;
pub type CUexternalMemoryHandleType_enum = ::std::os::raw::c_uint;
pub use self::CUexternalMemoryHandleType_enum as CUexternalMemoryHandleType;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st {
	pub type_: CUexternalMemoryHandleType,
	pub handle: CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st__bindgen_ty_1,
	pub size: ::std::os::raw::c_ulonglong,
	pub flags: ::std::os::raw::c_uint,
	pub reserved: [::std::os::raw::c_uint; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st__bindgen_ty_1 {
	pub fd: ::std::os::raw::c_int,
	pub win32: CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st__bindgen_ty_1__bindgen_ty_1,
	pub nvSciBufObject: *const ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st__bindgen_ty_1__bindgen_ty_1 {
	pub handle: *mut ::std::os::raw::c_void,
	pub name: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st__bindgen_ty_1__bindgen_ty_1() {
	assert_eq!(
		::std::mem::size_of::<CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st__bindgen_ty_1__bindgen_ty_1>(),
		16usize,
		concat!(
			"Size of: ",
			stringify!(CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st__bindgen_ty_1__bindgen_ty_1)
		)
	);
	assert_eq!(
		::std::mem::align_of::<CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st__bindgen_ty_1__bindgen_ty_1>(),
		8usize,
		concat!(
			"Alignment of ",
			stringify!(CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st__bindgen_ty_1__bindgen_ty_1)
		)
	);
	fn test_field_handle() {
		assert_eq!(
			unsafe {
				let uninit =
					::std::mem::MaybeUninit::<CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st__bindgen_ty_1__bindgen_ty_1>::uninit(
					);
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st__bindgen_ty_1__bindgen_ty_1),
				"::",
				stringify!(handle)
			)
		);
	}
	test_field_handle();
	fn test_field_name() {
		assert_eq!(
			unsafe {
				let uninit =
					::std::mem::MaybeUninit::<CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st__bindgen_ty_1__bindgen_ty_1>::uninit(
					);
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st__bindgen_ty_1__bindgen_ty_1),
				"::",
				stringify!(name)
			)
		);
	}
	test_field_name();
}
#[test]
fn bindgen_test_layout_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st__bindgen_ty_1() {
	assert_eq!(
		::std::mem::size_of::<CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st__bindgen_ty_1>(),
		16usize,
		concat!(
			"Size of: ",
			stringify!(CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st__bindgen_ty_1)
		)
	);
	assert_eq!(
		::std::mem::align_of::<CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st__bindgen_ty_1>(),
		8usize,
		concat!(
			"Alignment of ",
			stringify!(CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st__bindgen_ty_1)
		)
	);
	fn test_field_fd() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st__bindgen_ty_1>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st__bindgen_ty_1),
				"::",
				stringify!(fd)
			)
		);
	}
	test_field_fd();
	fn test_field_win32() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st__bindgen_ty_1>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).win32) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st__bindgen_ty_1),
				"::",
				stringify!(win32)
			)
		);
	}
	test_field_win32();
	fn test_field_nvSciBufObject() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st__bindgen_ty_1>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).nvSciBufObject) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st__bindgen_ty_1),
				"::",
				stringify!(nvSciBufObject)
			)
		);
	}
	test_field_nvSciBufObject();
}
#[test]
fn bindgen_test_layout_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st() {
	assert_eq!(
		::std::mem::size_of::<CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st>(),
		104usize,
		concat!("Size of: ", stringify!(CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st))
	);
	assert_eq!(
		::std::mem::align_of::<CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st>(),
		8usize,
		concat!("Alignment of ", stringify!(CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st))
	);
	fn test_field_type() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st),
				"::",
				stringify!(type_)
			)
		);
	}
	test_field_type();
	fn test_field_handle() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st),
				"::",
				stringify!(handle)
			)
		);
	}
	test_field_handle();
	fn test_field_size() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
			},
			24usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st),
				"::",
				stringify!(size)
			)
		);
	}
	test_field_size();
	fn test_field_flags() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
			},
			32usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st),
				"::",
				stringify!(flags)
			)
		);
	}
	test_field_flags();
	fn test_field_reserved() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
			},
			36usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st),
				"::",
				stringify!(reserved)
			)
		);
	}
	test_field_reserved();
}
pub type CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1 = CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st;
pub type CUDA_EXTERNAL_MEMORY_HANDLE_DESC = CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUDA_EXTERNAL_MEMORY_BUFFER_DESC_st {
	pub offset: ::std::os::raw::c_ulonglong,
	pub size: ::std::os::raw::c_ulonglong,
	pub flags: ::std::os::raw::c_uint,
	pub reserved: [::std::os::raw::c_uint; 16usize],
}
#[test]
fn bindgen_test_layout_CUDA_EXTERNAL_MEMORY_BUFFER_DESC_st() {
	assert_eq!(
		::std::mem::size_of::<CUDA_EXTERNAL_MEMORY_BUFFER_DESC_st>(),
		88usize,
		concat!("Size of: ", stringify!(CUDA_EXTERNAL_MEMORY_BUFFER_DESC_st))
	);
	assert_eq!(
		::std::mem::align_of::<CUDA_EXTERNAL_MEMORY_BUFFER_DESC_st>(),
		8usize,
		concat!("Alignment of ", stringify!(CUDA_EXTERNAL_MEMORY_BUFFER_DESC_st))
	);
	fn test_field_offset() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_EXTERNAL_MEMORY_BUFFER_DESC_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXTERNAL_MEMORY_BUFFER_DESC_st),
				"::",
				stringify!(offset)
			)
		);
	}
	test_field_offset();
	fn test_field_size() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_EXTERNAL_MEMORY_BUFFER_DESC_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXTERNAL_MEMORY_BUFFER_DESC_st),
				"::",
				stringify!(size)
			)
		);
	}
	test_field_size();
	fn test_field_flags() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_EXTERNAL_MEMORY_BUFFER_DESC_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
			},
			16usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXTERNAL_MEMORY_BUFFER_DESC_st),
				"::",
				stringify!(flags)
			)
		);
	}
	test_field_flags();
	fn test_field_reserved() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_EXTERNAL_MEMORY_BUFFER_DESC_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
			},
			20usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXTERNAL_MEMORY_BUFFER_DESC_st),
				"::",
				stringify!(reserved)
			)
		);
	}
	test_field_reserved();
}
pub type CUDA_EXTERNAL_MEMORY_BUFFER_DESC_v1 = CUDA_EXTERNAL_MEMORY_BUFFER_DESC_st;
pub type CUDA_EXTERNAL_MEMORY_BUFFER_DESC = CUDA_EXTERNAL_MEMORY_BUFFER_DESC_v1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_st {
	pub offset: ::std::os::raw::c_ulonglong,
	pub arrayDesc: CUDA_ARRAY3D_DESCRIPTOR,
	pub numLevels: ::std::os::raw::c_uint,
	pub reserved: [::std::os::raw::c_uint; 16usize],
}
#[test]
fn bindgen_test_layout_CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_st() {
	assert_eq!(
		::std::mem::size_of::<CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_st>(),
		120usize,
		concat!("Size of: ", stringify!(CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_st))
	);
	assert_eq!(
		::std::mem::align_of::<CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_st>(),
		8usize,
		concat!(
			"Alignment of ",
			stringify!(CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_st)
		)
	);
	fn test_field_offset() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_st),
				"::",
				stringify!(offset)
			)
		);
	}
	test_field_offset();
	fn test_field_arrayDesc() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).arrayDesc) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_st),
				"::",
				stringify!(arrayDesc)
			)
		);
	}
	test_field_arrayDesc();
	fn test_field_numLevels() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).numLevels) as usize - ptr as usize
			},
			48usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_st),
				"::",
				stringify!(numLevels)
			)
		);
	}
	test_field_numLevels();
	fn test_field_reserved() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
			},
			52usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_st),
				"::",
				stringify!(reserved)
			)
		);
	}
	test_field_reserved();
}
pub type CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_v1 = CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_st;
pub type CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC = CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_v1;
pub const CUexternalSemaphoreHandleType_enum_CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD:
	CUexternalSemaphoreHandleType_enum = 1;
pub const CUexternalSemaphoreHandleType_enum_CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32:
	CUexternalSemaphoreHandleType_enum = 2;
pub const CUexternalSemaphoreHandleType_enum_CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT:
	CUexternalSemaphoreHandleType_enum = 3;
pub const CUexternalSemaphoreHandleType_enum_CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE:
	CUexternalSemaphoreHandleType_enum = 4;
pub const CUexternalSemaphoreHandleType_enum_CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE:
	CUexternalSemaphoreHandleType_enum = 5;
pub const CUexternalSemaphoreHandleType_enum_CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_NVSCISYNC:
	CUexternalSemaphoreHandleType_enum = 6;
pub const CUexternalSemaphoreHandleType_enum_CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_KEYED_MUTEX:
	CUexternalSemaphoreHandleType_enum = 7;
pub const CUexternalSemaphoreHandleType_enum_CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_KEYED_MUTEX_KMT:
	CUexternalSemaphoreHandleType_enum = 8;
pub const CUexternalSemaphoreHandleType_enum_CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_TIMELINE_SEMAPHORE_FD:
	CUexternalSemaphoreHandleType_enum = 9;
pub const CUexternalSemaphoreHandleType_enum_CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_TIMELINE_SEMAPHORE_WIN32:
	CUexternalSemaphoreHandleType_enum = 10;
pub type CUexternalSemaphoreHandleType_enum = ::std::os::raw::c_uint;
pub use self::CUexternalSemaphoreHandleType_enum as CUexternalSemaphoreHandleType;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st {
	pub type_: CUexternalSemaphoreHandleType,
	pub handle: CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st__bindgen_ty_1,
	pub flags: ::std::os::raw::c_uint,
	pub reserved: [::std::os::raw::c_uint; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st__bindgen_ty_1 {
	pub fd: ::std::os::raw::c_int,
	pub win32: CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st__bindgen_ty_1__bindgen_ty_1,
	pub nvSciSyncObj: *const ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st__bindgen_ty_1__bindgen_ty_1 {
	pub handle: *mut ::std::os::raw::c_void,
	pub name: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st__bindgen_ty_1__bindgen_ty_1() {
	assert_eq!(
		::std::mem::size_of::<CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st__bindgen_ty_1__bindgen_ty_1>(),
		16usize,
		concat!(
			"Size of: ",
			stringify!(CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st__bindgen_ty_1__bindgen_ty_1)
		)
	);
	assert_eq!(
		::std::mem::align_of::<CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st__bindgen_ty_1__bindgen_ty_1>(),
		8usize,
		concat!(
			"Alignment of ",
			stringify!(CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st__bindgen_ty_1__bindgen_ty_1)
		)
	);
	fn test_field_handle() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<
					CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st__bindgen_ty_1__bindgen_ty_1,
				>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st__bindgen_ty_1__bindgen_ty_1),
				"::",
				stringify!(handle)
			)
		);
	}
	test_field_handle();
	fn test_field_name() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<
					CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st__bindgen_ty_1__bindgen_ty_1,
				>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st__bindgen_ty_1__bindgen_ty_1),
				"::",
				stringify!(name)
			)
		);
	}
	test_field_name();
}
#[test]
fn bindgen_test_layout_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st__bindgen_ty_1() {
	assert_eq!(
		::std::mem::size_of::<CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st__bindgen_ty_1>(),
		16usize,
		concat!(
			"Size of: ",
			stringify!(CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st__bindgen_ty_1)
		)
	);
	assert_eq!(
		::std::mem::align_of::<CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st__bindgen_ty_1>(),
		8usize,
		concat!(
			"Alignment of ",
			stringify!(CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st__bindgen_ty_1)
		)
	);
	fn test_field_fd() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st__bindgen_ty_1>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st__bindgen_ty_1),
				"::",
				stringify!(fd)
			)
		);
	}
	test_field_fd();
	fn test_field_win32() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st__bindgen_ty_1>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).win32) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st__bindgen_ty_1),
				"::",
				stringify!(win32)
			)
		);
	}
	test_field_win32();
	fn test_field_nvSciSyncObj() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st__bindgen_ty_1>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).nvSciSyncObj) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st__bindgen_ty_1),
				"::",
				stringify!(nvSciSyncObj)
			)
		);
	}
	test_field_nvSciSyncObj();
}
#[test]
fn bindgen_test_layout_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st() {
	assert_eq!(
		::std::mem::size_of::<CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st>(),
		96usize,
		concat!("Size of: ", stringify!(CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st))
	);
	assert_eq!(
		::std::mem::align_of::<CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st>(),
		8usize,
		concat!("Alignment of ", stringify!(CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st))
	);
	fn test_field_type() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st),
				"::",
				stringify!(type_)
			)
		);
	}
	test_field_type();
	fn test_field_handle() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st),
				"::",
				stringify!(handle)
			)
		);
	}
	test_field_handle();
	fn test_field_flags() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
			},
			24usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st),
				"::",
				stringify!(flags)
			)
		);
	}
	test_field_flags();
	fn test_field_reserved() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
			},
			28usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st),
				"::",
				stringify!(reserved)
			)
		);
	}
	test_field_reserved();
}
pub type CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1 = CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st;
pub type CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC = CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st {
	pub params: CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st__bindgen_ty_1,
	pub flags: ::std::os::raw::c_uint,
	pub reserved: [::std::os::raw::c_uint; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st__bindgen_ty_1 {
	pub fence: CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st__bindgen_ty_1__bindgen_ty_1,
	pub nvSciSync: CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st__bindgen_ty_1__bindgen_ty_2,
	pub keyedMutex: CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st__bindgen_ty_1__bindgen_ty_3,
	pub reserved: [::std::os::raw::c_uint; 12usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st__bindgen_ty_1__bindgen_ty_1 {
	pub value: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st__bindgen_ty_1__bindgen_ty_1() {
	assert_eq!(
		::std::mem::size_of::<CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st__bindgen_ty_1__bindgen_ty_1>(),
		8usize,
		concat!(
			"Size of: ",
			stringify!(CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st__bindgen_ty_1__bindgen_ty_1)
		)
	);
	assert_eq!(
		::std::mem::align_of::<CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st__bindgen_ty_1__bindgen_ty_1>(),
		8usize,
		concat!(
			"Alignment of ",
			stringify!(CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st__bindgen_ty_1__bindgen_ty_1)
		)
	);
	fn test_field_value() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<
					CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st__bindgen_ty_1__bindgen_ty_1,
				>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st__bindgen_ty_1__bindgen_ty_1),
				"::",
				stringify!(value)
			)
		);
	}
	test_field_value();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st__bindgen_ty_1__bindgen_ty_2 {
	pub fence: *mut ::std::os::raw::c_void,
	pub reserved: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st__bindgen_ty_1__bindgen_ty_2() {
	assert_eq!(
		::std::mem::size_of::<CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st__bindgen_ty_1__bindgen_ty_2>(),
		8usize,
		concat!(
			"Size of: ",
			stringify!(CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st__bindgen_ty_1__bindgen_ty_2)
		)
	);
	assert_eq!(
		::std::mem::align_of::<CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st__bindgen_ty_1__bindgen_ty_2>(),
		8usize,
		concat!(
			"Alignment of ",
			stringify!(CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st__bindgen_ty_1__bindgen_ty_2)
		)
	);
	fn test_field_fence() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<
					CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st__bindgen_ty_1__bindgen_ty_2,
				>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).fence) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st__bindgen_ty_1__bindgen_ty_2),
				"::",
				stringify!(fence)
			)
		);
	}
	test_field_fence();
	fn test_field_reserved() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<
					CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st__bindgen_ty_1__bindgen_ty_2,
				>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st__bindgen_ty_1__bindgen_ty_2),
				"::",
				stringify!(reserved)
			)
		);
	}
	test_field_reserved();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st__bindgen_ty_1__bindgen_ty_3 {
	pub key: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st__bindgen_ty_1__bindgen_ty_3() {
	assert_eq!(
		::std::mem::size_of::<CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st__bindgen_ty_1__bindgen_ty_3>(),
		8usize,
		concat!(
			"Size of: ",
			stringify!(CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st__bindgen_ty_1__bindgen_ty_3)
		)
	);
	assert_eq!(
		::std::mem::align_of::<CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st__bindgen_ty_1__bindgen_ty_3>(),
		8usize,
		concat!(
			"Alignment of ",
			stringify!(CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st__bindgen_ty_1__bindgen_ty_3)
		)
	);
	fn test_field_key() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<
					CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st__bindgen_ty_1__bindgen_ty_3,
				>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st__bindgen_ty_1__bindgen_ty_3),
				"::",
				stringify!(key)
			)
		);
	}
	test_field_key();
}
#[test]
fn bindgen_test_layout_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st__bindgen_ty_1() {
	assert_eq!(
		::std::mem::size_of::<CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st__bindgen_ty_1>(),
		72usize,
		concat!(
			"Size of: ",
			stringify!(CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st__bindgen_ty_1)
		)
	);
	assert_eq!(
		::std::mem::align_of::<CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st__bindgen_ty_1>(),
		8usize,
		concat!(
			"Alignment of ",
			stringify!(CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st__bindgen_ty_1)
		)
	);
	fn test_field_fence() {
		assert_eq!(
			unsafe {
				let uninit =
					::std::mem::MaybeUninit::<CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st__bindgen_ty_1>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).fence) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st__bindgen_ty_1),
				"::",
				stringify!(fence)
			)
		);
	}
	test_field_fence();
	fn test_field_nvSciSync() {
		assert_eq!(
			unsafe {
				let uninit =
					::std::mem::MaybeUninit::<CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st__bindgen_ty_1>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).nvSciSync) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st__bindgen_ty_1),
				"::",
				stringify!(nvSciSync)
			)
		);
	}
	test_field_nvSciSync();
	fn test_field_keyedMutex() {
		assert_eq!(
			unsafe {
				let uninit =
					::std::mem::MaybeUninit::<CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st__bindgen_ty_1>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).keyedMutex) as usize - ptr as usize
			},
			16usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st__bindgen_ty_1),
				"::",
				stringify!(keyedMutex)
			)
		);
	}
	test_field_keyedMutex();
	fn test_field_reserved() {
		assert_eq!(
			unsafe {
				let uninit =
					::std::mem::MaybeUninit::<CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st__bindgen_ty_1>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
			},
			24usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st__bindgen_ty_1),
				"::",
				stringify!(reserved)
			)
		);
	}
	test_field_reserved();
}
#[test]
fn bindgen_test_layout_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st() {
	assert_eq!(
		::std::mem::size_of::<CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st>(),
		144usize,
		concat!("Size of: ", stringify!(CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st))
	);
	assert_eq!(
		::std::mem::align_of::<CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st>(),
		8usize,
		concat!("Alignment of ", stringify!(CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st))
	);
	fn test_field_params() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).params) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st),
				"::",
				stringify!(params)
			)
		);
	}
	test_field_params();
	fn test_field_flags() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
			},
			72usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st),
				"::",
				stringify!(flags)
			)
		);
	}
	test_field_flags();
	fn test_field_reserved() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
			},
			76usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st),
				"::",
				stringify!(reserved)
			)
		);
	}
	test_field_reserved();
}
pub type CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1 = CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st;
pub type CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS = CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st {
	pub params: CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st__bindgen_ty_1,
	pub flags: ::std::os::raw::c_uint,
	pub reserved: [::std::os::raw::c_uint; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st__bindgen_ty_1 {
	pub fence: CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st__bindgen_ty_1__bindgen_ty_1,
	pub nvSciSync: CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st__bindgen_ty_1__bindgen_ty_2,
	pub keyedMutex: CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st__bindgen_ty_1__bindgen_ty_3,
	pub reserved: [::std::os::raw::c_uint; 10usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st__bindgen_ty_1__bindgen_ty_1 {
	pub value: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st__bindgen_ty_1__bindgen_ty_1() {
	assert_eq!(
		::std::mem::size_of::<CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st__bindgen_ty_1__bindgen_ty_1>(),
		8usize,
		concat!(
			"Size of: ",
			stringify!(CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st__bindgen_ty_1__bindgen_ty_1)
		)
	);
	assert_eq!(
		::std::mem::align_of::<CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st__bindgen_ty_1__bindgen_ty_1>(),
		8usize,
		concat!(
			"Alignment of ",
			stringify!(CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st__bindgen_ty_1__bindgen_ty_1)
		)
	);
	fn test_field_value() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<
					CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st__bindgen_ty_1__bindgen_ty_1,
				>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st__bindgen_ty_1__bindgen_ty_1),
				"::",
				stringify!(value)
			)
		);
	}
	test_field_value();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st__bindgen_ty_1__bindgen_ty_2 {
	pub fence: *mut ::std::os::raw::c_void,
	pub reserved: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st__bindgen_ty_1__bindgen_ty_2() {
	assert_eq!(
		::std::mem::size_of::<CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st__bindgen_ty_1__bindgen_ty_2>(),
		8usize,
		concat!(
			"Size of: ",
			stringify!(CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st__bindgen_ty_1__bindgen_ty_2)
		)
	);
	assert_eq!(
		::std::mem::align_of::<CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st__bindgen_ty_1__bindgen_ty_2>(),
		8usize,
		concat!(
			"Alignment of ",
			stringify!(CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st__bindgen_ty_1__bindgen_ty_2)
		)
	);
	fn test_field_fence() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<
					CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st__bindgen_ty_1__bindgen_ty_2,
				>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).fence) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st__bindgen_ty_1__bindgen_ty_2),
				"::",
				stringify!(fence)
			)
		);
	}
	test_field_fence();
	fn test_field_reserved() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<
					CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st__bindgen_ty_1__bindgen_ty_2,
				>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st__bindgen_ty_1__bindgen_ty_2),
				"::",
				stringify!(reserved)
			)
		);
	}
	test_field_reserved();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st__bindgen_ty_1__bindgen_ty_3 {
	pub key: ::std::os::raw::c_ulonglong,
	pub timeoutMs: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st__bindgen_ty_1__bindgen_ty_3() {
	assert_eq!(
		::std::mem::size_of::<CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st__bindgen_ty_1__bindgen_ty_3>(),
		16usize,
		concat!(
			"Size of: ",
			stringify!(CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st__bindgen_ty_1__bindgen_ty_3)
		)
	);
	assert_eq!(
		::std::mem::align_of::<CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st__bindgen_ty_1__bindgen_ty_3>(),
		8usize,
		concat!(
			"Alignment of ",
			stringify!(CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st__bindgen_ty_1__bindgen_ty_3)
		)
	);
	fn test_field_key() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<
					CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st__bindgen_ty_1__bindgen_ty_3,
				>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st__bindgen_ty_1__bindgen_ty_3),
				"::",
				stringify!(key)
			)
		);
	}
	test_field_key();
	fn test_field_timeoutMs() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<
					CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st__bindgen_ty_1__bindgen_ty_3,
				>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).timeoutMs) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st__bindgen_ty_1__bindgen_ty_3),
				"::",
				stringify!(timeoutMs)
			)
		);
	}
	test_field_timeoutMs();
}
#[test]
fn bindgen_test_layout_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st__bindgen_ty_1() {
	assert_eq!(
		::std::mem::size_of::<CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st__bindgen_ty_1>(),
		72usize,
		concat!(
			"Size of: ",
			stringify!(CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st__bindgen_ty_1)
		)
	);
	assert_eq!(
		::std::mem::align_of::<CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st__bindgen_ty_1>(),
		8usize,
		concat!(
			"Alignment of ",
			stringify!(CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st__bindgen_ty_1)
		)
	);
	fn test_field_fence() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st__bindgen_ty_1>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).fence) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st__bindgen_ty_1),
				"::",
				stringify!(fence)
			)
		);
	}
	test_field_fence();
	fn test_field_nvSciSync() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st__bindgen_ty_1>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).nvSciSync) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st__bindgen_ty_1),
				"::",
				stringify!(nvSciSync)
			)
		);
	}
	test_field_nvSciSync();
	fn test_field_keyedMutex() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st__bindgen_ty_1>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).keyedMutex) as usize - ptr as usize
			},
			16usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st__bindgen_ty_1),
				"::",
				stringify!(keyedMutex)
			)
		);
	}
	test_field_keyedMutex();
	fn test_field_reserved() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st__bindgen_ty_1>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
			},
			32usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st__bindgen_ty_1),
				"::",
				stringify!(reserved)
			)
		);
	}
	test_field_reserved();
}
#[test]
fn bindgen_test_layout_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st() {
	assert_eq!(
		::std::mem::size_of::<CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st>(),
		144usize,
		concat!("Size of: ", stringify!(CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st))
	);
	assert_eq!(
		::std::mem::align_of::<CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st>(),
		8usize,
		concat!("Alignment of ", stringify!(CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st))
	);
	fn test_field_params() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).params) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st),
				"::",
				stringify!(params)
			)
		);
	}
	test_field_params();
	fn test_field_flags() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
			},
			72usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st),
				"::",
				stringify!(flags)
			)
		);
	}
	test_field_flags();
	fn test_field_reserved() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
			},
			76usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st),
				"::",
				stringify!(reserved)
			)
		);
	}
	test_field_reserved();
}
pub type CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1 = CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st;
pub type CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS = CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_st {
	pub extSemArray: *mut CUexternalSemaphore,
	pub paramsArray: *const CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS,
	pub numExtSems: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_st() {
	assert_eq!(
		::std::mem::size_of::<CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_st>(),
		24usize,
		concat!("Size of: ", stringify!(CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_st))
	);
	assert_eq!(
		::std::mem::align_of::<CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_st>(),
		8usize,
		concat!("Alignment of ", stringify!(CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_st))
	);
	fn test_field_extSemArray() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).extSemArray) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_st),
				"::",
				stringify!(extSemArray)
			)
		);
	}
	test_field_extSemArray();
	fn test_field_paramsArray() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).paramsArray) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_st),
				"::",
				stringify!(paramsArray)
			)
		);
	}
	test_field_paramsArray();
	fn test_field_numExtSems() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).numExtSems) as usize - ptr as usize
			},
			16usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_st),
				"::",
				stringify!(numExtSems)
			)
		);
	}
	test_field_numExtSems();
}
pub type CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v1 = CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_st;
pub type CUDA_EXT_SEM_SIGNAL_NODE_PARAMS = CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUDA_EXT_SEM_WAIT_NODE_PARAMS_st {
	pub extSemArray: *mut CUexternalSemaphore,
	pub paramsArray: *const CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS,
	pub numExtSems: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_CUDA_EXT_SEM_WAIT_NODE_PARAMS_st() {
	assert_eq!(
		::std::mem::size_of::<CUDA_EXT_SEM_WAIT_NODE_PARAMS_st>(),
		24usize,
		concat!("Size of: ", stringify!(CUDA_EXT_SEM_WAIT_NODE_PARAMS_st))
	);
	assert_eq!(
		::std::mem::align_of::<CUDA_EXT_SEM_WAIT_NODE_PARAMS_st>(),
		8usize,
		concat!("Alignment of ", stringify!(CUDA_EXT_SEM_WAIT_NODE_PARAMS_st))
	);
	fn test_field_extSemArray() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_EXT_SEM_WAIT_NODE_PARAMS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).extSemArray) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXT_SEM_WAIT_NODE_PARAMS_st),
				"::",
				stringify!(extSemArray)
			)
		);
	}
	test_field_extSemArray();
	fn test_field_paramsArray() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_EXT_SEM_WAIT_NODE_PARAMS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).paramsArray) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXT_SEM_WAIT_NODE_PARAMS_st),
				"::",
				stringify!(paramsArray)
			)
		);
	}
	test_field_paramsArray();
	fn test_field_numExtSems() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_EXT_SEM_WAIT_NODE_PARAMS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).numExtSems) as usize - ptr as usize
			},
			16usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_EXT_SEM_WAIT_NODE_PARAMS_st),
				"::",
				stringify!(numExtSems)
			)
		);
	}
	test_field_numExtSems();
}
pub type CUDA_EXT_SEM_WAIT_NODE_PARAMS_v1 = CUDA_EXT_SEM_WAIT_NODE_PARAMS_st;
pub type CUDA_EXT_SEM_WAIT_NODE_PARAMS = CUDA_EXT_SEM_WAIT_NODE_PARAMS_v1;
pub type CUmemGenericAllocationHandle_v1 = ::std::os::raw::c_ulonglong;
pub type CUmemGenericAllocationHandle = CUmemGenericAllocationHandle_v1;
pub const CUmemAllocationHandleType_enum_CU_MEM_HANDLE_TYPE_NONE: CUmemAllocationHandleType_enum = 0;
pub const CUmemAllocationHandleType_enum_CU_MEM_HANDLE_TYPE_POSIX_FILE_DESCRIPTOR: CUmemAllocationHandleType_enum = 1;
pub const CUmemAllocationHandleType_enum_CU_MEM_HANDLE_TYPE_WIN32: CUmemAllocationHandleType_enum = 2;
pub const CUmemAllocationHandleType_enum_CU_MEM_HANDLE_TYPE_WIN32_KMT: CUmemAllocationHandleType_enum = 4;
pub const CUmemAllocationHandleType_enum_CU_MEM_HANDLE_TYPE_MAX: CUmemAllocationHandleType_enum = 2147483647;
pub type CUmemAllocationHandleType_enum = ::std::os::raw::c_uint;
pub use self::CUmemAllocationHandleType_enum as CUmemAllocationHandleType;
pub const CUmemAccess_flags_enum_CU_MEM_ACCESS_FLAGS_PROT_NONE: CUmemAccess_flags_enum = 0;
pub const CUmemAccess_flags_enum_CU_MEM_ACCESS_FLAGS_PROT_READ: CUmemAccess_flags_enum = 1;
pub const CUmemAccess_flags_enum_CU_MEM_ACCESS_FLAGS_PROT_READWRITE: CUmemAccess_flags_enum = 3;
pub const CUmemAccess_flags_enum_CU_MEM_ACCESS_FLAGS_PROT_MAX: CUmemAccess_flags_enum = 2147483647;
pub type CUmemAccess_flags_enum = ::std::os::raw::c_uint;
pub use self::CUmemAccess_flags_enum as CUmemAccess_flags;
pub const CUmemLocationType_enum_CU_MEM_LOCATION_TYPE_INVALID: CUmemLocationType_enum = 0;
pub const CUmemLocationType_enum_CU_MEM_LOCATION_TYPE_DEVICE: CUmemLocationType_enum = 1;
pub const CUmemLocationType_enum_CU_MEM_LOCATION_TYPE_MAX: CUmemLocationType_enum = 2147483647;
pub type CUmemLocationType_enum = ::std::os::raw::c_uint;
pub use self::CUmemLocationType_enum as CUmemLocationType;
pub const CUmemAllocationType_enum_CU_MEM_ALLOCATION_TYPE_INVALID: CUmemAllocationType_enum = 0;
pub const CUmemAllocationType_enum_CU_MEM_ALLOCATION_TYPE_PINNED: CUmemAllocationType_enum = 1;
pub const CUmemAllocationType_enum_CU_MEM_ALLOCATION_TYPE_MAX: CUmemAllocationType_enum = 2147483647;
pub type CUmemAllocationType_enum = ::std::os::raw::c_uint;
pub use self::CUmemAllocationType_enum as CUmemAllocationType;
pub const CUmemAllocationGranularity_flags_enum_CU_MEM_ALLOC_GRANULARITY_MINIMUM:
	CUmemAllocationGranularity_flags_enum = 0;
pub const CUmemAllocationGranularity_flags_enum_CU_MEM_ALLOC_GRANULARITY_RECOMMENDED:
	CUmemAllocationGranularity_flags_enum = 1;
pub type CUmemAllocationGranularity_flags_enum = ::std::os::raw::c_uint;
pub use self::CUmemAllocationGranularity_flags_enum as CUmemAllocationGranularity_flags;
pub const CUmemRangeHandleType_enum_CU_MEM_RANGE_HANDLE_TYPE_DMA_BUF_FD: CUmemRangeHandleType_enum = 1;
pub const CUmemRangeHandleType_enum_CU_MEM_RANGE_HANDLE_TYPE_MAX: CUmemRangeHandleType_enum = 2147483647;
pub type CUmemRangeHandleType_enum = ::std::os::raw::c_uint;
pub use self::CUmemRangeHandleType_enum as CUmemRangeHandleType;
pub const CUarraySparseSubresourceType_enum_CU_ARRAY_SPARSE_SUBRESOURCE_TYPE_SPARSE_LEVEL:
	CUarraySparseSubresourceType_enum = 0;
pub const CUarraySparseSubresourceType_enum_CU_ARRAY_SPARSE_SUBRESOURCE_TYPE_MIPTAIL:
	CUarraySparseSubresourceType_enum = 1;
pub type CUarraySparseSubresourceType_enum = ::std::os::raw::c_uint;
pub use self::CUarraySparseSubresourceType_enum as CUarraySparseSubresourceType;
pub const CUmemOperationType_enum_CU_MEM_OPERATION_TYPE_MAP: CUmemOperationType_enum = 1;
pub const CUmemOperationType_enum_CU_MEM_OPERATION_TYPE_UNMAP: CUmemOperationType_enum = 2;
pub type CUmemOperationType_enum = ::std::os::raw::c_uint;
pub use self::CUmemOperationType_enum as CUmemOperationType;
pub const CUmemHandleType_enum_CU_MEM_HANDLE_TYPE_GENERIC: CUmemHandleType_enum = 0;
pub type CUmemHandleType_enum = ::std::os::raw::c_uint;
pub use self::CUmemHandleType_enum as CUmemHandleType;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CUarrayMapInfo_st {
	pub resourceType: CUresourcetype,
	pub resource: CUarrayMapInfo_st__bindgen_ty_1,
	pub subresourceType: CUarraySparseSubresourceType,
	pub subresource: CUarrayMapInfo_st__bindgen_ty_2,
	pub memOperationType: CUmemOperationType,
	pub memHandleType: CUmemHandleType,
	pub memHandle: CUarrayMapInfo_st__bindgen_ty_3,
	pub offset: ::std::os::raw::c_ulonglong,
	pub deviceBitMask: ::std::os::raw::c_uint,
	pub flags: ::std::os::raw::c_uint,
	pub reserved: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union CUarrayMapInfo_st__bindgen_ty_1 {
	pub mipmap: CUmipmappedArray,
	pub array: CUarray,
}
#[test]
fn bindgen_test_layout_CUarrayMapInfo_st__bindgen_ty_1() {
	assert_eq!(
		::std::mem::size_of::<CUarrayMapInfo_st__bindgen_ty_1>(),
		8usize,
		concat!("Size of: ", stringify!(CUarrayMapInfo_st__bindgen_ty_1))
	);
	assert_eq!(
		::std::mem::align_of::<CUarrayMapInfo_st__bindgen_ty_1>(),
		8usize,
		concat!("Alignment of ", stringify!(CUarrayMapInfo_st__bindgen_ty_1))
	);
	fn test_field_mipmap() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUarrayMapInfo_st__bindgen_ty_1>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).mipmap) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUarrayMapInfo_st__bindgen_ty_1),
				"::",
				stringify!(mipmap)
			)
		);
	}
	test_field_mipmap();
	fn test_field_array() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUarrayMapInfo_st__bindgen_ty_1>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).array) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUarrayMapInfo_st__bindgen_ty_1),
				"::",
				stringify!(array)
			)
		);
	}
	test_field_array();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union CUarrayMapInfo_st__bindgen_ty_2 {
	pub sparseLevel: CUarrayMapInfo_st__bindgen_ty_2__bindgen_ty_1,
	pub miptail: CUarrayMapInfo_st__bindgen_ty_2__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUarrayMapInfo_st__bindgen_ty_2__bindgen_ty_1 {
	pub level: ::std::os::raw::c_uint,
	pub layer: ::std::os::raw::c_uint,
	pub offsetX: ::std::os::raw::c_uint,
	pub offsetY: ::std::os::raw::c_uint,
	pub offsetZ: ::std::os::raw::c_uint,
	pub extentWidth: ::std::os::raw::c_uint,
	pub extentHeight: ::std::os::raw::c_uint,
	pub extentDepth: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_CUarrayMapInfo_st__bindgen_ty_2__bindgen_ty_1() {
	assert_eq!(
		::std::mem::size_of::<CUarrayMapInfo_st__bindgen_ty_2__bindgen_ty_1>(),
		32usize,
		concat!("Size of: ", stringify!(CUarrayMapInfo_st__bindgen_ty_2__bindgen_ty_1))
	);
	assert_eq!(
		::std::mem::align_of::<CUarrayMapInfo_st__bindgen_ty_2__bindgen_ty_1>(),
		4usize,
		concat!(
			"Alignment of ",
			stringify!(CUarrayMapInfo_st__bindgen_ty_2__bindgen_ty_1)
		)
	);
	fn test_field_level() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUarrayMapInfo_st__bindgen_ty_2__bindgen_ty_1>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).level) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUarrayMapInfo_st__bindgen_ty_2__bindgen_ty_1),
				"::",
				stringify!(level)
			)
		);
	}
	test_field_level();
	fn test_field_layer() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUarrayMapInfo_st__bindgen_ty_2__bindgen_ty_1>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).layer) as usize - ptr as usize
			},
			4usize,
			concat!(
				"Offset of field: ",
				stringify!(CUarrayMapInfo_st__bindgen_ty_2__bindgen_ty_1),
				"::",
				stringify!(layer)
			)
		);
	}
	test_field_layer();
	fn test_field_offsetX() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUarrayMapInfo_st__bindgen_ty_2__bindgen_ty_1>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).offsetX) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(CUarrayMapInfo_st__bindgen_ty_2__bindgen_ty_1),
				"::",
				stringify!(offsetX)
			)
		);
	}
	test_field_offsetX();
	fn test_field_offsetY() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUarrayMapInfo_st__bindgen_ty_2__bindgen_ty_1>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).offsetY) as usize - ptr as usize
			},
			12usize,
			concat!(
				"Offset of field: ",
				stringify!(CUarrayMapInfo_st__bindgen_ty_2__bindgen_ty_1),
				"::",
				stringify!(offsetY)
			)
		);
	}
	test_field_offsetY();
	fn test_field_offsetZ() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUarrayMapInfo_st__bindgen_ty_2__bindgen_ty_1>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).offsetZ) as usize - ptr as usize
			},
			16usize,
			concat!(
				"Offset of field: ",
				stringify!(CUarrayMapInfo_st__bindgen_ty_2__bindgen_ty_1),
				"::",
				stringify!(offsetZ)
			)
		);
	}
	test_field_offsetZ();
	fn test_field_extentWidth() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUarrayMapInfo_st__bindgen_ty_2__bindgen_ty_1>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).extentWidth) as usize - ptr as usize
			},
			20usize,
			concat!(
				"Offset of field: ",
				stringify!(CUarrayMapInfo_st__bindgen_ty_2__bindgen_ty_1),
				"::",
				stringify!(extentWidth)
			)
		);
	}
	test_field_extentWidth();
	fn test_field_extentHeight() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUarrayMapInfo_st__bindgen_ty_2__bindgen_ty_1>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).extentHeight) as usize - ptr as usize
			},
			24usize,
			concat!(
				"Offset of field: ",
				stringify!(CUarrayMapInfo_st__bindgen_ty_2__bindgen_ty_1),
				"::",
				stringify!(extentHeight)
			)
		);
	}
	test_field_extentHeight();
	fn test_field_extentDepth() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUarrayMapInfo_st__bindgen_ty_2__bindgen_ty_1>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).extentDepth) as usize - ptr as usize
			},
			28usize,
			concat!(
				"Offset of field: ",
				stringify!(CUarrayMapInfo_st__bindgen_ty_2__bindgen_ty_1),
				"::",
				stringify!(extentDepth)
			)
		);
	}
	test_field_extentDepth();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUarrayMapInfo_st__bindgen_ty_2__bindgen_ty_2 {
	pub layer: ::std::os::raw::c_uint,
	pub offset: ::std::os::raw::c_ulonglong,
	pub size: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_CUarrayMapInfo_st__bindgen_ty_2__bindgen_ty_2() {
	assert_eq!(
		::std::mem::size_of::<CUarrayMapInfo_st__bindgen_ty_2__bindgen_ty_2>(),
		24usize,
		concat!("Size of: ", stringify!(CUarrayMapInfo_st__bindgen_ty_2__bindgen_ty_2))
	);
	assert_eq!(
		::std::mem::align_of::<CUarrayMapInfo_st__bindgen_ty_2__bindgen_ty_2>(),
		8usize,
		concat!(
			"Alignment of ",
			stringify!(CUarrayMapInfo_st__bindgen_ty_2__bindgen_ty_2)
		)
	);
	fn test_field_layer() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUarrayMapInfo_st__bindgen_ty_2__bindgen_ty_2>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).layer) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUarrayMapInfo_st__bindgen_ty_2__bindgen_ty_2),
				"::",
				stringify!(layer)
			)
		);
	}
	test_field_layer();
	fn test_field_offset() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUarrayMapInfo_st__bindgen_ty_2__bindgen_ty_2>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(CUarrayMapInfo_st__bindgen_ty_2__bindgen_ty_2),
				"::",
				stringify!(offset)
			)
		);
	}
	test_field_offset();
	fn test_field_size() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUarrayMapInfo_st__bindgen_ty_2__bindgen_ty_2>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
			},
			16usize,
			concat!(
				"Offset of field: ",
				stringify!(CUarrayMapInfo_st__bindgen_ty_2__bindgen_ty_2),
				"::",
				stringify!(size)
			)
		);
	}
	test_field_size();
}
#[test]
fn bindgen_test_layout_CUarrayMapInfo_st__bindgen_ty_2() {
	assert_eq!(
		::std::mem::size_of::<CUarrayMapInfo_st__bindgen_ty_2>(),
		32usize,
		concat!("Size of: ", stringify!(CUarrayMapInfo_st__bindgen_ty_2))
	);
	assert_eq!(
		::std::mem::align_of::<CUarrayMapInfo_st__bindgen_ty_2>(),
		8usize,
		concat!("Alignment of ", stringify!(CUarrayMapInfo_st__bindgen_ty_2))
	);
	fn test_field_sparseLevel() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUarrayMapInfo_st__bindgen_ty_2>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).sparseLevel) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUarrayMapInfo_st__bindgen_ty_2),
				"::",
				stringify!(sparseLevel)
			)
		);
	}
	test_field_sparseLevel();
	fn test_field_miptail() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUarrayMapInfo_st__bindgen_ty_2>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).miptail) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUarrayMapInfo_st__bindgen_ty_2),
				"::",
				stringify!(miptail)
			)
		);
	}
	test_field_miptail();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union CUarrayMapInfo_st__bindgen_ty_3 {
	pub memHandle: CUmemGenericAllocationHandle,
}
#[test]
fn bindgen_test_layout_CUarrayMapInfo_st__bindgen_ty_3() {
	assert_eq!(
		::std::mem::size_of::<CUarrayMapInfo_st__bindgen_ty_3>(),
		8usize,
		concat!("Size of: ", stringify!(CUarrayMapInfo_st__bindgen_ty_3))
	);
	assert_eq!(
		::std::mem::align_of::<CUarrayMapInfo_st__bindgen_ty_3>(),
		8usize,
		concat!("Alignment of ", stringify!(CUarrayMapInfo_st__bindgen_ty_3))
	);
	fn test_field_memHandle() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUarrayMapInfo_st__bindgen_ty_3>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).memHandle) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUarrayMapInfo_st__bindgen_ty_3),
				"::",
				stringify!(memHandle)
			)
		);
	}
	test_field_memHandle();
}
#[test]
fn bindgen_test_layout_CUarrayMapInfo_st() {
	assert_eq!(
		::std::mem::size_of::<CUarrayMapInfo_st>(),
		96usize,
		concat!("Size of: ", stringify!(CUarrayMapInfo_st))
	);
	assert_eq!(
		::std::mem::align_of::<CUarrayMapInfo_st>(),
		8usize,
		concat!("Alignment of ", stringify!(CUarrayMapInfo_st))
	);
	fn test_field_resourceType() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUarrayMapInfo_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).resourceType) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUarrayMapInfo_st),
				"::",
				stringify!(resourceType)
			)
		);
	}
	test_field_resourceType();
	fn test_field_resource() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUarrayMapInfo_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).resource) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(CUarrayMapInfo_st),
				"::",
				stringify!(resource)
			)
		);
	}
	test_field_resource();
	fn test_field_subresourceType() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUarrayMapInfo_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).subresourceType) as usize - ptr as usize
			},
			16usize,
			concat!(
				"Offset of field: ",
				stringify!(CUarrayMapInfo_st),
				"::",
				stringify!(subresourceType)
			)
		);
	}
	test_field_subresourceType();
	fn test_field_subresource() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUarrayMapInfo_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).subresource) as usize - ptr as usize
			},
			24usize,
			concat!(
				"Offset of field: ",
				stringify!(CUarrayMapInfo_st),
				"::",
				stringify!(subresource)
			)
		);
	}
	test_field_subresource();
	fn test_field_memOperationType() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUarrayMapInfo_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).memOperationType) as usize - ptr as usize
			},
			56usize,
			concat!(
				"Offset of field: ",
				stringify!(CUarrayMapInfo_st),
				"::",
				stringify!(memOperationType)
			)
		);
	}
	test_field_memOperationType();
	fn test_field_memHandleType() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUarrayMapInfo_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).memHandleType) as usize - ptr as usize
			},
			60usize,
			concat!(
				"Offset of field: ",
				stringify!(CUarrayMapInfo_st),
				"::",
				stringify!(memHandleType)
			)
		);
	}
	test_field_memHandleType();
	fn test_field_memHandle() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUarrayMapInfo_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).memHandle) as usize - ptr as usize
			},
			64usize,
			concat!(
				"Offset of field: ",
				stringify!(CUarrayMapInfo_st),
				"::",
				stringify!(memHandle)
			)
		);
	}
	test_field_memHandle();
	fn test_field_offset() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUarrayMapInfo_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize
			},
			72usize,
			concat!(
				"Offset of field: ",
				stringify!(CUarrayMapInfo_st),
				"::",
				stringify!(offset)
			)
		);
	}
	test_field_offset();
	fn test_field_deviceBitMask() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUarrayMapInfo_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).deviceBitMask) as usize - ptr as usize
			},
			80usize,
			concat!(
				"Offset of field: ",
				stringify!(CUarrayMapInfo_st),
				"::",
				stringify!(deviceBitMask)
			)
		);
	}
	test_field_deviceBitMask();
	fn test_field_flags() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUarrayMapInfo_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
			},
			84usize,
			concat!(
				"Offset of field: ",
				stringify!(CUarrayMapInfo_st),
				"::",
				stringify!(flags)
			)
		);
	}
	test_field_flags();
	fn test_field_reserved() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUarrayMapInfo_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
			},
			88usize,
			concat!(
				"Offset of field: ",
				stringify!(CUarrayMapInfo_st),
				"::",
				stringify!(reserved)
			)
		);
	}
	test_field_reserved();
}
pub type CUarrayMapInfo_v1 = CUarrayMapInfo_st;
pub type CUarrayMapInfo = CUarrayMapInfo_v1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUmemLocation_st {
	pub type_: CUmemLocationType,
	pub id: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_CUmemLocation_st() {
	assert_eq!(
		::std::mem::size_of::<CUmemLocation_st>(),
		8usize,
		concat!("Size of: ", stringify!(CUmemLocation_st))
	);
	assert_eq!(
		::std::mem::align_of::<CUmemLocation_st>(),
		4usize,
		concat!("Alignment of ", stringify!(CUmemLocation_st))
	);
	fn test_field_type() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUmemLocation_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUmemLocation_st),
				"::",
				stringify!(type_)
			)
		);
	}
	test_field_type();
	fn test_field_id() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUmemLocation_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize
			},
			4usize,
			concat!("Offset of field: ", stringify!(CUmemLocation_st), "::", stringify!(id))
		);
	}
	test_field_id();
}
pub type CUmemLocation_v1 = CUmemLocation_st;
pub type CUmemLocation = CUmemLocation_v1;
pub const CUmemAllocationCompType_enum_CU_MEM_ALLOCATION_COMP_NONE: CUmemAllocationCompType_enum = 0;
pub const CUmemAllocationCompType_enum_CU_MEM_ALLOCATION_COMP_GENERIC: CUmemAllocationCompType_enum = 1;
pub type CUmemAllocationCompType_enum = ::std::os::raw::c_uint;
pub use self::CUmemAllocationCompType_enum as CUmemAllocationCompType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUmemAllocationProp_st {
	pub type_: CUmemAllocationType,
	pub requestedHandleTypes: CUmemAllocationHandleType,
	pub location: CUmemLocation,
	pub win32HandleMetaData: *mut ::std::os::raw::c_void,
	pub allocFlags: CUmemAllocationProp_st__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUmemAllocationProp_st__bindgen_ty_1 {
	pub compressionType: ::std::os::raw::c_uchar,
	pub gpuDirectRDMACapable: ::std::os::raw::c_uchar,
	pub usage: ::std::os::raw::c_ushort,
	pub reserved: [::std::os::raw::c_uchar; 4usize],
}
#[test]
fn bindgen_test_layout_CUmemAllocationProp_st__bindgen_ty_1() {
	assert_eq!(
		::std::mem::size_of::<CUmemAllocationProp_st__bindgen_ty_1>(),
		8usize,
		concat!("Size of: ", stringify!(CUmemAllocationProp_st__bindgen_ty_1))
	);
	assert_eq!(
		::std::mem::align_of::<CUmemAllocationProp_st__bindgen_ty_1>(),
		2usize,
		concat!("Alignment of ", stringify!(CUmemAllocationProp_st__bindgen_ty_1))
	);
	fn test_field_compressionType() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUmemAllocationProp_st__bindgen_ty_1>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).compressionType) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUmemAllocationProp_st__bindgen_ty_1),
				"::",
				stringify!(compressionType)
			)
		);
	}
	test_field_compressionType();
	fn test_field_gpuDirectRDMACapable() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUmemAllocationProp_st__bindgen_ty_1>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).gpuDirectRDMACapable) as usize - ptr as usize
			},
			1usize,
			concat!(
				"Offset of field: ",
				stringify!(CUmemAllocationProp_st__bindgen_ty_1),
				"::",
				stringify!(gpuDirectRDMACapable)
			)
		);
	}
	test_field_gpuDirectRDMACapable();
	fn test_field_usage() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUmemAllocationProp_st__bindgen_ty_1>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).usage) as usize - ptr as usize
			},
			2usize,
			concat!(
				"Offset of field: ",
				stringify!(CUmemAllocationProp_st__bindgen_ty_1),
				"::",
				stringify!(usage)
			)
		);
	}
	test_field_usage();
	fn test_field_reserved() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUmemAllocationProp_st__bindgen_ty_1>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
			},
			4usize,
			concat!(
				"Offset of field: ",
				stringify!(CUmemAllocationProp_st__bindgen_ty_1),
				"::",
				stringify!(reserved)
			)
		);
	}
	test_field_reserved();
}
#[test]
fn bindgen_test_layout_CUmemAllocationProp_st() {
	assert_eq!(
		::std::mem::size_of::<CUmemAllocationProp_st>(),
		32usize,
		concat!("Size of: ", stringify!(CUmemAllocationProp_st))
	);
	assert_eq!(
		::std::mem::align_of::<CUmemAllocationProp_st>(),
		8usize,
		concat!("Alignment of ", stringify!(CUmemAllocationProp_st))
	);
	fn test_field_type() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUmemAllocationProp_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUmemAllocationProp_st),
				"::",
				stringify!(type_)
			)
		);
	}
	test_field_type();
	fn test_field_requestedHandleTypes() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUmemAllocationProp_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).requestedHandleTypes) as usize - ptr as usize
			},
			4usize,
			concat!(
				"Offset of field: ",
				stringify!(CUmemAllocationProp_st),
				"::",
				stringify!(requestedHandleTypes)
			)
		);
	}
	test_field_requestedHandleTypes();
	fn test_field_location() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUmemAllocationProp_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).location) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(CUmemAllocationProp_st),
				"::",
				stringify!(location)
			)
		);
	}
	test_field_location();
	fn test_field_win32HandleMetaData() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUmemAllocationProp_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).win32HandleMetaData) as usize - ptr as usize
			},
			16usize,
			concat!(
				"Offset of field: ",
				stringify!(CUmemAllocationProp_st),
				"::",
				stringify!(win32HandleMetaData)
			)
		);
	}
	test_field_win32HandleMetaData();
	fn test_field_allocFlags() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUmemAllocationProp_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).allocFlags) as usize - ptr as usize
			},
			24usize,
			concat!(
				"Offset of field: ",
				stringify!(CUmemAllocationProp_st),
				"::",
				stringify!(allocFlags)
			)
		);
	}
	test_field_allocFlags();
}
pub type CUmemAllocationProp_v1 = CUmemAllocationProp_st;
pub type CUmemAllocationProp = CUmemAllocationProp_v1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUmemAccessDesc_st {
	pub location: CUmemLocation,
	pub flags: CUmemAccess_flags,
}
#[test]
fn bindgen_test_layout_CUmemAccessDesc_st() {
	assert_eq!(
		::std::mem::size_of::<CUmemAccessDesc_st>(),
		12usize,
		concat!("Size of: ", stringify!(CUmemAccessDesc_st))
	);
	assert_eq!(
		::std::mem::align_of::<CUmemAccessDesc_st>(),
		4usize,
		concat!("Alignment of ", stringify!(CUmemAccessDesc_st))
	);
	fn test_field_location() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUmemAccessDesc_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).location) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUmemAccessDesc_st),
				"::",
				stringify!(location)
			)
		);
	}
	test_field_location();
	fn test_field_flags() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUmemAccessDesc_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(CUmemAccessDesc_st),
				"::",
				stringify!(flags)
			)
		);
	}
	test_field_flags();
}
pub type CUmemAccessDesc_v1 = CUmemAccessDesc_st;
pub type CUmemAccessDesc = CUmemAccessDesc_v1;
pub const CUgraphExecUpdateResult_enum_CU_GRAPH_EXEC_UPDATE_SUCCESS: CUgraphExecUpdateResult_enum = 0;
pub const CUgraphExecUpdateResult_enum_CU_GRAPH_EXEC_UPDATE_ERROR: CUgraphExecUpdateResult_enum = 1;
pub const CUgraphExecUpdateResult_enum_CU_GRAPH_EXEC_UPDATE_ERROR_TOPOLOGY_CHANGED: CUgraphExecUpdateResult_enum = 2;
pub const CUgraphExecUpdateResult_enum_CU_GRAPH_EXEC_UPDATE_ERROR_NODE_TYPE_CHANGED: CUgraphExecUpdateResult_enum = 3;
pub const CUgraphExecUpdateResult_enum_CU_GRAPH_EXEC_UPDATE_ERROR_FUNCTION_CHANGED: CUgraphExecUpdateResult_enum = 4;
pub const CUgraphExecUpdateResult_enum_CU_GRAPH_EXEC_UPDATE_ERROR_PARAMETERS_CHANGED: CUgraphExecUpdateResult_enum = 5;
pub const CUgraphExecUpdateResult_enum_CU_GRAPH_EXEC_UPDATE_ERROR_NOT_SUPPORTED: CUgraphExecUpdateResult_enum = 6;
pub const CUgraphExecUpdateResult_enum_CU_GRAPH_EXEC_UPDATE_ERROR_UNSUPPORTED_FUNCTION_CHANGE:
	CUgraphExecUpdateResult_enum = 7;
pub const CUgraphExecUpdateResult_enum_CU_GRAPH_EXEC_UPDATE_ERROR_ATTRIBUTES_CHANGED: CUgraphExecUpdateResult_enum = 8;
pub type CUgraphExecUpdateResult_enum = ::std::os::raw::c_uint;
pub use self::CUgraphExecUpdateResult_enum as CUgraphExecUpdateResult;
pub const CUmemPool_attribute_enum_CU_MEMPOOL_ATTR_REUSE_FOLLOW_EVENT_DEPENDENCIES: CUmemPool_attribute_enum = 1;
pub const CUmemPool_attribute_enum_CU_MEMPOOL_ATTR_REUSE_ALLOW_OPPORTUNISTIC: CUmemPool_attribute_enum = 2;
pub const CUmemPool_attribute_enum_CU_MEMPOOL_ATTR_REUSE_ALLOW_INTERNAL_DEPENDENCIES: CUmemPool_attribute_enum = 3;
pub const CUmemPool_attribute_enum_CU_MEMPOOL_ATTR_RELEASE_THRESHOLD: CUmemPool_attribute_enum = 4;
pub const CUmemPool_attribute_enum_CU_MEMPOOL_ATTR_RESERVED_MEM_CURRENT: CUmemPool_attribute_enum = 5;
pub const CUmemPool_attribute_enum_CU_MEMPOOL_ATTR_RESERVED_MEM_HIGH: CUmemPool_attribute_enum = 6;
pub const CUmemPool_attribute_enum_CU_MEMPOOL_ATTR_USED_MEM_CURRENT: CUmemPool_attribute_enum = 7;
pub const CUmemPool_attribute_enum_CU_MEMPOOL_ATTR_USED_MEM_HIGH: CUmemPool_attribute_enum = 8;
pub type CUmemPool_attribute_enum = ::std::os::raw::c_uint;
pub use self::CUmemPool_attribute_enum as CUmemPool_attribute;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUmemPoolProps_st {
	pub allocType: CUmemAllocationType,
	pub handleTypes: CUmemAllocationHandleType,
	pub location: CUmemLocation,
	pub win32SecurityAttributes: *mut ::std::os::raw::c_void,
	pub reserved: [::std::os::raw::c_uchar; 64usize],
}
#[test]
fn bindgen_test_layout_CUmemPoolProps_st() {
	assert_eq!(
		::std::mem::size_of::<CUmemPoolProps_st>(),
		88usize,
		concat!("Size of: ", stringify!(CUmemPoolProps_st))
	);
	assert_eq!(
		::std::mem::align_of::<CUmemPoolProps_st>(),
		8usize,
		concat!("Alignment of ", stringify!(CUmemPoolProps_st))
	);
	fn test_field_allocType() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUmemPoolProps_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).allocType) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUmemPoolProps_st),
				"::",
				stringify!(allocType)
			)
		);
	}
	test_field_allocType();
	fn test_field_handleTypes() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUmemPoolProps_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).handleTypes) as usize - ptr as usize
			},
			4usize,
			concat!(
				"Offset of field: ",
				stringify!(CUmemPoolProps_st),
				"::",
				stringify!(handleTypes)
			)
		);
	}
	test_field_handleTypes();
	fn test_field_location() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUmemPoolProps_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).location) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(CUmemPoolProps_st),
				"::",
				stringify!(location)
			)
		);
	}
	test_field_location();
	fn test_field_win32SecurityAttributes() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUmemPoolProps_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).win32SecurityAttributes) as usize - ptr as usize
			},
			16usize,
			concat!(
				"Offset of field: ",
				stringify!(CUmemPoolProps_st),
				"::",
				stringify!(win32SecurityAttributes)
			)
		);
	}
	test_field_win32SecurityAttributes();
	fn test_field_reserved() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUmemPoolProps_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
			},
			24usize,
			concat!(
				"Offset of field: ",
				stringify!(CUmemPoolProps_st),
				"::",
				stringify!(reserved)
			)
		);
	}
	test_field_reserved();
}
pub type CUmemPoolProps_v1 = CUmemPoolProps_st;
pub type CUmemPoolProps = CUmemPoolProps_v1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUmemPoolPtrExportData_st {
	pub reserved: [::std::os::raw::c_uchar; 64usize],
}
#[test]
fn bindgen_test_layout_CUmemPoolPtrExportData_st() {
	assert_eq!(
		::std::mem::size_of::<CUmemPoolPtrExportData_st>(),
		64usize,
		concat!("Size of: ", stringify!(CUmemPoolPtrExportData_st))
	);
	assert_eq!(
		::std::mem::align_of::<CUmemPoolPtrExportData_st>(),
		1usize,
		concat!("Alignment of ", stringify!(CUmemPoolPtrExportData_st))
	);
	fn test_field_reserved() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUmemPoolPtrExportData_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUmemPoolPtrExportData_st),
				"::",
				stringify!(reserved)
			)
		);
	}
	test_field_reserved();
}
pub type CUmemPoolPtrExportData_v1 = CUmemPoolPtrExportData_st;
pub type CUmemPoolPtrExportData = CUmemPoolPtrExportData_v1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUDA_MEM_ALLOC_NODE_PARAMS_st {
	pub poolProps: CUmemPoolProps,
	pub accessDescs: *const CUmemAccessDesc,
	pub accessDescCount: size_t,
	pub bytesize: size_t,
	pub dptr: CUdeviceptr,
}
#[test]
fn bindgen_test_layout_CUDA_MEM_ALLOC_NODE_PARAMS_st() {
	assert_eq!(
		::std::mem::size_of::<CUDA_MEM_ALLOC_NODE_PARAMS_st>(),
		120usize,
		concat!("Size of: ", stringify!(CUDA_MEM_ALLOC_NODE_PARAMS_st))
	);
	assert_eq!(
		::std::mem::align_of::<CUDA_MEM_ALLOC_NODE_PARAMS_st>(),
		8usize,
		concat!("Alignment of ", stringify!(CUDA_MEM_ALLOC_NODE_PARAMS_st))
	);
	fn test_field_poolProps() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEM_ALLOC_NODE_PARAMS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).poolProps) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEM_ALLOC_NODE_PARAMS_st),
				"::",
				stringify!(poolProps)
			)
		);
	}
	test_field_poolProps();
	fn test_field_accessDescs() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEM_ALLOC_NODE_PARAMS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).accessDescs) as usize - ptr as usize
			},
			88usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEM_ALLOC_NODE_PARAMS_st),
				"::",
				stringify!(accessDescs)
			)
		);
	}
	test_field_accessDescs();
	fn test_field_accessDescCount() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEM_ALLOC_NODE_PARAMS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).accessDescCount) as usize - ptr as usize
			},
			96usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEM_ALLOC_NODE_PARAMS_st),
				"::",
				stringify!(accessDescCount)
			)
		);
	}
	test_field_accessDescCount();
	fn test_field_bytesize() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEM_ALLOC_NODE_PARAMS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).bytesize) as usize - ptr as usize
			},
			104usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEM_ALLOC_NODE_PARAMS_st),
				"::",
				stringify!(bytesize)
			)
		);
	}
	test_field_bytesize();
	fn test_field_dptr() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<CUDA_MEM_ALLOC_NODE_PARAMS_st>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).dptr) as usize - ptr as usize
			},
			112usize,
			concat!(
				"Offset of field: ",
				stringify!(CUDA_MEM_ALLOC_NODE_PARAMS_st),
				"::",
				stringify!(dptr)
			)
		);
	}
	test_field_dptr();
}
pub type CUDA_MEM_ALLOC_NODE_PARAMS = CUDA_MEM_ALLOC_NODE_PARAMS_st;
pub const CUgraphMem_attribute_enum_CU_GRAPH_MEM_ATTR_USED_MEM_CURRENT: CUgraphMem_attribute_enum = 0;
pub const CUgraphMem_attribute_enum_CU_GRAPH_MEM_ATTR_USED_MEM_HIGH: CUgraphMem_attribute_enum = 1;
pub const CUgraphMem_attribute_enum_CU_GRAPH_MEM_ATTR_RESERVED_MEM_CURRENT: CUgraphMem_attribute_enum = 2;
pub const CUgraphMem_attribute_enum_CU_GRAPH_MEM_ATTR_RESERVED_MEM_HIGH: CUgraphMem_attribute_enum = 3;
pub type CUgraphMem_attribute_enum = ::std::os::raw::c_uint;
pub use self::CUgraphMem_attribute_enum as CUgraphMem_attribute;
pub const CUflushGPUDirectRDMAWritesOptions_enum_CU_FLUSH_GPU_DIRECT_RDMA_WRITES_OPTION_HOST:
	CUflushGPUDirectRDMAWritesOptions_enum = 1;
pub const CUflushGPUDirectRDMAWritesOptions_enum_CU_FLUSH_GPU_DIRECT_RDMA_WRITES_OPTION_MEMOPS:
	CUflushGPUDirectRDMAWritesOptions_enum = 2;
pub type CUflushGPUDirectRDMAWritesOptions_enum = ::std::os::raw::c_uint;
pub use self::CUflushGPUDirectRDMAWritesOptions_enum as CUflushGPUDirectRDMAWritesOptions;
pub const CUGPUDirectRDMAWritesOrdering_enum_CU_GPU_DIRECT_RDMA_WRITES_ORDERING_NONE:
	CUGPUDirectRDMAWritesOrdering_enum = 0;
pub const CUGPUDirectRDMAWritesOrdering_enum_CU_GPU_DIRECT_RDMA_WRITES_ORDERING_OWNER:
	CUGPUDirectRDMAWritesOrdering_enum = 100;
pub const CUGPUDirectRDMAWritesOrdering_enum_CU_GPU_DIRECT_RDMA_WRITES_ORDERING_ALL_DEVICES:
	CUGPUDirectRDMAWritesOrdering_enum = 200;
pub type CUGPUDirectRDMAWritesOrdering_enum = ::std::os::raw::c_uint;
pub use self::CUGPUDirectRDMAWritesOrdering_enum as CUGPUDirectRDMAWritesOrdering;
pub const CUflushGPUDirectRDMAWritesScope_enum_CU_FLUSH_GPU_DIRECT_RDMA_WRITES_TO_OWNER:
	CUflushGPUDirectRDMAWritesScope_enum = 100;
pub const CUflushGPUDirectRDMAWritesScope_enum_CU_FLUSH_GPU_DIRECT_RDMA_WRITES_TO_ALL_DEVICES:
	CUflushGPUDirectRDMAWritesScope_enum = 200;
pub type CUflushGPUDirectRDMAWritesScope_enum = ::std::os::raw::c_uint;
pub use self::CUflushGPUDirectRDMAWritesScope_enum as CUflushGPUDirectRDMAWritesScope;
pub const CUflushGPUDirectRDMAWritesTarget_enum_CU_FLUSH_GPU_DIRECT_RDMA_WRITES_TARGET_CURRENT_CTX:
	CUflushGPUDirectRDMAWritesTarget_enum = 0;
pub type CUflushGPUDirectRDMAWritesTarget_enum = ::std::os::raw::c_uint;
pub use self::CUflushGPUDirectRDMAWritesTarget_enum as CUflushGPUDirectRDMAWritesTarget;
pub const CUgraphDebugDot_flags_enum_CU_GRAPH_DEBUG_DOT_FLAGS_VERBOSE: CUgraphDebugDot_flags_enum = 1;
pub const CUgraphDebugDot_flags_enum_CU_GRAPH_DEBUG_DOT_FLAGS_RUNTIME_TYPES: CUgraphDebugDot_flags_enum = 2;
pub const CUgraphDebugDot_flags_enum_CU_GRAPH_DEBUG_DOT_FLAGS_KERNEL_NODE_PARAMS: CUgraphDebugDot_flags_enum = 4;
pub const CUgraphDebugDot_flags_enum_CU_GRAPH_DEBUG_DOT_FLAGS_MEMCPY_NODE_PARAMS: CUgraphDebugDot_flags_enum = 8;
pub const CUgraphDebugDot_flags_enum_CU_GRAPH_DEBUG_DOT_FLAGS_MEMSET_NODE_PARAMS: CUgraphDebugDot_flags_enum = 16;
pub const CUgraphDebugDot_flags_enum_CU_GRAPH_DEBUG_DOT_FLAGS_HOST_NODE_PARAMS: CUgraphDebugDot_flags_enum = 32;
pub const CUgraphDebugDot_flags_enum_CU_GRAPH_DEBUG_DOT_FLAGS_EVENT_NODE_PARAMS: CUgraphDebugDot_flags_enum = 64;
pub const CUgraphDebugDot_flags_enum_CU_GRAPH_DEBUG_DOT_FLAGS_EXT_SEMAS_SIGNAL_NODE_PARAMS: CUgraphDebugDot_flags_enum =
	128;
pub const CUgraphDebugDot_flags_enum_CU_GRAPH_DEBUG_DOT_FLAGS_EXT_SEMAS_WAIT_NODE_PARAMS: CUgraphDebugDot_flags_enum =
	256;
pub const CUgraphDebugDot_flags_enum_CU_GRAPH_DEBUG_DOT_FLAGS_KERNEL_NODE_ATTRIBUTES: CUgraphDebugDot_flags_enum = 512;
pub const CUgraphDebugDot_flags_enum_CU_GRAPH_DEBUG_DOT_FLAGS_HANDLES: CUgraphDebugDot_flags_enum = 1024;
pub const CUgraphDebugDot_flags_enum_CU_GRAPH_DEBUG_DOT_FLAGS_MEM_ALLOC_NODE_PARAMS: CUgraphDebugDot_flags_enum = 2048;
pub const CUgraphDebugDot_flags_enum_CU_GRAPH_DEBUG_DOT_FLAGS_MEM_FREE_NODE_PARAMS: CUgraphDebugDot_flags_enum = 4096;
pub const CUgraphDebugDot_flags_enum_CU_GRAPH_DEBUG_DOT_FLAGS_BATCH_MEM_OP_NODE_PARAMS: CUgraphDebugDot_flags_enum =
	8192;
pub type CUgraphDebugDot_flags_enum = ::std::os::raw::c_uint;
pub use self::CUgraphDebugDot_flags_enum as CUgraphDebugDot_flags;
pub const CUuserObject_flags_enum_CU_USER_OBJECT_NO_DESTRUCTOR_SYNC: CUuserObject_flags_enum = 1;
pub type CUuserObject_flags_enum = ::std::os::raw::c_uint;
pub use self::CUuserObject_flags_enum as CUuserObject_flags;
pub const CUuserObjectRetain_flags_enum_CU_GRAPH_USER_OBJECT_MOVE: CUuserObjectRetain_flags_enum = 1;
pub type CUuserObjectRetain_flags_enum = ::std::os::raw::c_uint;
pub use self::CUuserObjectRetain_flags_enum as CUuserObjectRetain_flags;
pub const CUgraphInstantiate_flags_enum_CUDA_GRAPH_INSTANTIATE_FLAG_AUTO_FREE_ON_LAUNCH: CUgraphInstantiate_flags_enum =
	1;
pub const CUgraphInstantiate_flags_enum_CUDA_GRAPH_INSTANTIATE_FLAG_USE_NODE_PRIORITY: CUgraphInstantiate_flags_enum =
	8;
pub type CUgraphInstantiate_flags_enum = ::std::os::raw::c_uint;
pub use self::CUgraphInstantiate_flags_enum as CUgraphInstantiate_flags;
extern "C" {
	pub fn cuGetErrorString(error: CUresult, pStr: *mut *const ::std::os::raw::c_char) -> CUresult;
}
extern "C" {
	pub fn cuGetErrorName(error: CUresult, pStr: *mut *const ::std::os::raw::c_char) -> CUresult;
}
extern "C" {
	pub fn cuInit(Flags: ::std::os::raw::c_uint) -> CUresult;
}
extern "C" {
	pub fn cuDriverGetVersion(driverVersion: *mut ::std::os::raw::c_int) -> CUresult;
}
extern "C" {
	pub fn cuDeviceGet(device: *mut CUdevice, ordinal: ::std::os::raw::c_int) -> CUresult;
}
extern "C" {
	pub fn cuDeviceGetCount(count: *mut ::std::os::raw::c_int) -> CUresult;
}
extern "C" {
	pub fn cuDeviceGetName(name: *mut ::std::os::raw::c_char, len: ::std::os::raw::c_int, dev: CUdevice) -> CUresult;
}
extern "C" {
	pub fn cuDeviceGetUuid(uuid: *mut CUuuid, dev: CUdevice) -> CUresult;
}
extern "C" {
	pub fn cuDeviceGetUuid_v2(uuid: *mut CUuuid, dev: CUdevice) -> CUresult;
}
extern "C" {
	pub fn cuDeviceGetLuid(
		luid: *mut ::std::os::raw::c_char,
		deviceNodeMask: *mut ::std::os::raw::c_uint,
		dev: CUdevice,
	) -> CUresult;
}
extern "C" {
	pub fn cuDeviceTotalMem_v2(bytes: *mut size_t, dev: CUdevice) -> CUresult;
}
extern "C" {
	pub fn cuDeviceGetTexture1DLinearMaxWidth(
		maxWidthInElements: *mut size_t,
		format: CUarray_format,
		numChannels: ::std::os::raw::c_uint,
		dev: CUdevice,
	) -> CUresult;
}
extern "C" {
	pub fn cuDeviceGetAttribute(pi: *mut ::std::os::raw::c_int, attrib: CUdevice_attribute, dev: CUdevice) -> CUresult;
}
extern "C" {
	pub fn cuDeviceGetNvSciSyncAttributes(
		nvSciSyncAttrList: *mut ::std::os::raw::c_void,
		dev: CUdevice,
		flags: ::std::os::raw::c_int,
	) -> CUresult;
}
extern "C" {
	pub fn cuDeviceSetMemPool(dev: CUdevice, pool: CUmemoryPool) -> CUresult;
}
extern "C" {
	pub fn cuDeviceGetMemPool(pool: *mut CUmemoryPool, dev: CUdevice) -> CUresult;
}
extern "C" {
	pub fn cuDeviceGetDefaultMemPool(pool_out: *mut CUmemoryPool, dev: CUdevice) -> CUresult;
}
extern "C" {
	pub fn cuFlushGPUDirectRDMAWrites(
		target: CUflushGPUDirectRDMAWritesTarget,
		scope: CUflushGPUDirectRDMAWritesScope,
	) -> CUresult;
}
extern "C" {
	pub fn cuDeviceGetProperties(prop: *mut CUdevprop, dev: CUdevice) -> CUresult;
}
extern "C" {
	pub fn cuDeviceComputeCapability(
		major: *mut ::std::os::raw::c_int,
		minor: *mut ::std::os::raw::c_int,
		dev: CUdevice,
	) -> CUresult;
}
extern "C" {
	pub fn cuDevicePrimaryCtxRetain(pctx: *mut CUcontext, dev: CUdevice) -> CUresult;
}
extern "C" {
	pub fn cuDevicePrimaryCtxRelease_v2(dev: CUdevice) -> CUresult;
}
extern "C" {
	pub fn cuDevicePrimaryCtxSetFlags_v2(dev: CUdevice, flags: ::std::os::raw::c_uint) -> CUresult;
}
extern "C" {
	pub fn cuDevicePrimaryCtxGetState(
		dev: CUdevice,
		flags: *mut ::std::os::raw::c_uint,
		active: *mut ::std::os::raw::c_int,
	) -> CUresult;
}
extern "C" {
	pub fn cuDevicePrimaryCtxReset_v2(dev: CUdevice) -> CUresult;
}
extern "C" {
	pub fn cuDeviceGetExecAffinitySupport(
		pi: *mut ::std::os::raw::c_int,
		type_: CUexecAffinityType,
		dev: CUdevice,
	) -> CUresult;
}
extern "C" {
	pub fn cuCtxCreate_v2(pctx: *mut CUcontext, flags: ::std::os::raw::c_uint, dev: CUdevice) -> CUresult;
}
extern "C" {
	pub fn cuCtxCreate_v3(
		pctx: *mut CUcontext,
		paramsArray: *mut CUexecAffinityParam,
		numParams: ::std::os::raw::c_int,
		flags: ::std::os::raw::c_uint,
		dev: CUdevice,
	) -> CUresult;
}
extern "C" {
	pub fn cuCtxDestroy_v2(ctx: CUcontext) -> CUresult;
}
extern "C" {
	pub fn cuCtxPushCurrent_v2(ctx: CUcontext) -> CUresult;
}
extern "C" {
	pub fn cuCtxPopCurrent_v2(pctx: *mut CUcontext) -> CUresult;
}
extern "C" {
	pub fn cuCtxSetCurrent(ctx: CUcontext) -> CUresult;
}
extern "C" {
	pub fn cuCtxGetCurrent(pctx: *mut CUcontext) -> CUresult;
}
extern "C" {
	pub fn cuCtxGetDevice(device: *mut CUdevice) -> CUresult;
}
extern "C" {
	pub fn cuCtxGetFlags(flags: *mut ::std::os::raw::c_uint) -> CUresult;
}
extern "C" {
	pub fn cuCtxSynchronize() -> CUresult;
}
extern "C" {
	pub fn cuCtxSetLimit(limit: CUlimit, value: size_t) -> CUresult;
}
extern "C" {
	pub fn cuCtxGetLimit(pvalue: *mut size_t, limit: CUlimit) -> CUresult;
}
extern "C" {
	pub fn cuCtxGetCacheConfig(pconfig: *mut CUfunc_cache) -> CUresult;
}
extern "C" {
	pub fn cuCtxSetCacheConfig(config: CUfunc_cache) -> CUresult;
}
extern "C" {
	pub fn cuCtxGetSharedMemConfig(pConfig: *mut CUsharedconfig) -> CUresult;
}
extern "C" {
	pub fn cuCtxSetSharedMemConfig(config: CUsharedconfig) -> CUresult;
}
extern "C" {
	pub fn cuCtxGetApiVersion(ctx: CUcontext, version: *mut ::std::os::raw::c_uint) -> CUresult;
}
extern "C" {
	pub fn cuCtxGetStreamPriorityRange(
		leastPriority: *mut ::std::os::raw::c_int,
		greatestPriority: *mut ::std::os::raw::c_int,
	) -> CUresult;
}
extern "C" {
	pub fn cuCtxResetPersistingL2Cache() -> CUresult;
}
extern "C" {
	pub fn cuCtxGetExecAffinity(pExecAffinity: *mut CUexecAffinityParam, type_: CUexecAffinityType) -> CUresult;
}
extern "C" {
	pub fn cuCtxAttach(pctx: *mut CUcontext, flags: ::std::os::raw::c_uint) -> CUresult;
}
extern "C" {
	pub fn cuCtxDetach(ctx: CUcontext) -> CUresult;
}
extern "C" {
	pub fn cuModuleLoad(module: *mut CUmodule, fname: *const ::std::os::raw::c_char) -> CUresult;
}
extern "C" {
	pub fn cuModuleLoadData(module: *mut CUmodule, image: *const ::std::os::raw::c_void) -> CUresult;
}
extern "C" {
	pub fn cuModuleLoadDataEx(
		module: *mut CUmodule,
		image: *const ::std::os::raw::c_void,
		numOptions: ::std::os::raw::c_uint,
		options: *mut CUjit_option,
		optionValues: *mut *mut ::std::os::raw::c_void,
	) -> CUresult;
}
extern "C" {
	pub fn cuModuleLoadFatBinary(module: *mut CUmodule, fatCubin: *const ::std::os::raw::c_void) -> CUresult;
}
extern "C" {
	pub fn cuModuleUnload(hmod: CUmodule) -> CUresult;
}
pub const CUmoduleLoadingMode_enum_CU_MODULE_EAGER_LOADING: CUmoduleLoadingMode_enum = 1;
pub const CUmoduleLoadingMode_enum_CU_MODULE_LAZY_LOADING: CUmoduleLoadingMode_enum = 2;
pub type CUmoduleLoadingMode_enum = ::std::os::raw::c_uint;
pub use self::CUmoduleLoadingMode_enum as CUmoduleLoadingMode;
extern "C" {
	pub fn cuModuleGetLoadingMode(mode: *mut CUmoduleLoadingMode) -> CUresult;
}
extern "C" {
	pub fn cuModuleGetFunction(hfunc: *mut CUfunction, hmod: CUmodule, name: *const ::std::os::raw::c_char)
		-> CUresult;
}
extern "C" {
	pub fn cuModuleGetGlobal_v2(
		dptr: *mut CUdeviceptr,
		bytes: *mut size_t,
		hmod: CUmodule,
		name: *const ::std::os::raw::c_char,
	) -> CUresult;
}
extern "C" {
	pub fn cuModuleGetTexRef(pTexRef: *mut CUtexref, hmod: CUmodule, name: *const ::std::os::raw::c_char) -> CUresult;
}
extern "C" {
	pub fn cuModuleGetSurfRef(
		pSurfRef: *mut CUsurfref,
		hmod: CUmodule,
		name: *const ::std::os::raw::c_char,
	) -> CUresult;
}
extern "C" {
	pub fn cuLinkCreate_v2(
		numOptions: ::std::os::raw::c_uint,
		options: *mut CUjit_option,
		optionValues: *mut *mut ::std::os::raw::c_void,
		stateOut: *mut CUlinkState,
	) -> CUresult;
}
extern "C" {
	pub fn cuLinkAddData_v2(
		state: CUlinkState,
		type_: CUjitInputType,
		data: *mut ::std::os::raw::c_void,
		size: size_t,
		name: *const ::std::os::raw::c_char,
		numOptions: ::std::os::raw::c_uint,
		options: *mut CUjit_option,
		optionValues: *mut *mut ::std::os::raw::c_void,
	) -> CUresult;
}
extern "C" {
	pub fn cuLinkAddFile_v2(
		state: CUlinkState,
		type_: CUjitInputType,
		path: *const ::std::os::raw::c_char,
		numOptions: ::std::os::raw::c_uint,
		options: *mut CUjit_option,
		optionValues: *mut *mut ::std::os::raw::c_void,
	) -> CUresult;
}
extern "C" {
	pub fn cuLinkComplete(
		state: CUlinkState,
		cubinOut: *mut *mut ::std::os::raw::c_void,
		sizeOut: *mut size_t,
	) -> CUresult;
}
extern "C" {
	pub fn cuLinkDestroy(state: CUlinkState) -> CUresult;
}
extern "C" {
	pub fn cuMemGetInfo_v2(free: *mut size_t, total: *mut size_t) -> CUresult;
}
extern "C" {
	pub fn cuMemAlloc_v2(dptr: *mut CUdeviceptr, bytesize: size_t) -> CUresult;
}
extern "C" {
	pub fn cuMemAllocPitch_v2(
		dptr: *mut CUdeviceptr,
		pPitch: *mut size_t,
		WidthInBytes: size_t,
		Height: size_t,
		ElementSizeBytes: ::std::os::raw::c_uint,
	) -> CUresult;
}
extern "C" {
	pub fn cuMemFree_v2(dptr: CUdeviceptr) -> CUresult;
}
extern "C" {
	pub fn cuMemGetAddressRange_v2(pbase: *mut CUdeviceptr, psize: *mut size_t, dptr: CUdeviceptr) -> CUresult;
}
extern "C" {
	pub fn cuMemAllocHost_v2(pp: *mut *mut ::std::os::raw::c_void, bytesize: size_t) -> CUresult;
}
extern "C" {
	pub fn cuMemFreeHost(p: *mut ::std::os::raw::c_void) -> CUresult;
}
extern "C" {
	pub fn cuMemHostAlloc(
		pp: *mut *mut ::std::os::raw::c_void,
		bytesize: size_t,
		Flags: ::std::os::raw::c_uint,
	) -> CUresult;
}
extern "C" {
	pub fn cuMemHostGetDevicePointer_v2(
		pdptr: *mut CUdeviceptr,
		p: *mut ::std::os::raw::c_void,
		Flags: ::std::os::raw::c_uint,
	) -> CUresult;
}
extern "C" {
	pub fn cuMemHostGetFlags(pFlags: *mut ::std::os::raw::c_uint, p: *mut ::std::os::raw::c_void) -> CUresult;
}
extern "C" {
	pub fn cuMemAllocManaged(dptr: *mut CUdeviceptr, bytesize: size_t, flags: ::std::os::raw::c_uint) -> CUresult;
}
extern "C" {
	pub fn cuDeviceGetByPCIBusId(dev: *mut CUdevice, pciBusId: *const ::std::os::raw::c_char) -> CUresult;
}
extern "C" {
	pub fn cuDeviceGetPCIBusId(
		pciBusId: *mut ::std::os::raw::c_char,
		len: ::std::os::raw::c_int,
		dev: CUdevice,
	) -> CUresult;
}
extern "C" {
	pub fn cuIpcGetEventHandle(pHandle: *mut CUipcEventHandle, event: CUevent) -> CUresult;
}
extern "C" {
	pub fn cuIpcOpenEventHandle(phEvent: *mut CUevent, handle: CUipcEventHandle) -> CUresult;
}
extern "C" {
	pub fn cuIpcGetMemHandle(pHandle: *mut CUipcMemHandle, dptr: CUdeviceptr) -> CUresult;
}
extern "C" {
	pub fn cuIpcOpenMemHandle_v2(
		pdptr: *mut CUdeviceptr,
		handle: CUipcMemHandle,
		Flags: ::std::os::raw::c_uint,
	) -> CUresult;
}
extern "C" {
	pub fn cuIpcCloseMemHandle(dptr: CUdeviceptr) -> CUresult;
}
extern "C" {
	pub fn cuMemHostRegister_v2(
		p: *mut ::std::os::raw::c_void,
		bytesize: size_t,
		Flags: ::std::os::raw::c_uint,
	) -> CUresult;
}
extern "C" {
	pub fn cuMemHostUnregister(p: *mut ::std::os::raw::c_void) -> CUresult;
}
extern "C" {
	pub fn cuMemcpy(dst: CUdeviceptr, src: CUdeviceptr, ByteCount: size_t) -> CUresult;
}
extern "C" {
	pub fn cuMemcpyPeer(
		dstDevice: CUdeviceptr,
		dstContext: CUcontext,
		srcDevice: CUdeviceptr,
		srcContext: CUcontext,
		ByteCount: size_t,
	) -> CUresult;
}
extern "C" {
	pub fn cuMemcpyHtoD_v2(
		dstDevice: CUdeviceptr,
		srcHost: *const ::std::os::raw::c_void,
		ByteCount: size_t,
	) -> CUresult;
}
extern "C" {
	pub fn cuMemcpyDtoH_v2(dstHost: *mut ::std::os::raw::c_void, srcDevice: CUdeviceptr, ByteCount: size_t)
		-> CUresult;
}
extern "C" {
	pub fn cuMemcpyDtoD_v2(dstDevice: CUdeviceptr, srcDevice: CUdeviceptr, ByteCount: size_t) -> CUresult;
}
extern "C" {
	pub fn cuMemcpyDtoA_v2(dstArray: CUarray, dstOffset: size_t, srcDevice: CUdeviceptr, ByteCount: size_t)
		-> CUresult;
}
extern "C" {
	pub fn cuMemcpyAtoD_v2(dstDevice: CUdeviceptr, srcArray: CUarray, srcOffset: size_t, ByteCount: size_t)
		-> CUresult;
}
extern "C" {
	pub fn cuMemcpyHtoA_v2(
		dstArray: CUarray,
		dstOffset: size_t,
		srcHost: *const ::std::os::raw::c_void,
		ByteCount: size_t,
	) -> CUresult;
}
extern "C" {
	pub fn cuMemcpyAtoH_v2(
		dstHost: *mut ::std::os::raw::c_void,
		srcArray: CUarray,
		srcOffset: size_t,
		ByteCount: size_t,
	) -> CUresult;
}
extern "C" {
	pub fn cuMemcpyAtoA_v2(
		dstArray: CUarray,
		dstOffset: size_t,
		srcArray: CUarray,
		srcOffset: size_t,
		ByteCount: size_t,
	) -> CUresult;
}
extern "C" {
	pub fn cuMemcpy2D_v2(pCopy: *const CUDA_MEMCPY2D) -> CUresult;
}
extern "C" {
	pub fn cuMemcpy2DUnaligned_v2(pCopy: *const CUDA_MEMCPY2D) -> CUresult;
}
extern "C" {
	pub fn cuMemcpy3D_v2(pCopy: *const CUDA_MEMCPY3D) -> CUresult;
}
extern "C" {
	pub fn cuMemcpy3DPeer(pCopy: *const CUDA_MEMCPY3D_PEER) -> CUresult;
}
extern "C" {
	pub fn cuMemcpyAsync(dst: CUdeviceptr, src: CUdeviceptr, ByteCount: size_t, hStream: CUstream) -> CUresult;
}
extern "C" {
	pub fn cuMemcpyPeerAsync(
		dstDevice: CUdeviceptr,
		dstContext: CUcontext,
		srcDevice: CUdeviceptr,
		srcContext: CUcontext,
		ByteCount: size_t,
		hStream: CUstream,
	) -> CUresult;
}
extern "C" {
	pub fn cuMemcpyHtoDAsync_v2(
		dstDevice: CUdeviceptr,
		srcHost: *const ::std::os::raw::c_void,
		ByteCount: size_t,
		hStream: CUstream,
	) -> CUresult;
}
extern "C" {
	pub fn cuMemcpyDtoHAsync_v2(
		dstHost: *mut ::std::os::raw::c_void,
		srcDevice: CUdeviceptr,
		ByteCount: size_t,
		hStream: CUstream,
	) -> CUresult;
}
extern "C" {
	pub fn cuMemcpyDtoDAsync_v2(
		dstDevice: CUdeviceptr,
		srcDevice: CUdeviceptr,
		ByteCount: size_t,
		hStream: CUstream,
	) -> CUresult;
}
extern "C" {
	pub fn cuMemcpyHtoAAsync_v2(
		dstArray: CUarray,
		dstOffset: size_t,
		srcHost: *const ::std::os::raw::c_void,
		ByteCount: size_t,
		hStream: CUstream,
	) -> CUresult;
}
extern "C" {
	pub fn cuMemcpyAtoHAsync_v2(
		dstHost: *mut ::std::os::raw::c_void,
		srcArray: CUarray,
		srcOffset: size_t,
		ByteCount: size_t,
		hStream: CUstream,
	) -> CUresult;
}
extern "C" {
	pub fn cuMemcpy2DAsync_v2(pCopy: *const CUDA_MEMCPY2D, hStream: CUstream) -> CUresult;
}
extern "C" {
	pub fn cuMemcpy3DAsync_v2(pCopy: *const CUDA_MEMCPY3D, hStream: CUstream) -> CUresult;
}
extern "C" {
	pub fn cuMemcpy3DPeerAsync(pCopy: *const CUDA_MEMCPY3D_PEER, hStream: CUstream) -> CUresult;
}
extern "C" {
	pub fn cuMemsetD8_v2(dstDevice: CUdeviceptr, uc: ::std::os::raw::c_uchar, N: size_t) -> CUresult;
}
extern "C" {
	pub fn cuMemsetD16_v2(dstDevice: CUdeviceptr, us: ::std::os::raw::c_ushort, N: size_t) -> CUresult;
}
extern "C" {
	pub fn cuMemsetD32_v2(dstDevice: CUdeviceptr, ui: ::std::os::raw::c_uint, N: size_t) -> CUresult;
}
extern "C" {
	pub fn cuMemsetD2D8_v2(
		dstDevice: CUdeviceptr,
		dstPitch: size_t,
		uc: ::std::os::raw::c_uchar,
		Width: size_t,
		Height: size_t,
	) -> CUresult;
}
extern "C" {
	pub fn cuMemsetD2D16_v2(
		dstDevice: CUdeviceptr,
		dstPitch: size_t,
		us: ::std::os::raw::c_ushort,
		Width: size_t,
		Height: size_t,
	) -> CUresult;
}
extern "C" {
	pub fn cuMemsetD2D32_v2(
		dstDevice: CUdeviceptr,
		dstPitch: size_t,
		ui: ::std::os::raw::c_uint,
		Width: size_t,
		Height: size_t,
	) -> CUresult;
}
extern "C" {
	pub fn cuMemsetD8Async(
		dstDevice: CUdeviceptr,
		uc: ::std::os::raw::c_uchar,
		N: size_t,
		hStream: CUstream,
	) -> CUresult;
}
extern "C" {
	pub fn cuMemsetD16Async(
		dstDevice: CUdeviceptr,
		us: ::std::os::raw::c_ushort,
		N: size_t,
		hStream: CUstream,
	) -> CUresult;
}
extern "C" {
	pub fn cuMemsetD32Async(
		dstDevice: CUdeviceptr,
		ui: ::std::os::raw::c_uint,
		N: size_t,
		hStream: CUstream,
	) -> CUresult;
}
extern "C" {
	pub fn cuMemsetD2D8Async(
		dstDevice: CUdeviceptr,
		dstPitch: size_t,
		uc: ::std::os::raw::c_uchar,
		Width: size_t,
		Height: size_t,
		hStream: CUstream,
	) -> CUresult;
}
extern "C" {
	pub fn cuMemsetD2D16Async(
		dstDevice: CUdeviceptr,
		dstPitch: size_t,
		us: ::std::os::raw::c_ushort,
		Width: size_t,
		Height: size_t,
		hStream: CUstream,
	) -> CUresult;
}
extern "C" {
	pub fn cuMemsetD2D32Async(
		dstDevice: CUdeviceptr,
		dstPitch: size_t,
		ui: ::std::os::raw::c_uint,
		Width: size_t,
		Height: size_t,
		hStream: CUstream,
	) -> CUresult;
}
extern "C" {
	pub fn cuArrayCreate_v2(pHandle: *mut CUarray, pAllocateArray: *const CUDA_ARRAY_DESCRIPTOR) -> CUresult;
}
extern "C" {
	pub fn cuArrayGetDescriptor_v2(pArrayDescriptor: *mut CUDA_ARRAY_DESCRIPTOR, hArray: CUarray) -> CUresult;
}
extern "C" {
	pub fn cuArrayGetSparseProperties(sparseProperties: *mut CUDA_ARRAY_SPARSE_PROPERTIES, array: CUarray) -> CUresult;
}
extern "C" {
	pub fn cuMipmappedArrayGetSparseProperties(
		sparseProperties: *mut CUDA_ARRAY_SPARSE_PROPERTIES,
		mipmap: CUmipmappedArray,
	) -> CUresult;
}
extern "C" {
	pub fn cuArrayGetMemoryRequirements(
		memoryRequirements: *mut CUDA_ARRAY_MEMORY_REQUIREMENTS,
		array: CUarray,
		device: CUdevice,
	) -> CUresult;
}
extern "C" {
	pub fn cuMipmappedArrayGetMemoryRequirements(
		memoryRequirements: *mut CUDA_ARRAY_MEMORY_REQUIREMENTS,
		mipmap: CUmipmappedArray,
		device: CUdevice,
	) -> CUresult;
}
extern "C" {
	pub fn cuArrayGetPlane(pPlaneArray: *mut CUarray, hArray: CUarray, planeIdx: ::std::os::raw::c_uint) -> CUresult;
}
extern "C" {
	pub fn cuArrayDestroy(hArray: CUarray) -> CUresult;
}
extern "C" {
	pub fn cuArray3DCreate_v2(pHandle: *mut CUarray, pAllocateArray: *const CUDA_ARRAY3D_DESCRIPTOR) -> CUresult;
}
extern "C" {
	pub fn cuArray3DGetDescriptor_v2(pArrayDescriptor: *mut CUDA_ARRAY3D_DESCRIPTOR, hArray: CUarray) -> CUresult;
}
extern "C" {
	pub fn cuMipmappedArrayCreate(
		pHandle: *mut CUmipmappedArray,
		pMipmappedArrayDesc: *const CUDA_ARRAY3D_DESCRIPTOR,
		numMipmapLevels: ::std::os::raw::c_uint,
	) -> CUresult;
}
extern "C" {
	pub fn cuMipmappedArrayGetLevel(
		pLevelArray: *mut CUarray,
		hMipmappedArray: CUmipmappedArray,
		level: ::std::os::raw::c_uint,
	) -> CUresult;
}
extern "C" {
	pub fn cuMipmappedArrayDestroy(hMipmappedArray: CUmipmappedArray) -> CUresult;
}
extern "C" {
	pub fn cuMemGetHandleForAddressRange(
		handle: *mut ::std::os::raw::c_void,
		dptr: CUdeviceptr,
		size: size_t,
		handleType: CUmemRangeHandleType,
		flags: ::std::os::raw::c_ulonglong,
	) -> CUresult;
}
extern "C" {
	pub fn cuMemAddressReserve(
		ptr: *mut CUdeviceptr,
		size: size_t,
		alignment: size_t,
		addr: CUdeviceptr,
		flags: ::std::os::raw::c_ulonglong,
	) -> CUresult;
}
extern "C" {
	pub fn cuMemAddressFree(ptr: CUdeviceptr, size: size_t) -> CUresult;
}
extern "C" {
	pub fn cuMemCreate(
		handle: *mut CUmemGenericAllocationHandle,
		size: size_t,
		prop: *const CUmemAllocationProp,
		flags: ::std::os::raw::c_ulonglong,
	) -> CUresult;
}
extern "C" {
	pub fn cuMemRelease(handle: CUmemGenericAllocationHandle) -> CUresult;
}
extern "C" {
	pub fn cuMemMap(
		ptr: CUdeviceptr,
		size: size_t,
		offset: size_t,
		handle: CUmemGenericAllocationHandle,
		flags: ::std::os::raw::c_ulonglong,
	) -> CUresult;
}
extern "C" {
	pub fn cuMemMapArrayAsync(
		mapInfoList: *mut CUarrayMapInfo,
		count: ::std::os::raw::c_uint,
		hStream: CUstream,
	) -> CUresult;
}
extern "C" {
	pub fn cuMemUnmap(ptr: CUdeviceptr, size: size_t) -> CUresult;
}
extern "C" {
	pub fn cuMemSetAccess(ptr: CUdeviceptr, size: size_t, desc: *const CUmemAccessDesc, count: size_t) -> CUresult;
}
extern "C" {
	pub fn cuMemGetAccess(
		flags: *mut ::std::os::raw::c_ulonglong,
		location: *const CUmemLocation,
		ptr: CUdeviceptr,
	) -> CUresult;
}
extern "C" {
	pub fn cuMemExportToShareableHandle(
		shareableHandle: *mut ::std::os::raw::c_void,
		handle: CUmemGenericAllocationHandle,
		handleType: CUmemAllocationHandleType,
		flags: ::std::os::raw::c_ulonglong,
	) -> CUresult;
}
extern "C" {
	pub fn cuMemImportFromShareableHandle(
		handle: *mut CUmemGenericAllocationHandle,
		osHandle: *mut ::std::os::raw::c_void,
		shHandleType: CUmemAllocationHandleType,
	) -> CUresult;
}
extern "C" {
	pub fn cuMemGetAllocationGranularity(
		granularity: *mut size_t,
		prop: *const CUmemAllocationProp,
		option: CUmemAllocationGranularity_flags,
	) -> CUresult;
}
extern "C" {
	pub fn cuMemGetAllocationPropertiesFromHandle(
		prop: *mut CUmemAllocationProp,
		handle: CUmemGenericAllocationHandle,
	) -> CUresult;
}
extern "C" {
	pub fn cuMemRetainAllocationHandle(
		handle: *mut CUmemGenericAllocationHandle,
		addr: *mut ::std::os::raw::c_void,
	) -> CUresult;
}
extern "C" {
	pub fn cuMemFreeAsync(dptr: CUdeviceptr, hStream: CUstream) -> CUresult;
}
extern "C" {
	pub fn cuMemAllocAsync(dptr: *mut CUdeviceptr, bytesize: size_t, hStream: CUstream) -> CUresult;
}
extern "C" {
	pub fn cuMemPoolTrimTo(pool: CUmemoryPool, minBytesToKeep: size_t) -> CUresult;
}
extern "C" {
	pub fn cuMemPoolSetAttribute(
		pool: CUmemoryPool,
		attr: CUmemPool_attribute,
		value: *mut ::std::os::raw::c_void,
	) -> CUresult;
}
extern "C" {
	pub fn cuMemPoolGetAttribute(
		pool: CUmemoryPool,
		attr: CUmemPool_attribute,
		value: *mut ::std::os::raw::c_void,
	) -> CUresult;
}
extern "C" {
	pub fn cuMemPoolSetAccess(pool: CUmemoryPool, map: *const CUmemAccessDesc, count: size_t) -> CUresult;
}
extern "C" {
	pub fn cuMemPoolGetAccess(
		flags: *mut CUmemAccess_flags,
		memPool: CUmemoryPool,
		location: *mut CUmemLocation,
	) -> CUresult;
}
extern "C" {
	pub fn cuMemPoolCreate(pool: *mut CUmemoryPool, poolProps: *const CUmemPoolProps) -> CUresult;
}
extern "C" {
	pub fn cuMemPoolDestroy(pool: CUmemoryPool) -> CUresult;
}
extern "C" {
	pub fn cuMemAllocFromPoolAsync(
		dptr: *mut CUdeviceptr,
		bytesize: size_t,
		pool: CUmemoryPool,
		hStream: CUstream,
	) -> CUresult;
}
extern "C" {
	pub fn cuMemPoolExportToShareableHandle(
		handle_out: *mut ::std::os::raw::c_void,
		pool: CUmemoryPool,
		handleType: CUmemAllocationHandleType,
		flags: ::std::os::raw::c_ulonglong,
	) -> CUresult;
}
extern "C" {
	pub fn cuMemPoolImportFromShareableHandle(
		pool_out: *mut CUmemoryPool,
		handle: *mut ::std::os::raw::c_void,
		handleType: CUmemAllocationHandleType,
		flags: ::std::os::raw::c_ulonglong,
	) -> CUresult;
}
extern "C" {
	pub fn cuMemPoolExportPointer(shareData_out: *mut CUmemPoolPtrExportData, ptr: CUdeviceptr) -> CUresult;
}
extern "C" {
	pub fn cuMemPoolImportPointer(
		ptr_out: *mut CUdeviceptr,
		pool: CUmemoryPool,
		shareData: *mut CUmemPoolPtrExportData,
	) -> CUresult;
}
extern "C" {
	pub fn cuPointerGetAttribute(
		data: *mut ::std::os::raw::c_void,
		attribute: CUpointer_attribute,
		ptr: CUdeviceptr,
	) -> CUresult;
}
extern "C" {
	pub fn cuMemPrefetchAsync(devPtr: CUdeviceptr, count: size_t, dstDevice: CUdevice, hStream: CUstream) -> CUresult;
}
extern "C" {
	pub fn cuMemAdvise(devPtr: CUdeviceptr, count: size_t, advice: CUmem_advise, device: CUdevice) -> CUresult;
}
extern "C" {
	pub fn cuMemRangeGetAttribute(
		data: *mut ::std::os::raw::c_void,
		dataSize: size_t,
		attribute: CUmem_range_attribute,
		devPtr: CUdeviceptr,
		count: size_t,
	) -> CUresult;
}
extern "C" {
	pub fn cuMemRangeGetAttributes(
		data: *mut *mut ::std::os::raw::c_void,
		dataSizes: *mut size_t,
		attributes: *mut CUmem_range_attribute,
		numAttributes: size_t,
		devPtr: CUdeviceptr,
		count: size_t,
	) -> CUresult;
}
extern "C" {
	pub fn cuPointerSetAttribute(
		value: *const ::std::os::raw::c_void,
		attribute: CUpointer_attribute,
		ptr: CUdeviceptr,
	) -> CUresult;
}
extern "C" {
	pub fn cuPointerGetAttributes(
		numAttributes: ::std::os::raw::c_uint,
		attributes: *mut CUpointer_attribute,
		data: *mut *mut ::std::os::raw::c_void,
		ptr: CUdeviceptr,
	) -> CUresult;
}
extern "C" {
	pub fn cuStreamCreate(phStream: *mut CUstream, Flags: ::std::os::raw::c_uint) -> CUresult;
}
extern "C" {
	pub fn cuStreamCreateWithPriority(
		phStream: *mut CUstream,
		flags: ::std::os::raw::c_uint,
		priority: ::std::os::raw::c_int,
	) -> CUresult;
}
extern "C" {
	pub fn cuStreamGetPriority(hStream: CUstream, priority: *mut ::std::os::raw::c_int) -> CUresult;
}
extern "C" {
	pub fn cuStreamGetFlags(hStream: CUstream, flags: *mut ::std::os::raw::c_uint) -> CUresult;
}
extern "C" {
	pub fn cuStreamGetCtx(hStream: CUstream, pctx: *mut CUcontext) -> CUresult;
}
extern "C" {
	pub fn cuStreamWaitEvent(hStream: CUstream, hEvent: CUevent, Flags: ::std::os::raw::c_uint) -> CUresult;
}
extern "C" {
	pub fn cuStreamAddCallback(
		hStream: CUstream,
		callback: CUstreamCallback,
		userData: *mut ::std::os::raw::c_void,
		flags: ::std::os::raw::c_uint,
	) -> CUresult;
}
extern "C" {
	pub fn cuStreamBeginCapture_v2(hStream: CUstream, mode: CUstreamCaptureMode) -> CUresult;
}
extern "C" {
	pub fn cuThreadExchangeStreamCaptureMode(mode: *mut CUstreamCaptureMode) -> CUresult;
}
extern "C" {
	pub fn cuStreamEndCapture(hStream: CUstream, phGraph: *mut CUgraph) -> CUresult;
}
extern "C" {
	pub fn cuStreamIsCapturing(hStream: CUstream, captureStatus: *mut CUstreamCaptureStatus) -> CUresult;
}
extern "C" {
	pub fn cuStreamGetCaptureInfo(
		hStream: CUstream,
		captureStatus_out: *mut CUstreamCaptureStatus,
		id_out: *mut cuuint64_t,
	) -> CUresult;
}
extern "C" {
	pub fn cuStreamGetCaptureInfo_v2(
		hStream: CUstream,
		captureStatus_out: *mut CUstreamCaptureStatus,
		id_out: *mut cuuint64_t,
		graph_out: *mut CUgraph,
		dependencies_out: *mut *const CUgraphNode,
		numDependencies_out: *mut size_t,
	) -> CUresult;
}
extern "C" {
	pub fn cuStreamUpdateCaptureDependencies(
		hStream: CUstream,
		dependencies: *mut CUgraphNode,
		numDependencies: size_t,
		flags: ::std::os::raw::c_uint,
	) -> CUresult;
}
extern "C" {
	pub fn cuStreamAttachMemAsync(
		hStream: CUstream,
		dptr: CUdeviceptr,
		length: size_t,
		flags: ::std::os::raw::c_uint,
	) -> CUresult;
}
extern "C" {
	pub fn cuStreamQuery(hStream: CUstream) -> CUresult;
}
extern "C" {
	pub fn cuStreamSynchronize(hStream: CUstream) -> CUresult;
}
extern "C" {
	pub fn cuStreamDestroy_v2(hStream: CUstream) -> CUresult;
}
extern "C" {
	pub fn cuStreamCopyAttributes(dst: CUstream, src: CUstream) -> CUresult;
}
extern "C" {
	pub fn cuStreamGetAttribute(hStream: CUstream, attr: CUstreamAttrID, value_out: *mut CUstreamAttrValue)
		-> CUresult;
}
extern "C" {
	pub fn cuStreamSetAttribute(hStream: CUstream, attr: CUstreamAttrID, value: *const CUstreamAttrValue) -> CUresult;
}
extern "C" {
	pub fn cuEventCreate(phEvent: *mut CUevent, Flags: ::std::os::raw::c_uint) -> CUresult;
}
extern "C" {
	pub fn cuEventRecord(hEvent: CUevent, hStream: CUstream) -> CUresult;
}
extern "C" {
	pub fn cuEventRecordWithFlags(hEvent: CUevent, hStream: CUstream, flags: ::std::os::raw::c_uint) -> CUresult;
}
extern "C" {
	pub fn cuEventQuery(hEvent: CUevent) -> CUresult;
}
extern "C" {
	pub fn cuEventSynchronize(hEvent: CUevent) -> CUresult;
}
extern "C" {
	pub fn cuEventDestroy_v2(hEvent: CUevent) -> CUresult;
}
extern "C" {
	pub fn cuEventElapsedTime(pMilliseconds: *mut f32, hStart: CUevent, hEnd: CUevent) -> CUresult;
}
extern "C" {
	pub fn cuImportExternalMemory(
		extMem_out: *mut CUexternalMemory,
		memHandleDesc: *const CUDA_EXTERNAL_MEMORY_HANDLE_DESC,
	) -> CUresult;
}
extern "C" {
	pub fn cuExternalMemoryGetMappedBuffer(
		devPtr: *mut CUdeviceptr,
		extMem: CUexternalMemory,
		bufferDesc: *const CUDA_EXTERNAL_MEMORY_BUFFER_DESC,
	) -> CUresult;
}
extern "C" {
	pub fn cuExternalMemoryGetMappedMipmappedArray(
		mipmap: *mut CUmipmappedArray,
		extMem: CUexternalMemory,
		mipmapDesc: *const CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC,
	) -> CUresult;
}
extern "C" {
	pub fn cuDestroyExternalMemory(extMem: CUexternalMemory) -> CUresult;
}
extern "C" {
	pub fn cuImportExternalSemaphore(
		extSem_out: *mut CUexternalSemaphore,
		semHandleDesc: *const CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC,
	) -> CUresult;
}
extern "C" {
	pub fn cuSignalExternalSemaphoresAsync(
		extSemArray: *const CUexternalSemaphore,
		paramsArray: *const CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS,
		numExtSems: ::std::os::raw::c_uint,
		stream: CUstream,
	) -> CUresult;
}
extern "C" {
	pub fn cuWaitExternalSemaphoresAsync(
		extSemArray: *const CUexternalSemaphore,
		paramsArray: *const CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS,
		numExtSems: ::std::os::raw::c_uint,
		stream: CUstream,
	) -> CUresult;
}
extern "C" {
	pub fn cuDestroyExternalSemaphore(extSem: CUexternalSemaphore) -> CUresult;
}
extern "C" {
	pub fn cuStreamWaitValue32(
		stream: CUstream,
		addr: CUdeviceptr,
		value: cuuint32_t,
		flags: ::std::os::raw::c_uint,
	) -> CUresult;
}
extern "C" {
	pub fn cuStreamWaitValue64(
		stream: CUstream,
		addr: CUdeviceptr,
		value: cuuint64_t,
		flags: ::std::os::raw::c_uint,
	) -> CUresult;
}
extern "C" {
	pub fn cuStreamWriteValue32(
		stream: CUstream,
		addr: CUdeviceptr,
		value: cuuint32_t,
		flags: ::std::os::raw::c_uint,
	) -> CUresult;
}
extern "C" {
	pub fn cuStreamWriteValue64(
		stream: CUstream,
		addr: CUdeviceptr,
		value: cuuint64_t,
		flags: ::std::os::raw::c_uint,
	) -> CUresult;
}
extern "C" {
	pub fn cuStreamBatchMemOp(
		stream: CUstream,
		count: ::std::os::raw::c_uint,
		paramArray: *mut CUstreamBatchMemOpParams,
		flags: ::std::os::raw::c_uint,
	) -> CUresult;
}
extern "C" {
	pub fn cuStreamWaitValue32_v2(
		stream: CUstream,
		addr: CUdeviceptr,
		value: cuuint32_t,
		flags: ::std::os::raw::c_uint,
	) -> CUresult;
}
extern "C" {
	pub fn cuStreamWaitValue64_v2(
		stream: CUstream,
		addr: CUdeviceptr,
		value: cuuint64_t,
		flags: ::std::os::raw::c_uint,
	) -> CUresult;
}
extern "C" {
	pub fn cuStreamWriteValue32_v2(
		stream: CUstream,
		addr: CUdeviceptr,
		value: cuuint32_t,
		flags: ::std::os::raw::c_uint,
	) -> CUresult;
}
extern "C" {
	pub fn cuStreamWriteValue64_v2(
		stream: CUstream,
		addr: CUdeviceptr,
		value: cuuint64_t,
		flags: ::std::os::raw::c_uint,
	) -> CUresult;
}
extern "C" {
	pub fn cuStreamBatchMemOp_v2(
		stream: CUstream,
		count: ::std::os::raw::c_uint,
		paramArray: *mut CUstreamBatchMemOpParams,
		flags: ::std::os::raw::c_uint,
	) -> CUresult;
}
extern "C" {
	pub fn cuFuncGetAttribute(
		pi: *mut ::std::os::raw::c_int,
		attrib: CUfunction_attribute,
		hfunc: CUfunction,
	) -> CUresult;
}
extern "C" {
	pub fn cuFuncSetAttribute(
		hfunc: CUfunction,
		attrib: CUfunction_attribute,
		value: ::std::os::raw::c_int,
	) -> CUresult;
}
extern "C" {
	pub fn cuFuncSetCacheConfig(hfunc: CUfunction, config: CUfunc_cache) -> CUresult;
}
extern "C" {
	pub fn cuFuncSetSharedMemConfig(hfunc: CUfunction, config: CUsharedconfig) -> CUresult;
}
extern "C" {
	pub fn cuFuncGetModule(hmod: *mut CUmodule, hfunc: CUfunction) -> CUresult;
}
extern "C" {
	pub fn cuLaunchKernel(
		f: CUfunction,
		gridDimX: ::std::os::raw::c_uint,
		gridDimY: ::std::os::raw::c_uint,
		gridDimZ: ::std::os::raw::c_uint,
		blockDimX: ::std::os::raw::c_uint,
		blockDimY: ::std::os::raw::c_uint,
		blockDimZ: ::std::os::raw::c_uint,
		sharedMemBytes: ::std::os::raw::c_uint,
		hStream: CUstream,
		kernelParams: *mut *mut ::std::os::raw::c_void,
		extra: *mut *mut ::std::os::raw::c_void,
	) -> CUresult;
}
extern "C" {
	pub fn cuLaunchKernelEx(
		config: *const CUlaunchConfig,
		f: CUfunction,
		kernelParams: *mut *mut ::std::os::raw::c_void,
		extra: *mut *mut ::std::os::raw::c_void,
	) -> CUresult;
}
extern "C" {
	pub fn cuLaunchCooperativeKernel(
		f: CUfunction,
		gridDimX: ::std::os::raw::c_uint,
		gridDimY: ::std::os::raw::c_uint,
		gridDimZ: ::std::os::raw::c_uint,
		blockDimX: ::std::os::raw::c_uint,
		blockDimY: ::std::os::raw::c_uint,
		blockDimZ: ::std::os::raw::c_uint,
		sharedMemBytes: ::std::os::raw::c_uint,
		hStream: CUstream,
		kernelParams: *mut *mut ::std::os::raw::c_void,
	) -> CUresult;
}
extern "C" {
	pub fn cuLaunchCooperativeKernelMultiDevice(
		launchParamsList: *mut CUDA_LAUNCH_PARAMS,
		numDevices: ::std::os::raw::c_uint,
		flags: ::std::os::raw::c_uint,
	) -> CUresult;
}
extern "C" {
	pub fn cuLaunchHostFunc(hStream: CUstream, fn_: CUhostFn, userData: *mut ::std::os::raw::c_void) -> CUresult;
}
extern "C" {
	pub fn cuFuncSetBlockShape(
		hfunc: CUfunction,
		x: ::std::os::raw::c_int,
		y: ::std::os::raw::c_int,
		z: ::std::os::raw::c_int,
	) -> CUresult;
}
extern "C" {
	pub fn cuFuncSetSharedSize(hfunc: CUfunction, bytes: ::std::os::raw::c_uint) -> CUresult;
}
extern "C" {
	pub fn cuParamSetSize(hfunc: CUfunction, numbytes: ::std::os::raw::c_uint) -> CUresult;
}
extern "C" {
	pub fn cuParamSeti(hfunc: CUfunction, offset: ::std::os::raw::c_int, value: ::std::os::raw::c_uint) -> CUresult;
}
extern "C" {
	pub fn cuParamSetf(hfunc: CUfunction, offset: ::std::os::raw::c_int, value: f32) -> CUresult;
}
extern "C" {
	pub fn cuParamSetv(
		hfunc: CUfunction,
		offset: ::std::os::raw::c_int,
		ptr: *mut ::std::os::raw::c_void,
		numbytes: ::std::os::raw::c_uint,
	) -> CUresult;
}
extern "C" {
	pub fn cuLaunch(f: CUfunction) -> CUresult;
}
extern "C" {
	pub fn cuLaunchGrid(
		f: CUfunction,
		grid_width: ::std::os::raw::c_int,
		grid_height: ::std::os::raw::c_int,
	) -> CUresult;
}
extern "C" {
	pub fn cuLaunchGridAsync(
		f: CUfunction,
		grid_width: ::std::os::raw::c_int,
		grid_height: ::std::os::raw::c_int,
		hStream: CUstream,
	) -> CUresult;
}
extern "C" {
	pub fn cuParamSetTexRef(hfunc: CUfunction, texunit: ::std::os::raw::c_int, hTexRef: CUtexref) -> CUresult;
}
extern "C" {
	pub fn cuGraphCreate(phGraph: *mut CUgraph, flags: ::std::os::raw::c_uint) -> CUresult;
}
extern "C" {
	pub fn cuGraphAddKernelNode(
		phGraphNode: *mut CUgraphNode,
		hGraph: CUgraph,
		dependencies: *const CUgraphNode,
		numDependencies: size_t,
		nodeParams: *const CUDA_KERNEL_NODE_PARAMS,
	) -> CUresult;
}
extern "C" {
	pub fn cuGraphKernelNodeGetParams(hNode: CUgraphNode, nodeParams: *mut CUDA_KERNEL_NODE_PARAMS) -> CUresult;
}
extern "C" {
	pub fn cuGraphKernelNodeSetParams(hNode: CUgraphNode, nodeParams: *const CUDA_KERNEL_NODE_PARAMS) -> CUresult;
}
extern "C" {
	pub fn cuGraphAddMemcpyNode(
		phGraphNode: *mut CUgraphNode,
		hGraph: CUgraph,
		dependencies: *const CUgraphNode,
		numDependencies: size_t,
		copyParams: *const CUDA_MEMCPY3D,
		ctx: CUcontext,
	) -> CUresult;
}
extern "C" {
	pub fn cuGraphMemcpyNodeGetParams(hNode: CUgraphNode, nodeParams: *mut CUDA_MEMCPY3D) -> CUresult;
}
extern "C" {
	pub fn cuGraphMemcpyNodeSetParams(hNode: CUgraphNode, nodeParams: *const CUDA_MEMCPY3D) -> CUresult;
}
extern "C" {
	pub fn cuGraphAddMemsetNode(
		phGraphNode: *mut CUgraphNode,
		hGraph: CUgraph,
		dependencies: *const CUgraphNode,
		numDependencies: size_t,
		memsetParams: *const CUDA_MEMSET_NODE_PARAMS,
		ctx: CUcontext,
	) -> CUresult;
}
extern "C" {
	pub fn cuGraphMemsetNodeGetParams(hNode: CUgraphNode, nodeParams: *mut CUDA_MEMSET_NODE_PARAMS) -> CUresult;
}
extern "C" {
	pub fn cuGraphMemsetNodeSetParams(hNode: CUgraphNode, nodeParams: *const CUDA_MEMSET_NODE_PARAMS) -> CUresult;
}
extern "C" {
	pub fn cuGraphAddHostNode(
		phGraphNode: *mut CUgraphNode,
		hGraph: CUgraph,
		dependencies: *const CUgraphNode,
		numDependencies: size_t,
		nodeParams: *const CUDA_HOST_NODE_PARAMS,
	) -> CUresult;
}
extern "C" {
	pub fn cuGraphHostNodeGetParams(hNode: CUgraphNode, nodeParams: *mut CUDA_HOST_NODE_PARAMS) -> CUresult;
}
extern "C" {
	pub fn cuGraphHostNodeSetParams(hNode: CUgraphNode, nodeParams: *const CUDA_HOST_NODE_PARAMS) -> CUresult;
}
extern "C" {
	pub fn cuGraphAddChildGraphNode(
		phGraphNode: *mut CUgraphNode,
		hGraph: CUgraph,
		dependencies: *const CUgraphNode,
		numDependencies: size_t,
		childGraph: CUgraph,
	) -> CUresult;
}
extern "C" {
	pub fn cuGraphChildGraphNodeGetGraph(hNode: CUgraphNode, phGraph: *mut CUgraph) -> CUresult;
}
extern "C" {
	pub fn cuGraphAddEmptyNode(
		phGraphNode: *mut CUgraphNode,
		hGraph: CUgraph,
		dependencies: *const CUgraphNode,
		numDependencies: size_t,
	) -> CUresult;
}
extern "C" {
	pub fn cuGraphAddEventRecordNode(
		phGraphNode: *mut CUgraphNode,
		hGraph: CUgraph,
		dependencies: *const CUgraphNode,
		numDependencies: size_t,
		event: CUevent,
	) -> CUresult;
}
extern "C" {
	pub fn cuGraphEventRecordNodeGetEvent(hNode: CUgraphNode, event_out: *mut CUevent) -> CUresult;
}
extern "C" {
	pub fn cuGraphEventRecordNodeSetEvent(hNode: CUgraphNode, event: CUevent) -> CUresult;
}
extern "C" {
	pub fn cuGraphAddEventWaitNode(
		phGraphNode: *mut CUgraphNode,
		hGraph: CUgraph,
		dependencies: *const CUgraphNode,
		numDependencies: size_t,
		event: CUevent,
	) -> CUresult;
}
extern "C" {
	pub fn cuGraphEventWaitNodeGetEvent(hNode: CUgraphNode, event_out: *mut CUevent) -> CUresult;
}
extern "C" {
	pub fn cuGraphEventWaitNodeSetEvent(hNode: CUgraphNode, event: CUevent) -> CUresult;
}
extern "C" {
	pub fn cuGraphAddExternalSemaphoresSignalNode(
		phGraphNode: *mut CUgraphNode,
		hGraph: CUgraph,
		dependencies: *const CUgraphNode,
		numDependencies: size_t,
		nodeParams: *const CUDA_EXT_SEM_SIGNAL_NODE_PARAMS,
	) -> CUresult;
}
extern "C" {
	pub fn cuGraphExternalSemaphoresSignalNodeGetParams(
		hNode: CUgraphNode,
		params_out: *mut CUDA_EXT_SEM_SIGNAL_NODE_PARAMS,
	) -> CUresult;
}
extern "C" {
	pub fn cuGraphExternalSemaphoresSignalNodeSetParams(
		hNode: CUgraphNode,
		nodeParams: *const CUDA_EXT_SEM_SIGNAL_NODE_PARAMS,
	) -> CUresult;
}
extern "C" {
	pub fn cuGraphAddExternalSemaphoresWaitNode(
		phGraphNode: *mut CUgraphNode,
		hGraph: CUgraph,
		dependencies: *const CUgraphNode,
		numDependencies: size_t,
		nodeParams: *const CUDA_EXT_SEM_WAIT_NODE_PARAMS,
	) -> CUresult;
}
extern "C" {
	pub fn cuGraphExternalSemaphoresWaitNodeGetParams(
		hNode: CUgraphNode,
		params_out: *mut CUDA_EXT_SEM_WAIT_NODE_PARAMS,
	) -> CUresult;
}
extern "C" {
	pub fn cuGraphExternalSemaphoresWaitNodeSetParams(
		hNode: CUgraphNode,
		nodeParams: *const CUDA_EXT_SEM_WAIT_NODE_PARAMS,
	) -> CUresult;
}
extern "C" {
	pub fn cuGraphAddBatchMemOpNode(
		phGraphNode: *mut CUgraphNode,
		hGraph: CUgraph,
		dependencies: *const CUgraphNode,
		numDependencies: size_t,
		nodeParams: *const CUDA_BATCH_MEM_OP_NODE_PARAMS,
	) -> CUresult;
}
extern "C" {
	pub fn cuGraphBatchMemOpNodeGetParams(
		hNode: CUgraphNode,
		nodeParams_out: *mut CUDA_BATCH_MEM_OP_NODE_PARAMS,
	) -> CUresult;
}
extern "C" {
	pub fn cuGraphBatchMemOpNodeSetParams(
		hNode: CUgraphNode,
		nodeParams: *const CUDA_BATCH_MEM_OP_NODE_PARAMS,
	) -> CUresult;
}
extern "C" {
	pub fn cuGraphExecBatchMemOpNodeSetParams(
		hGraphExec: CUgraphExec,
		hNode: CUgraphNode,
		nodeParams: *const CUDA_BATCH_MEM_OP_NODE_PARAMS,
	) -> CUresult;
}
extern "C" {
	pub fn cuGraphAddMemAllocNode(
		phGraphNode: *mut CUgraphNode,
		hGraph: CUgraph,
		dependencies: *const CUgraphNode,
		numDependencies: size_t,
		nodeParams: *mut CUDA_MEM_ALLOC_NODE_PARAMS,
	) -> CUresult;
}
extern "C" {
	pub fn cuGraphMemAllocNodeGetParams(hNode: CUgraphNode, params_out: *mut CUDA_MEM_ALLOC_NODE_PARAMS) -> CUresult;
}
extern "C" {
	pub fn cuGraphAddMemFreeNode(
		phGraphNode: *mut CUgraphNode,
		hGraph: CUgraph,
		dependencies: *const CUgraphNode,
		numDependencies: size_t,
		dptr: CUdeviceptr,
	) -> CUresult;
}
extern "C" {
	pub fn cuGraphMemFreeNodeGetParams(hNode: CUgraphNode, dptr_out: *mut CUdeviceptr) -> CUresult;
}
extern "C" {
	pub fn cuDeviceGraphMemTrim(device: CUdevice) -> CUresult;
}
extern "C" {
	pub fn cuDeviceGetGraphMemAttribute(
		device: CUdevice,
		attr: CUgraphMem_attribute,
		value: *mut ::std::os::raw::c_void,
	) -> CUresult;
}
extern "C" {
	pub fn cuDeviceSetGraphMemAttribute(
		device: CUdevice,
		attr: CUgraphMem_attribute,
		value: *mut ::std::os::raw::c_void,
	) -> CUresult;
}
extern "C" {
	pub fn cuGraphClone(phGraphClone: *mut CUgraph, originalGraph: CUgraph) -> CUresult;
}
extern "C" {
	pub fn cuGraphNodeFindInClone(
		phNode: *mut CUgraphNode,
		hOriginalNode: CUgraphNode,
		hClonedGraph: CUgraph,
	) -> CUresult;
}
extern "C" {
	pub fn cuGraphNodeGetType(hNode: CUgraphNode, type_: *mut CUgraphNodeType) -> CUresult;
}
extern "C" {
	pub fn cuGraphGetNodes(hGraph: CUgraph, nodes: *mut CUgraphNode, numNodes: *mut size_t) -> CUresult;
}
extern "C" {
	pub fn cuGraphGetRootNodes(hGraph: CUgraph, rootNodes: *mut CUgraphNode, numRootNodes: *mut size_t) -> CUresult;
}
extern "C" {
	pub fn cuGraphGetEdges(
		hGraph: CUgraph,
		from: *mut CUgraphNode,
		to: *mut CUgraphNode,
		numEdges: *mut size_t,
	) -> CUresult;
}
extern "C" {
	pub fn cuGraphNodeGetDependencies(
		hNode: CUgraphNode,
		dependencies: *mut CUgraphNode,
		numDependencies: *mut size_t,
	) -> CUresult;
}
extern "C" {
	pub fn cuGraphNodeGetDependentNodes(
		hNode: CUgraphNode,
		dependentNodes: *mut CUgraphNode,
		numDependentNodes: *mut size_t,
	) -> CUresult;
}
extern "C" {
	pub fn cuGraphAddDependencies(
		hGraph: CUgraph,
		from: *const CUgraphNode,
		to: *const CUgraphNode,
		numDependencies: size_t,
	) -> CUresult;
}
extern "C" {
	pub fn cuGraphRemoveDependencies(
		hGraph: CUgraph,
		from: *const CUgraphNode,
		to: *const CUgraphNode,
		numDependencies: size_t,
	) -> CUresult;
}
extern "C" {
	pub fn cuGraphDestroyNode(hNode: CUgraphNode) -> CUresult;
}
extern "C" {
	pub fn cuGraphInstantiate_v2(
		phGraphExec: *mut CUgraphExec,
		hGraph: CUgraph,
		phErrorNode: *mut CUgraphNode,
		logBuffer: *mut ::std::os::raw::c_char,
		bufferSize: size_t,
	) -> CUresult;
}
extern "C" {
	pub fn cuGraphInstantiateWithFlags(
		phGraphExec: *mut CUgraphExec,
		hGraph: CUgraph,
		flags: ::std::os::raw::c_ulonglong,
	) -> CUresult;
}
extern "C" {
	pub fn cuGraphExecKernelNodeSetParams(
		hGraphExec: CUgraphExec,
		hNode: CUgraphNode,
		nodeParams: *const CUDA_KERNEL_NODE_PARAMS,
	) -> CUresult;
}
extern "C" {
	pub fn cuGraphExecMemcpyNodeSetParams(
		hGraphExec: CUgraphExec,
		hNode: CUgraphNode,
		copyParams: *const CUDA_MEMCPY3D,
		ctx: CUcontext,
	) -> CUresult;
}
extern "C" {
	pub fn cuGraphExecMemsetNodeSetParams(
		hGraphExec: CUgraphExec,
		hNode: CUgraphNode,
		memsetParams: *const CUDA_MEMSET_NODE_PARAMS,
		ctx: CUcontext,
	) -> CUresult;
}
extern "C" {
	pub fn cuGraphExecHostNodeSetParams(
		hGraphExec: CUgraphExec,
		hNode: CUgraphNode,
		nodeParams: *const CUDA_HOST_NODE_PARAMS,
	) -> CUresult;
}
extern "C" {
	pub fn cuGraphExecChildGraphNodeSetParams(
		hGraphExec: CUgraphExec,
		hNode: CUgraphNode,
		childGraph: CUgraph,
	) -> CUresult;
}
extern "C" {
	pub fn cuGraphExecEventRecordNodeSetEvent(hGraphExec: CUgraphExec, hNode: CUgraphNode, event: CUevent) -> CUresult;
}
extern "C" {
	pub fn cuGraphExecEventWaitNodeSetEvent(hGraphExec: CUgraphExec, hNode: CUgraphNode, event: CUevent) -> CUresult;
}
extern "C" {
	pub fn cuGraphExecExternalSemaphoresSignalNodeSetParams(
		hGraphExec: CUgraphExec,
		hNode: CUgraphNode,
		nodeParams: *const CUDA_EXT_SEM_SIGNAL_NODE_PARAMS,
	) -> CUresult;
}
extern "C" {
	pub fn cuGraphExecExternalSemaphoresWaitNodeSetParams(
		hGraphExec: CUgraphExec,
		hNode: CUgraphNode,
		nodeParams: *const CUDA_EXT_SEM_WAIT_NODE_PARAMS,
	) -> CUresult;
}
extern "C" {
	pub fn cuGraphNodeSetEnabled(
		hGraphExec: CUgraphExec,
		hNode: CUgraphNode,
		isEnabled: ::std::os::raw::c_uint,
	) -> CUresult;
}
extern "C" {
	pub fn cuGraphNodeGetEnabled(
		hGraphExec: CUgraphExec,
		hNode: CUgraphNode,
		isEnabled: *mut ::std::os::raw::c_uint,
	) -> CUresult;
}
extern "C" {
	pub fn cuGraphUpload(hGraphExec: CUgraphExec, hStream: CUstream) -> CUresult;
}
extern "C" {
	pub fn cuGraphLaunch(hGraphExec: CUgraphExec, hStream: CUstream) -> CUresult;
}
extern "C" {
	pub fn cuGraphExecDestroy(hGraphExec: CUgraphExec) -> CUresult;
}
extern "C" {
	pub fn cuGraphDestroy(hGraph: CUgraph) -> CUresult;
}
extern "C" {
	pub fn cuGraphExecUpdate(
		hGraphExec: CUgraphExec,
		hGraph: CUgraph,
		hErrorNode_out: *mut CUgraphNode,
		updateResult_out: *mut CUgraphExecUpdateResult,
	) -> CUresult;
}
extern "C" {
	pub fn cuGraphKernelNodeCopyAttributes(dst: CUgraphNode, src: CUgraphNode) -> CUresult;
}
extern "C" {
	pub fn cuGraphKernelNodeGetAttribute(
		hNode: CUgraphNode,
		attr: CUkernelNodeAttrID,
		value_out: *mut CUkernelNodeAttrValue,
	) -> CUresult;
}
extern "C" {
	pub fn cuGraphKernelNodeSetAttribute(
		hNode: CUgraphNode,
		attr: CUkernelNodeAttrID,
		value: *const CUkernelNodeAttrValue,
	) -> CUresult;
}
extern "C" {
	pub fn cuGraphDebugDotPrint(
		hGraph: CUgraph,
		path: *const ::std::os::raw::c_char,
		flags: ::std::os::raw::c_uint,
	) -> CUresult;
}
extern "C" {
	pub fn cuUserObjectCreate(
		object_out: *mut CUuserObject,
		ptr: *mut ::std::os::raw::c_void,
		destroy: CUhostFn,
		initialRefcount: ::std::os::raw::c_uint,
		flags: ::std::os::raw::c_uint,
	) -> CUresult;
}
extern "C" {
	pub fn cuUserObjectRetain(object: CUuserObject, count: ::std::os::raw::c_uint) -> CUresult;
}
extern "C" {
	pub fn cuUserObjectRelease(object: CUuserObject, count: ::std::os::raw::c_uint) -> CUresult;
}
extern "C" {
	pub fn cuGraphRetainUserObject(
		graph: CUgraph,
		object: CUuserObject,
		count: ::std::os::raw::c_uint,
		flags: ::std::os::raw::c_uint,
	) -> CUresult;
}
extern "C" {
	pub fn cuGraphReleaseUserObject(graph: CUgraph, object: CUuserObject, count: ::std::os::raw::c_uint) -> CUresult;
}
extern "C" {
	pub fn cuOccupancyMaxActiveBlocksPerMultiprocessor(
		numBlocks: *mut ::std::os::raw::c_int,
		func: CUfunction,
		blockSize: ::std::os::raw::c_int,
		dynamicSMemSize: size_t,
	) -> CUresult;
}
extern "C" {
	pub fn cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(
		numBlocks: *mut ::std::os::raw::c_int,
		func: CUfunction,
		blockSize: ::std::os::raw::c_int,
		dynamicSMemSize: size_t,
		flags: ::std::os::raw::c_uint,
	) -> CUresult;
}
extern "C" {
	pub fn cuOccupancyMaxPotentialBlockSize(
		minGridSize: *mut ::std::os::raw::c_int,
		blockSize: *mut ::std::os::raw::c_int,
		func: CUfunction,
		blockSizeToDynamicSMemSize: CUoccupancyB2DSize,
		dynamicSMemSize: size_t,
		blockSizeLimit: ::std::os::raw::c_int,
	) -> CUresult;
}
extern "C" {
	pub fn cuOccupancyMaxPotentialBlockSizeWithFlags(
		minGridSize: *mut ::std::os::raw::c_int,
		blockSize: *mut ::std::os::raw::c_int,
		func: CUfunction,
		blockSizeToDynamicSMemSize: CUoccupancyB2DSize,
		dynamicSMemSize: size_t,
		blockSizeLimit: ::std::os::raw::c_int,
		flags: ::std::os::raw::c_uint,
	) -> CUresult;
}
extern "C" {
	pub fn cuOccupancyAvailableDynamicSMemPerBlock(
		dynamicSmemSize: *mut size_t,
		func: CUfunction,
		numBlocks: ::std::os::raw::c_int,
		blockSize: ::std::os::raw::c_int,
	) -> CUresult;
}
extern "C" {
	pub fn cuOccupancyMaxPotentialClusterSize(
		clusterSize: *mut ::std::os::raw::c_int,
		func: CUfunction,
		config: *const CUlaunchConfig,
	) -> CUresult;
}
extern "C" {
	pub fn cuOccupancyMaxActiveClusters(
		numClusters: *mut ::std::os::raw::c_int,
		func: CUfunction,
		config: *const CUlaunchConfig,
	) -> CUresult;
}
extern "C" {
	pub fn cuTexRefSetArray(hTexRef: CUtexref, hArray: CUarray, Flags: ::std::os::raw::c_uint) -> CUresult;
}
extern "C" {
	pub fn cuTexRefSetMipmappedArray(
		hTexRef: CUtexref,
		hMipmappedArray: CUmipmappedArray,
		Flags: ::std::os::raw::c_uint,
	) -> CUresult;
}
extern "C" {
	pub fn cuTexRefSetAddress_v2(
		ByteOffset: *mut size_t,
		hTexRef: CUtexref,
		dptr: CUdeviceptr,
		bytes: size_t,
	) -> CUresult;
}
extern "C" {
	pub fn cuTexRefSetAddress2D_v3(
		hTexRef: CUtexref,
		desc: *const CUDA_ARRAY_DESCRIPTOR,
		dptr: CUdeviceptr,
		Pitch: size_t,
	) -> CUresult;
}
extern "C" {
	pub fn cuTexRefSetFormat(
		hTexRef: CUtexref,
		fmt: CUarray_format,
		NumPackedComponents: ::std::os::raw::c_int,
	) -> CUresult;
}
extern "C" {
	pub fn cuTexRefSetAddressMode(hTexRef: CUtexref, dim: ::std::os::raw::c_int, am: CUaddress_mode) -> CUresult;
}
extern "C" {
	pub fn cuTexRefSetFilterMode(hTexRef: CUtexref, fm: CUfilter_mode) -> CUresult;
}
extern "C" {
	pub fn cuTexRefSetMipmapFilterMode(hTexRef: CUtexref, fm: CUfilter_mode) -> CUresult;
}
extern "C" {
	pub fn cuTexRefSetMipmapLevelBias(hTexRef: CUtexref, bias: f32) -> CUresult;
}
extern "C" {
	pub fn cuTexRefSetMipmapLevelClamp(
		hTexRef: CUtexref,
		minMipmapLevelClamp: f32,
		maxMipmapLevelClamp: f32,
	) -> CUresult;
}
extern "C" {
	pub fn cuTexRefSetMaxAnisotropy(hTexRef: CUtexref, maxAniso: ::std::os::raw::c_uint) -> CUresult;
}
extern "C" {
	pub fn cuTexRefSetBorderColor(hTexRef: CUtexref, pBorderColor: *mut f32) -> CUresult;
}
extern "C" {
	pub fn cuTexRefSetFlags(hTexRef: CUtexref, Flags: ::std::os::raw::c_uint) -> CUresult;
}
extern "C" {
	pub fn cuTexRefGetAddress_v2(pdptr: *mut CUdeviceptr, hTexRef: CUtexref) -> CUresult;
}
extern "C" {
	pub fn cuTexRefGetArray(phArray: *mut CUarray, hTexRef: CUtexref) -> CUresult;
}
extern "C" {
	pub fn cuTexRefGetMipmappedArray(phMipmappedArray: *mut CUmipmappedArray, hTexRef: CUtexref) -> CUresult;
}
extern "C" {
	pub fn cuTexRefGetAddressMode(pam: *mut CUaddress_mode, hTexRef: CUtexref, dim: ::std::os::raw::c_int) -> CUresult;
}
extern "C" {
	pub fn cuTexRefGetFilterMode(pfm: *mut CUfilter_mode, hTexRef: CUtexref) -> CUresult;
}
extern "C" {
	pub fn cuTexRefGetFormat(
		pFormat: *mut CUarray_format,
		pNumChannels: *mut ::std::os::raw::c_int,
		hTexRef: CUtexref,
	) -> CUresult;
}
extern "C" {
	pub fn cuTexRefGetMipmapFilterMode(pfm: *mut CUfilter_mode, hTexRef: CUtexref) -> CUresult;
}
extern "C" {
	pub fn cuTexRefGetMipmapLevelBias(pbias: *mut f32, hTexRef: CUtexref) -> CUresult;
}
extern "C" {
	pub fn cuTexRefGetMipmapLevelClamp(
		pminMipmapLevelClamp: *mut f32,
		pmaxMipmapLevelClamp: *mut f32,
		hTexRef: CUtexref,
	) -> CUresult;
}
extern "C" {
	pub fn cuTexRefGetMaxAnisotropy(pmaxAniso: *mut ::std::os::raw::c_int, hTexRef: CUtexref) -> CUresult;
}
extern "C" {
	pub fn cuTexRefGetBorderColor(pBorderColor: *mut f32, hTexRef: CUtexref) -> CUresult;
}
extern "C" {
	pub fn cuTexRefGetFlags(pFlags: *mut ::std::os::raw::c_uint, hTexRef: CUtexref) -> CUresult;
}
extern "C" {
	pub fn cuTexRefCreate(pTexRef: *mut CUtexref) -> CUresult;
}
extern "C" {
	pub fn cuTexRefDestroy(hTexRef: CUtexref) -> CUresult;
}
extern "C" {
	pub fn cuSurfRefSetArray(hSurfRef: CUsurfref, hArray: CUarray, Flags: ::std::os::raw::c_uint) -> CUresult;
}
extern "C" {
	pub fn cuSurfRefGetArray(phArray: *mut CUarray, hSurfRef: CUsurfref) -> CUresult;
}
extern "C" {
	pub fn cuTexObjectCreate(
		pTexObject: *mut CUtexObject,
		pResDesc: *const CUDA_RESOURCE_DESC,
		pTexDesc: *const CUDA_TEXTURE_DESC,
		pResViewDesc: *const CUDA_RESOURCE_VIEW_DESC,
	) -> CUresult;
}
extern "C" {
	pub fn cuTexObjectDestroy(texObject: CUtexObject) -> CUresult;
}
extern "C" {
	pub fn cuTexObjectGetResourceDesc(pResDesc: *mut CUDA_RESOURCE_DESC, texObject: CUtexObject) -> CUresult;
}
extern "C" {
	pub fn cuTexObjectGetTextureDesc(pTexDesc: *mut CUDA_TEXTURE_DESC, texObject: CUtexObject) -> CUresult;
}
extern "C" {
	pub fn cuTexObjectGetResourceViewDesc(
		pResViewDesc: *mut CUDA_RESOURCE_VIEW_DESC,
		texObject: CUtexObject,
	) -> CUresult;
}
extern "C" {
	pub fn cuSurfObjectCreate(pSurfObject: *mut CUsurfObject, pResDesc: *const CUDA_RESOURCE_DESC) -> CUresult;
}
extern "C" {
	pub fn cuSurfObjectDestroy(surfObject: CUsurfObject) -> CUresult;
}
extern "C" {
	pub fn cuSurfObjectGetResourceDesc(pResDesc: *mut CUDA_RESOURCE_DESC, surfObject: CUsurfObject) -> CUresult;
}
extern "C" {
	pub fn cuDeviceCanAccessPeer(
		canAccessPeer: *mut ::std::os::raw::c_int,
		dev: CUdevice,
		peerDev: CUdevice,
	) -> CUresult;
}
extern "C" {
	pub fn cuCtxEnablePeerAccess(peerContext: CUcontext, Flags: ::std::os::raw::c_uint) -> CUresult;
}
extern "C" {
	pub fn cuCtxDisablePeerAccess(peerContext: CUcontext) -> CUresult;
}
extern "C" {
	pub fn cuDeviceGetP2PAttribute(
		value: *mut ::std::os::raw::c_int,
		attrib: CUdevice_P2PAttribute,
		srcDevice: CUdevice,
		dstDevice: CUdevice,
	) -> CUresult;
}
extern "C" {
	pub fn cuGraphicsUnregisterResource(resource: CUgraphicsResource) -> CUresult;
}
extern "C" {
	pub fn cuGraphicsSubResourceGetMappedArray(
		pArray: *mut CUarray,
		resource: CUgraphicsResource,
		arrayIndex: ::std::os::raw::c_uint,
		mipLevel: ::std::os::raw::c_uint,
	) -> CUresult;
}
extern "C" {
	pub fn cuGraphicsResourceGetMappedMipmappedArray(
		pMipmappedArray: *mut CUmipmappedArray,
		resource: CUgraphicsResource,
	) -> CUresult;
}
extern "C" {
	pub fn cuGraphicsResourceGetMappedPointer_v2(
		pDevPtr: *mut CUdeviceptr,
		pSize: *mut size_t,
		resource: CUgraphicsResource,
	) -> CUresult;
}
extern "C" {
	pub fn cuGraphicsResourceSetMapFlags_v2(resource: CUgraphicsResource, flags: ::std::os::raw::c_uint) -> CUresult;
}
extern "C" {
	pub fn cuGraphicsMapResources(
		count: ::std::os::raw::c_uint,
		resources: *mut CUgraphicsResource,
		hStream: CUstream,
	) -> CUresult;
}
extern "C" {
	pub fn cuGraphicsUnmapResources(
		count: ::std::os::raw::c_uint,
		resources: *mut CUgraphicsResource,
		hStream: CUstream,
	) -> CUresult;
}
extern "C" {
	pub fn cuGetProcAddress(
		symbol: *const ::std::os::raw::c_char,
		pfn: *mut *mut ::std::os::raw::c_void,
		cudaVersion: ::std::os::raw::c_int,
		flags: cuuint64_t,
	) -> CUresult;
}
extern "C" {
	pub fn cuGetExportTable(
		ppExportTable: *mut *const ::std::os::raw::c_void,
		pExportTableId: *const CUuuid,
	) -> CUresult;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVCUDADeviceContextInternal {
	_unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVCUDADeviceContext {
	pub cuda_ctx: CUcontext,
	pub stream: CUstream,
	pub internal: *mut AVCUDADeviceContextInternal,
}
#[test]
fn bindgen_test_layout_AVCUDADeviceContext() {
	assert_eq!(
		::std::mem::size_of::<AVCUDADeviceContext>(),
		24usize,
		concat!("Size of: ", stringify!(AVCUDADeviceContext))
	);
	assert_eq!(
		::std::mem::align_of::<AVCUDADeviceContext>(),
		8usize,
		concat!("Alignment of ", stringify!(AVCUDADeviceContext))
	);
	fn test_field_cuda_ctx() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCUDADeviceContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).cuda_ctx) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCUDADeviceContext),
				"::",
				stringify!(cuda_ctx)
			)
		);
	}
	test_field_cuda_ctx();
	fn test_field_stream() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCUDADeviceContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCUDADeviceContext),
				"::",
				stringify!(stream)
			)
		);
	}
	test_field_stream();
	fn test_field_internal() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVCUDADeviceContext>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).internal) as usize - ptr as usize
			},
			16usize,
			concat!(
				"Offset of field: ",
				stringify!(AVCUDADeviceContext),
				"::",
				stringify!(internal)
			)
		);
	}
	test_field_internal();
}
pub const AVOptionType_AV_OPT_TYPE_FLAGS: AVOptionType = 0;
pub const AVOptionType_AV_OPT_TYPE_INT: AVOptionType = 1;
pub const AVOptionType_AV_OPT_TYPE_INT64: AVOptionType = 2;
pub const AVOptionType_AV_OPT_TYPE_DOUBLE: AVOptionType = 3;
pub const AVOptionType_AV_OPT_TYPE_FLOAT: AVOptionType = 4;
pub const AVOptionType_AV_OPT_TYPE_STRING: AVOptionType = 5;
pub const AVOptionType_AV_OPT_TYPE_RATIONAL: AVOptionType = 6;
pub const AVOptionType_AV_OPT_TYPE_BINARY: AVOptionType = 7;
pub const AVOptionType_AV_OPT_TYPE_DICT: AVOptionType = 8;
pub const AVOptionType_AV_OPT_TYPE_UINT64: AVOptionType = 9;
pub const AVOptionType_AV_OPT_TYPE_CONST: AVOptionType = 10;
pub const AVOptionType_AV_OPT_TYPE_IMAGE_SIZE: AVOptionType = 11;
pub const AVOptionType_AV_OPT_TYPE_PIXEL_FMT: AVOptionType = 12;
pub const AVOptionType_AV_OPT_TYPE_SAMPLE_FMT: AVOptionType = 13;
pub const AVOptionType_AV_OPT_TYPE_VIDEO_RATE: AVOptionType = 14;
pub const AVOptionType_AV_OPT_TYPE_DURATION: AVOptionType = 15;
pub const AVOptionType_AV_OPT_TYPE_COLOR: AVOptionType = 16;
pub const AVOptionType_AV_OPT_TYPE_CHANNEL_LAYOUT: AVOptionType = 17;
pub const AVOptionType_AV_OPT_TYPE_BOOL: AVOptionType = 18;
pub const AVOptionType_AV_OPT_TYPE_CHLAYOUT: AVOptionType = 19;
pub type AVOptionType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AVOption {
	pub name: *const ::std::os::raw::c_char,
	pub help: *const ::std::os::raw::c_char,
	pub offset: ::std::os::raw::c_int,
	pub type_: AVOptionType,
	pub default_val: AVOption__bindgen_ty_1,
	pub min: f64,
	pub max: f64,
	pub flags: ::std::os::raw::c_int,
	pub unit: *const ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union AVOption__bindgen_ty_1 {
	pub i64_: i64,
	pub dbl: f64,
	pub str_: *const ::std::os::raw::c_char,
	pub q: AVRational,
}
#[test]
fn bindgen_test_layout_AVOption__bindgen_ty_1() {
	assert_eq!(
		::std::mem::size_of::<AVOption__bindgen_ty_1>(),
		8usize,
		concat!("Size of: ", stringify!(AVOption__bindgen_ty_1))
	);
	assert_eq!(
		::std::mem::align_of::<AVOption__bindgen_ty_1>(),
		8usize,
		concat!("Alignment of ", stringify!(AVOption__bindgen_ty_1))
	);
	fn test_field_i64() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVOption__bindgen_ty_1>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).i64_) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(AVOption__bindgen_ty_1),
				"::",
				stringify!(i64_)
			)
		);
	}
	test_field_i64();
	fn test_field_dbl() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVOption__bindgen_ty_1>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).dbl) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(AVOption__bindgen_ty_1),
				"::",
				stringify!(dbl)
			)
		);
	}
	test_field_dbl();
	fn test_field_str() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVOption__bindgen_ty_1>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).str_) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(AVOption__bindgen_ty_1),
				"::",
				stringify!(str_)
			)
		);
	}
	test_field_str();
	fn test_field_q() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVOption__bindgen_ty_1>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(AVOption__bindgen_ty_1),
				"::",
				stringify!(q)
			)
		);
	}
	test_field_q();
}
#[test]
fn bindgen_test_layout_AVOption() {
	assert_eq!(
		::std::mem::size_of::<AVOption>(),
		64usize,
		concat!("Size of: ", stringify!(AVOption))
	);
	assert_eq!(
		::std::mem::align_of::<AVOption>(),
		8usize,
		concat!("Alignment of ", stringify!(AVOption))
	);
	fn test_field_name() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVOption>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
			},
			0usize,
			concat!("Offset of field: ", stringify!(AVOption), "::", stringify!(name))
		);
	}
	test_field_name();
	fn test_field_help() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVOption>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).help) as usize - ptr as usize
			},
			8usize,
			concat!("Offset of field: ", stringify!(AVOption), "::", stringify!(help))
		);
	}
	test_field_help();
	fn test_field_offset() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVOption>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize
			},
			16usize,
			concat!("Offset of field: ", stringify!(AVOption), "::", stringify!(offset))
		);
	}
	test_field_offset();
	fn test_field_type() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVOption>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
			},
			20usize,
			concat!("Offset of field: ", stringify!(AVOption), "::", stringify!(type_))
		);
	}
	test_field_type();
	fn test_field_default_val() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVOption>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).default_val) as usize - ptr as usize
			},
			24usize,
			concat!("Offset of field: ", stringify!(AVOption), "::", stringify!(default_val))
		);
	}
	test_field_default_val();
	fn test_field_min() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVOption>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).min) as usize - ptr as usize
			},
			32usize,
			concat!("Offset of field: ", stringify!(AVOption), "::", stringify!(min))
		);
	}
	test_field_min();
	fn test_field_max() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVOption>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).max) as usize - ptr as usize
			},
			40usize,
			concat!("Offset of field: ", stringify!(AVOption), "::", stringify!(max))
		);
	}
	test_field_max();
	fn test_field_flags() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVOption>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
			},
			48usize,
			concat!("Offset of field: ", stringify!(AVOption), "::", stringify!(flags))
		);
	}
	test_field_flags();
	fn test_field_unit() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVOption>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).unit) as usize - ptr as usize
			},
			56usize,
			concat!("Offset of field: ", stringify!(AVOption), "::", stringify!(unit))
		);
	}
	test_field_unit();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVOptionRange {
	pub str_: *const ::std::os::raw::c_char,
	pub value_min: f64,
	pub value_max: f64,
	pub component_min: f64,
	pub component_max: f64,
	pub is_range: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_AVOptionRange() {
	assert_eq!(
		::std::mem::size_of::<AVOptionRange>(),
		48usize,
		concat!("Size of: ", stringify!(AVOptionRange))
	);
	assert_eq!(
		::std::mem::align_of::<AVOptionRange>(),
		8usize,
		concat!("Alignment of ", stringify!(AVOptionRange))
	);
	fn test_field_str() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVOptionRange>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).str_) as usize - ptr as usize
			},
			0usize,
			concat!("Offset of field: ", stringify!(AVOptionRange), "::", stringify!(str_))
		);
	}
	test_field_str();
	fn test_field_value_min() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVOptionRange>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).value_min) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(AVOptionRange),
				"::",
				stringify!(value_min)
			)
		);
	}
	test_field_value_min();
	fn test_field_value_max() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVOptionRange>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).value_max) as usize - ptr as usize
			},
			16usize,
			concat!(
				"Offset of field: ",
				stringify!(AVOptionRange),
				"::",
				stringify!(value_max)
			)
		);
	}
	test_field_value_max();
	fn test_field_component_min() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVOptionRange>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).component_min) as usize - ptr as usize
			},
			24usize,
			concat!(
				"Offset of field: ",
				stringify!(AVOptionRange),
				"::",
				stringify!(component_min)
			)
		);
	}
	test_field_component_min();
	fn test_field_component_max() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVOptionRange>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).component_max) as usize - ptr as usize
			},
			32usize,
			concat!(
				"Offset of field: ",
				stringify!(AVOptionRange),
				"::",
				stringify!(component_max)
			)
		);
	}
	test_field_component_max();
	fn test_field_is_range() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVOptionRange>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).is_range) as usize - ptr as usize
			},
			40usize,
			concat!(
				"Offset of field: ",
				stringify!(AVOptionRange),
				"::",
				stringify!(is_range)
			)
		);
	}
	test_field_is_range();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVOptionRanges {
	pub range: *mut *mut AVOptionRange,
	pub nb_ranges: ::std::os::raw::c_int,
	pub nb_components: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_AVOptionRanges() {
	assert_eq!(
		::std::mem::size_of::<AVOptionRanges>(),
		16usize,
		concat!("Size of: ", stringify!(AVOptionRanges))
	);
	assert_eq!(
		::std::mem::align_of::<AVOptionRanges>(),
		8usize,
		concat!("Alignment of ", stringify!(AVOptionRanges))
	);
	fn test_field_range() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVOptionRanges>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).range) as usize - ptr as usize
			},
			0usize,
			concat!("Offset of field: ", stringify!(AVOptionRanges), "::", stringify!(range))
		);
	}
	test_field_range();
	fn test_field_nb_ranges() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVOptionRanges>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).nb_ranges) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(AVOptionRanges),
				"::",
				stringify!(nb_ranges)
			)
		);
	}
	test_field_nb_ranges();
	fn test_field_nb_components() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<AVOptionRanges>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).nb_components) as usize - ptr as usize
			},
			12usize,
			concat!(
				"Offset of field: ",
				stringify!(AVOptionRanges),
				"::",
				stringify!(nb_components)
			)
		);
	}
	test_field_nb_components();
}
extern "C" {
	pub fn av_opt_show2(
		obj: *mut ::std::os::raw::c_void,
		av_log_obj: *mut ::std::os::raw::c_void,
		req_flags: ::std::os::raw::c_int,
		rej_flags: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_opt_set_defaults(s: *mut ::std::os::raw::c_void);
}
extern "C" {
	pub fn av_opt_set_defaults2(
		s: *mut ::std::os::raw::c_void,
		mask: ::std::os::raw::c_int,
		flags: ::std::os::raw::c_int,
	);
}
extern "C" {
	pub fn av_set_options_string(
		ctx: *mut ::std::os::raw::c_void,
		opts: *const ::std::os::raw::c_char,
		key_val_sep: *const ::std::os::raw::c_char,
		pairs_sep: *const ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_opt_set_from_string(
		ctx: *mut ::std::os::raw::c_void,
		opts: *const ::std::os::raw::c_char,
		shorthand: *const *const ::std::os::raw::c_char,
		key_val_sep: *const ::std::os::raw::c_char,
		pairs_sep: *const ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_opt_free(obj: *mut ::std::os::raw::c_void);
}
extern "C" {
	pub fn av_opt_flag_is_set(
		obj: *mut ::std::os::raw::c_void,
		field_name: *const ::std::os::raw::c_char,
		flag_name: *const ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_opt_set_dict(obj: *mut ::std::os::raw::c_void, options: *mut *mut AVDictionary) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_opt_set_dict2(
		obj: *mut ::std::os::raw::c_void,
		options: *mut *mut AVDictionary,
		search_flags: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_opt_get_key_value(
		ropts: *mut *const ::std::os::raw::c_char,
		key_val_sep: *const ::std::os::raw::c_char,
		pairs_sep: *const ::std::os::raw::c_char,
		flags: ::std::os::raw::c_uint,
		rkey: *mut *mut ::std::os::raw::c_char,
		rval: *mut *mut ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
pub const AV_OPT_FLAG_IMPLICIT_KEY: _bindgen_ty_5 = 1;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
extern "C" {
	pub fn av_opt_eval_flags(
		obj: *mut ::std::os::raw::c_void,
		o: *const AVOption,
		val: *const ::std::os::raw::c_char,
		flags_out: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_opt_eval_int(
		obj: *mut ::std::os::raw::c_void,
		o: *const AVOption,
		val: *const ::std::os::raw::c_char,
		int_out: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_opt_eval_int64(
		obj: *mut ::std::os::raw::c_void,
		o: *const AVOption,
		val: *const ::std::os::raw::c_char,
		int64_out: *mut i64,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_opt_eval_float(
		obj: *mut ::std::os::raw::c_void,
		o: *const AVOption,
		val: *const ::std::os::raw::c_char,
		float_out: *mut f32,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_opt_eval_double(
		obj: *mut ::std::os::raw::c_void,
		o: *const AVOption,
		val: *const ::std::os::raw::c_char,
		double_out: *mut f64,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_opt_eval_q(
		obj: *mut ::std::os::raw::c_void,
		o: *const AVOption,
		val: *const ::std::os::raw::c_char,
		q_out: *mut AVRational,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_opt_find(
		obj: *mut ::std::os::raw::c_void,
		name: *const ::std::os::raw::c_char,
		unit: *const ::std::os::raw::c_char,
		opt_flags: ::std::os::raw::c_int,
		search_flags: ::std::os::raw::c_int,
	) -> *const AVOption;
}
extern "C" {
	pub fn av_opt_find2(
		obj: *mut ::std::os::raw::c_void,
		name: *const ::std::os::raw::c_char,
		unit: *const ::std::os::raw::c_char,
		opt_flags: ::std::os::raw::c_int,
		search_flags: ::std::os::raw::c_int,
		target_obj: *mut *mut ::std::os::raw::c_void,
	) -> *const AVOption;
}
extern "C" {
	pub fn av_opt_next(obj: *const ::std::os::raw::c_void, prev: *const AVOption) -> *const AVOption;
}
extern "C" {
	pub fn av_opt_child_next(
		obj: *mut ::std::os::raw::c_void,
		prev: *mut ::std::os::raw::c_void,
	) -> *mut ::std::os::raw::c_void;
}
extern "C" {
	pub fn av_opt_child_class_iterate(parent: *const AVClass, iter: *mut *mut ::std::os::raw::c_void)
		-> *const AVClass;
}
extern "C" {
	pub fn av_opt_set(
		obj: *mut ::std::os::raw::c_void,
		name: *const ::std::os::raw::c_char,
		val: *const ::std::os::raw::c_char,
		search_flags: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_opt_set_int(
		obj: *mut ::std::os::raw::c_void,
		name: *const ::std::os::raw::c_char,
		val: i64,
		search_flags: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_opt_set_double(
		obj: *mut ::std::os::raw::c_void,
		name: *const ::std::os::raw::c_char,
		val: f64,
		search_flags: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_opt_set_q(
		obj: *mut ::std::os::raw::c_void,
		name: *const ::std::os::raw::c_char,
		val: AVRational,
		search_flags: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_opt_set_bin(
		obj: *mut ::std::os::raw::c_void,
		name: *const ::std::os::raw::c_char,
		val: *const u8,
		size: ::std::os::raw::c_int,
		search_flags: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_opt_set_image_size(
		obj: *mut ::std::os::raw::c_void,
		name: *const ::std::os::raw::c_char,
		w: ::std::os::raw::c_int,
		h: ::std::os::raw::c_int,
		search_flags: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_opt_set_pixel_fmt(
		obj: *mut ::std::os::raw::c_void,
		name: *const ::std::os::raw::c_char,
		fmt: AVPixelFormat,
		search_flags: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_opt_set_sample_fmt(
		obj: *mut ::std::os::raw::c_void,
		name: *const ::std::os::raw::c_char,
		fmt: AVSampleFormat,
		search_flags: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_opt_set_video_rate(
		obj: *mut ::std::os::raw::c_void,
		name: *const ::std::os::raw::c_char,
		val: AVRational,
		search_flags: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_opt_set_channel_layout(
		obj: *mut ::std::os::raw::c_void,
		name: *const ::std::os::raw::c_char,
		ch_layout: i64,
		search_flags: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_opt_set_chlayout(
		obj: *mut ::std::os::raw::c_void,
		name: *const ::std::os::raw::c_char,
		layout: *const AVChannelLayout,
		search_flags: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_opt_set_dict_val(
		obj: *mut ::std::os::raw::c_void,
		name: *const ::std::os::raw::c_char,
		val: *const AVDictionary,
		search_flags: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_opt_get(
		obj: *mut ::std::os::raw::c_void,
		name: *const ::std::os::raw::c_char,
		search_flags: ::std::os::raw::c_int,
		out_val: *mut *mut u8,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_opt_get_int(
		obj: *mut ::std::os::raw::c_void,
		name: *const ::std::os::raw::c_char,
		search_flags: ::std::os::raw::c_int,
		out_val: *mut i64,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_opt_get_double(
		obj: *mut ::std::os::raw::c_void,
		name: *const ::std::os::raw::c_char,
		search_flags: ::std::os::raw::c_int,
		out_val: *mut f64,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_opt_get_q(
		obj: *mut ::std::os::raw::c_void,
		name: *const ::std::os::raw::c_char,
		search_flags: ::std::os::raw::c_int,
		out_val: *mut AVRational,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_opt_get_image_size(
		obj: *mut ::std::os::raw::c_void,
		name: *const ::std::os::raw::c_char,
		search_flags: ::std::os::raw::c_int,
		w_out: *mut ::std::os::raw::c_int,
		h_out: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_opt_get_pixel_fmt(
		obj: *mut ::std::os::raw::c_void,
		name: *const ::std::os::raw::c_char,
		search_flags: ::std::os::raw::c_int,
		out_fmt: *mut AVPixelFormat,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_opt_get_sample_fmt(
		obj: *mut ::std::os::raw::c_void,
		name: *const ::std::os::raw::c_char,
		search_flags: ::std::os::raw::c_int,
		out_fmt: *mut AVSampleFormat,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_opt_get_video_rate(
		obj: *mut ::std::os::raw::c_void,
		name: *const ::std::os::raw::c_char,
		search_flags: ::std::os::raw::c_int,
		out_val: *mut AVRational,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_opt_get_channel_layout(
		obj: *mut ::std::os::raw::c_void,
		name: *const ::std::os::raw::c_char,
		search_flags: ::std::os::raw::c_int,
		ch_layout: *mut i64,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_opt_get_chlayout(
		obj: *mut ::std::os::raw::c_void,
		name: *const ::std::os::raw::c_char,
		search_flags: ::std::os::raw::c_int,
		layout: *mut AVChannelLayout,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_opt_get_dict_val(
		obj: *mut ::std::os::raw::c_void,
		name: *const ::std::os::raw::c_char,
		search_flags: ::std::os::raw::c_int,
		out_val: *mut *mut AVDictionary,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_opt_ptr(
		avclass: *const AVClass,
		obj: *mut ::std::os::raw::c_void,
		name: *const ::std::os::raw::c_char,
	) -> *mut ::std::os::raw::c_void;
}
extern "C" {
	pub fn av_opt_freep_ranges(ranges: *mut *mut AVOptionRanges);
}
extern "C" {
	pub fn av_opt_query_ranges(
		arg1: *mut *mut AVOptionRanges,
		obj: *mut ::std::os::raw::c_void,
		key: *const ::std::os::raw::c_char,
		flags: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_opt_copy(dest: *mut ::std::os::raw::c_void, src: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_opt_query_ranges_default(
		arg1: *mut *mut AVOptionRanges,
		obj: *mut ::std::os::raw::c_void,
		key: *const ::std::os::raw::c_char,
		flags: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_opt_is_set_to_default(obj: *mut ::std::os::raw::c_void, o: *const AVOption) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_opt_is_set_to_default_by_name(
		obj: *mut ::std::os::raw::c_void,
		name: *const ::std::os::raw::c_char,
		search_flags: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn av_opt_serialize(
		obj: *mut ::std::os::raw::c_void,
		opt_flags: ::std::os::raw::c_int,
		flags: ::std::os::raw::c_int,
		buffer: *mut *mut ::std::os::raw::c_char,
		key_val_sep: ::std::os::raw::c_char,
		pairs_sep: ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
	pub gp_offset: ::std::os::raw::c_uint,
	pub fp_offset: ::std::os::raw::c_uint,
	pub overflow_arg_area: *mut ::std::os::raw::c_void,
	pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
	assert_eq!(
		::std::mem::size_of::<__va_list_tag>(),
		24usize,
		concat!("Size of: ", stringify!(__va_list_tag))
	);
	assert_eq!(
		::std::mem::align_of::<__va_list_tag>(),
		8usize,
		concat!("Alignment of ", stringify!(__va_list_tag))
	);
	fn test_field_gp_offset() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<__va_list_tag>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).gp_offset) as usize - ptr as usize
			},
			0usize,
			concat!(
				"Offset of field: ",
				stringify!(__va_list_tag),
				"::",
				stringify!(gp_offset)
			)
		);
	}
	test_field_gp_offset();
	fn test_field_fp_offset() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<__va_list_tag>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).fp_offset) as usize - ptr as usize
			},
			4usize,
			concat!(
				"Offset of field: ",
				stringify!(__va_list_tag),
				"::",
				stringify!(fp_offset)
			)
		);
	}
	test_field_fp_offset();
	fn test_field_overflow_arg_area() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<__va_list_tag>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).overflow_arg_area) as usize - ptr as usize
			},
			8usize,
			concat!(
				"Offset of field: ",
				stringify!(__va_list_tag),
				"::",
				stringify!(overflow_arg_area)
			)
		);
	}
	test_field_overflow_arg_area();
	fn test_field_reg_save_area() {
		assert_eq!(
			unsafe {
				let uninit = ::std::mem::MaybeUninit::<__va_list_tag>::uninit();
				let ptr = uninit.as_ptr();
				::std::ptr::addr_of!((*ptr).reg_save_area) as usize - ptr as usize
			},
			16usize,
			concat!(
				"Offset of field: ",
				stringify!(__va_list_tag),
				"::",
				stringify!(reg_save_area)
			)
		);
	}
	test_field_reg_save_area();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct URLContext {
	pub _address: u8,
}
